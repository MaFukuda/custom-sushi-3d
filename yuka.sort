@Pass {
  @DepthFunc(LEQUAL)
  @BlendFunc(SRC_ALPHA, ONE_MINUS_SRC_ALPHA)
  @CullFace(BACK)

  FS_PREC(mediump,float)

  varying vec2 vTexCoord;

  #ifdef VS
    attribute vec3 position;
    attribute vec3 normal;
    attribute vec2 texCoord;
    uniform mat4 _matPVM;
    uniform mat4 _matM;
    void main(){
      gl_Position = _matPVM * vec4(position, 1.);
      vTexCoord = texCoord;
    }
  #endif

  #ifdef FS
    uniform vec2 _viewportSize;
    @{default:"0.0"}
    uniform float rot;
    @{default:"0.5"}
    uniform float radius;
    @{default:"0.6"}
    uniform float alpha;

    vec4 alphaBlend(vec4 base, vec4 blend) {
      return vec4(base.rgb * base.a * (1.0 - blend.a) + blend.rgb * blend.a, blend.a + base.a * (1.0 - blend.a));
    }

    float drawPoint(vec2 uv, vec2 center, float radius) {
      return smoothstep(radius, 0., distance(uv, center));
    }

    mat2 rotate(float t) {
      return mat2(cos(t), -sin(t), sin(t), cos(t));
    }

    void main() {
      vec2 uv = vTexCoord * 2. - vec2(1.);

      float size = 2.0;
      gl_FragColor = vec4(0., 0., 0., 0.);
      gl_FragColor = alphaBlend(gl_FragColor, vec4(0., 0., 0., alpha) * drawPoint(rotate(radians(rot)) * uv, vec2(0., 1.) * 0.6 / size, radius / size));
      gl_FragColor = alphaBlend(gl_FragColor, vec4(0., 0., 0., alpha) * drawPoint(rotate(radians(rot)) * uv, vec2(0.866, -0.5) * 0.6 / size, radius / size));
      gl_FragColor = alphaBlend(gl_FragColor, vec4(0., 0., 0., alpha) * drawPoint(rotate(radians(rot)) * uv, vec2(-0.866, -0.5) * 0.6 / size, radius / size));
    }
  #endif
}
