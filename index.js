(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
require('regenerator-runtime/runtime');
require('grimoirejs/register');
require('grimoirejs-math/register');
require('grimoirejs-fundamental/register');
require('grimoirejs-torus');
require('./src/gui');
require('./src/main');

},{"./src/gui":17,"./src/main":18,"grimoirejs-fundamental/register":5,"grimoirejs-math/register":7,"grimoirejs-torus":8,"grimoirejs/register":11,"regenerator-runtime/runtime":15}],2:[function(require,module,exports){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return b64.length * 3 / 4 - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, j, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr(len * 3 / 4 - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0, j = 0; i < l; i += 4, j += 3) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

},{}],3:[function(require,module,exports){
(function (global){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('isarray')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined
  ? global.TYPED_ARRAY_SUPPORT
  : typedArraySupport()

/*
 * Export kMaxLength after typed array support is determined.
 */
exports.kMaxLength = kMaxLength()

function typedArraySupport () {
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42 && // typed array instances can be augmented
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
}

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

function createBuffer (that, length) {
  if (kMaxLength() < length) {
    throw new RangeError('Invalid typed array length')
  }
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = new Uint8Array(length)
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    if (that === null) {
      that = new Buffer(length)
    }
    that.length = length
  }

  return that
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {
    return new Buffer(arg, encodingOrOffset, length)
  }

  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(this, arg)
  }
  return from(this, arg, encodingOrOffset, length)
}

Buffer.poolSize = 8192 // not used by this implementation

// TODO: Legacy, not needed anymore. Remove in next major version.
Buffer._augment = function (arr) {
  arr.__proto__ = Buffer.prototype
  return arr
}

function from (that, value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
    return fromArrayBuffer(that, value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(that, value, encodingOrOffset)
  }

  return fromObject(that, value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(null, value, encodingOrOffset, length)
}

if (Buffer.TYPED_ARRAY_SUPPORT) {
  Buffer.prototype.__proto__ = Uint8Array.prototype
  Buffer.__proto__ = Uint8Array
  if (typeof Symbol !== 'undefined' && Symbol.species &&
      Buffer[Symbol.species] === Buffer) {
    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
    Object.defineProperty(Buffer, Symbol.species, {
      value: null,
      configurable: true
    })
  }
}

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (that, size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(that, size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(that, size).fill(fill, encoding)
      : createBuffer(that, size).fill(fill)
  }
  return createBuffer(that, size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(null, size, fill, encoding)
}

function allocUnsafe (that, size) {
  assertSize(size)
  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < size; ++i) {
      that[i] = 0
    }
  }
  return that
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(null, size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(null, size)
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  that = createBuffer(that, length)

  var actual = that.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    that = that.slice(0, actual)
  }

  return that
}

function fromArrayLike (that, array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  that = createBuffer(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array, byteOffset, length) {
  array.byteLength // this throws if `array` is not a valid ArrayBuffer

  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  if (byteOffset === undefined && length === undefined) {
    array = new Uint8Array(array)
  } else if (length === undefined) {
    array = new Uint8Array(array, byteOffset)
  } else {
    array = new Uint8Array(array, byteOffset, length)
  }

  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = array
    that.__proto__ = Buffer.prototype
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromArrayLike(that, array)
  }
  return that
}

function fromObject (that, obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    that = createBuffer(that, len)

    if (that.length === 0) {
      return that
    }

    obj.copy(that, 0, 0, len)
    return that
  }

  if (obj) {
    if ((typeof ArrayBuffer !== 'undefined' &&
        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
      if (typeof obj.length !== 'number' || isnan(obj.length)) {
        return createBuffer(that, 0)
      }
      return fromArrayLike(that, obj)
    }

    if (obj.type === 'Buffer' && isArray(obj.data)) {
      return fromArrayLike(that, obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < kMaxLength()` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
// Buffer instances.
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (isNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (Buffer.TYPED_ARRAY_SUPPORT &&
        typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = this.subarray(start, end)
    newBuf.__proto__ = Buffer.prototype
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; ++i) {
      newBuf[i] = this[i + start]
    }
  }

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = (value & 0xff)
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = (value & 0xff)
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value & 0xff)
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = (value & 0xff)
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : utf8ToBytes(new Buffer(val, encoding).toString())
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

function isnan (val) {
  return val !== val // eslint-disable-line no-self-compare
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"base64-js":2,"ieee754":12,"isarray":13}],4:[function(require,module,exports){
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental;
},{}],5:[function(require,module,exports){
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _AssetLoader = __webpack_require__(1);
	
	var _AssetLoader2 = _interopRequireDefault(_AssetLoader);
	
	var _CacheResolver = __webpack_require__(3);
	
	var _CacheResolver2 = _interopRequireDefault(_CacheResolver);
	
	var _ExternalResourceResolver = __webpack_require__(4);
	
	var _ExternalResourceResolver2 = _interopRequireDefault(_ExternalResourceResolver);
	
	var _ImageResolver = __webpack_require__(5);
	
	var _ImageResolver2 = _interopRequireDefault(_ImageResolver);
	
	var _TextFileResolver = __webpack_require__(6);
	
	var _TextFileResolver2 = _interopRequireDefault(_TextFileResolver);
	
	var _BasicCamera = __webpack_require__(7);
	
	var _BasicCamera2 = _interopRequireDefault(_BasicCamera);
	
	var _ViewCameraBase = __webpack_require__(8);
	
	var _ViewCameraBase2 = _interopRequireDefault(_ViewCameraBase);
	
	var _AssetLoadingManagerComponent = __webpack_require__(13);
	
	var _AssetLoadingManagerComponent2 = _interopRequireDefault(_AssetLoadingManagerComponent);
	
	var _CameraComponent = __webpack_require__(17);
	
	var _CameraComponent2 = _interopRequireDefault(_CameraComponent);
	
	var _CanvasInitializerComponent = __webpack_require__(23);
	
	var _CanvasInitializerComponent2 = _interopRequireDefault(_CanvasInitializerComponent);
	
	var _FullscreenComponent = __webpack_require__(29);
	
	var _FullscreenComponent2 = _interopRequireDefault(_FullscreenComponent);
	
	var _GeometryComponent = __webpack_require__(30);
	
	var _GeometryComponent2 = _interopRequireDefault(_GeometryComponent);
	
	var _GeometryRegistoryComponent = __webpack_require__(32);
	
	var _GeometryRegistoryComponent2 = _interopRequireDefault(_GeometryRegistoryComponent);
	
	var _HTMLBinderComponent = __webpack_require__(33);
	
	var _HTMLBinderComponent2 = _interopRequireDefault(_HTMLBinderComponent);
	
	var _LoopManagerComponent = __webpack_require__(34);
	
	var _LoopManagerComponent2 = _interopRequireDefault(_LoopManagerComponent);
	
	var _MaterialComponent = __webpack_require__(35);
	
	var _MaterialComponent2 = _interopRequireDefault(_MaterialComponent);
	
	var _MaterialContainerComponent = __webpack_require__(42);
	
	var _MaterialContainerComponent2 = _interopRequireDefault(_MaterialContainerComponent);
	
	var _MaterialImporterComponent = __webpack_require__(44);
	
	var _MaterialImporterComponent2 = _interopRequireDefault(_MaterialImporterComponent);
	
	var _MaterialManagerComponent = __webpack_require__(64);
	
	var _MaterialManagerComponent2 = _interopRequireDefault(_MaterialManagerComponent);
	
	var _MeshRendererComponent = __webpack_require__(65);
	
	var _MeshRendererComponent2 = _interopRequireDefault(_MeshRendererComponent);
	
	var _MouseCameraControlComponent = __webpack_require__(66);
	
	var _MouseCameraControlComponent2 = _interopRequireDefault(_MouseCameraControlComponent);
	
	var _RenderBufferComponent = __webpack_require__(67);
	
	var _RenderBufferComponent2 = _interopRequireDefault(_RenderBufferComponent);
	
	var _RendererComponent = __webpack_require__(70);
	
	var _RendererComponent2 = _interopRequireDefault(_RendererComponent);
	
	var _RendererManagerComponent = __webpack_require__(71);
	
	var _RendererManagerComponent2 = _interopRequireDefault(_RendererManagerComponent);
	
	var _RenderQuadComponent = __webpack_require__(73);
	
	var _RenderQuadComponent2 = _interopRequireDefault(_RenderQuadComponent);
	
	var _RenderSceneComponent = __webpack_require__(75);
	
	var _RenderSceneComponent2 = _interopRequireDefault(_RenderSceneComponent);
	
	var _SceneComponent = __webpack_require__(21);
	
	var _SceneComponent2 = _interopRequireDefault(_SceneComponent);
	
	var _TextureBufferComponent = __webpack_require__(76);
	
	var _TextureBufferComponent2 = _interopRequireDefault(_TextureBufferComponent);
	
	var _TextureComponent = __webpack_require__(77);
	
	var _TextureComponent2 = _interopRequireDefault(_TextureComponent);
	
	var _TransformComponent = __webpack_require__(19);
	
	var _TransformComponent2 = _interopRequireDefault(_TransformComponent);
	
	var _Angle2DConverter = __webpack_require__(78);
	
	var _Angle2DConverter2 = _interopRequireDefault(_Angle2DConverter);
	
	var _BooleanConverter = __webpack_require__(80);
	
	var _BooleanConverter2 = _interopRequireDefault(_BooleanConverter);
	
	var _CanvasSizeConverter = __webpack_require__(81);
	
	var _CanvasSizeConverter2 = _interopRequireDefault(_CanvasSizeConverter);
	
	var _Color3Converter = __webpack_require__(82);
	
	var _Color3Converter2 = _interopRequireDefault(_Color3Converter);
	
	var _Color4Converter = __webpack_require__(84);
	
	var _Color4Converter2 = _interopRequireDefault(_Color4Converter);
	
	var _ComponentConverter = __webpack_require__(85);
	
	var _ComponentConverter2 = _interopRequireDefault(_ComponentConverter);
	
	var _EnumConverter = __webpack_require__(87);
	
	var _EnumConverter2 = _interopRequireDefault(_EnumConverter);
	
	var _GeometryConverter = __webpack_require__(88);
	
	var _GeometryConverter2 = _interopRequireDefault(_GeometryConverter);
	
	var _MaterialConverter = __webpack_require__(90);
	
	var _MaterialConverter2 = _interopRequireDefault(_MaterialConverter);
	
	var _NumberArrayConverter = __webpack_require__(91);
	
	var _NumberArrayConverter2 = _interopRequireDefault(_NumberArrayConverter);
	
	var _NumberConverter = __webpack_require__(92);
	
	var _NumberConverter2 = _interopRequireDefault(_NumberConverter);
	
	var _ObjectConverter = __webpack_require__(93);
	
	var _ObjectConverter2 = _interopRequireDefault(_ObjectConverter);
	
	var _Rotation3Converter = __webpack_require__(94);
	
	var _Rotation3Converter2 = _interopRequireDefault(_Rotation3Converter);
	
	var _TextureConverter = __webpack_require__(95);
	
	var _TextureConverter2 = _interopRequireDefault(_TextureConverter);
	
	var _Vector2Converter = __webpack_require__(97);
	
	var _Vector2Converter2 = _interopRequireDefault(_Vector2Converter);
	
	var _Vector3Converter = __webpack_require__(98);
	
	var _Vector3Converter2 = _interopRequireDefault(_Vector3Converter);
	
	var _Vector4Converter = __webpack_require__(99);
	
	var _Vector4Converter2 = _interopRequireDefault(_Vector4Converter);
	
	var _ViewportConverter = __webpack_require__(100);
	
	var _ViewportConverter2 = _interopRequireDefault(_ViewportConverter);
	
	var _DefaultPrimitives = __webpack_require__(102);
	
	var _DefaultPrimitives2 = _interopRequireDefault(_DefaultPrimitives);
	
	var _Geometry = __webpack_require__(89);
	
	var _Geometry2 = _interopRequireDefault(_Geometry);
	
	var _GeometryBuilder = __webpack_require__(105);
	
	var _GeometryBuilder2 = _interopRequireDefault(_GeometryBuilder);
	
	var _GeometryFactory = __webpack_require__(31);
	
	var _GeometryFactory2 = _interopRequireDefault(_GeometryFactory);
	
	var _GeometryUtility = __webpack_require__(104);
	
	var _GeometryUtility2 = _interopRequireDefault(_GeometryUtility);
	
	var _DefaultMacro = __webpack_require__(47);
	
	var _DefaultMacro2 = _interopRequireDefault(_DefaultMacro);
	
	var _DefaultMaterial = __webpack_require__(107);
	
	var _DefaultMaterial2 = _interopRequireDefault(_DefaultMaterial);
	
	var _EnvUniformValueResolver = __webpack_require__(52);
	
	var _EnvUniformValueResolver2 = _interopRequireDefault(_EnvUniformValueResolver);
	
	var _ImportResolver = __webpack_require__(56);
	
	var _ImportResolver2 = _interopRequireDefault(_ImportResolver);
	
	var _MacroRegistory = __webpack_require__(46);
	
	var _MacroRegistory2 = _interopRequireDefault(_MacroRegistory);
	
	var _Material = __webpack_require__(62);
	
	var _Material2 = _interopRequireDefault(_Material);
	
	var _MaterialFactory = __webpack_require__(45);
	
	var _MaterialFactory2 = _interopRequireDefault(_MaterialFactory);
	
	var _Pass = __webpack_require__(41);
	
	var _Pass2 = _interopRequireDefault(_Pass);
	
	var _PassFactory = __webpack_require__(48);
	
	var _PassFactory2 = _interopRequireDefault(_PassFactory);
	
	var _SORTPass = __webpack_require__(36);
	
	var _SORTPass2 = _interopRequireDefault(_SORTPass);
	
	var _TextureReference = __webpack_require__(96);
	
	var _TextureReference2 = _interopRequireDefault(_TextureReference);
	
	var _AnnotationRemover = __webpack_require__(61);
	
	var _AnnotationRemover2 = _interopRequireDefault(_AnnotationRemover);
	
	var _CommentRemover = __webpack_require__(54);
	
	var _CommentRemover2 = _interopRequireDefault(_CommentRemover);
	
	var _GLSLUtil = __webpack_require__(51);
	
	var _GLSLUtil2 = _interopRequireDefault(_GLSLUtil);
	
	var _ImportTransformer = __webpack_require__(55);
	
	var _ImportTransformer2 = _interopRequireDefault(_ImportTransformer);
	
	var _SORTPassParser = __webpack_require__(49);
	
	var _SORTPassParser2 = _interopRequireDefault(_SORTPassParser);
	
	var _UniformRegisterer = __webpack_require__(50);
	
	var _UniformRegisterer2 = _interopRequireDefault(_UniformRegisterer);
	
	var _VariableAnnotationRemover = __webpack_require__(59);
	
	var _VariableAnnotationRemover2 = _interopRequireDefault(_VariableAnnotationRemover);
	
	var _VariableParser = __webpack_require__(57);
	
	var _VariableParser2 = _interopRequireDefault(_VariableParser);
	
	var _Buffer = __webpack_require__(106);
	
	var _Buffer2 = _interopRequireDefault(_Buffer);
	
	var _FrameBuffer = __webpack_require__(74);
	
	var _FrameBuffer2 = _interopRequireDefault(_FrameBuffer);
	
	var _GLExtRequestor = __webpack_require__(28);
	
	var _GLExtRequestor2 = _interopRequireDefault(_GLExtRequestor);
	
	var _Program = __webpack_require__(38);
	
	var _Program2 = _interopRequireDefault(_Program);
	
	var _RenderBuffer = __webpack_require__(68);
	
	var _RenderBuffer2 = _interopRequireDefault(_RenderBuffer);
	
	var _ResourceBase = __webpack_require__(26);
	
	var _ResourceBase2 = _interopRequireDefault(_ResourceBase);
	
	var _ResourceCache = __webpack_require__(39);
	
	var _ResourceCache2 = _interopRequireDefault(_ResourceCache);
	
	var _Shader = __webpack_require__(37);
	
	var _Shader2 = _interopRequireDefault(_Shader);
	
	var _Texture2D = __webpack_require__(25);
	
	var _Texture2D2 = _interopRequireDefault(_Texture2D);
	
	var _UniformProxy = __webpack_require__(40);
	
	var _UniformProxy2 = _interopRequireDefault(_UniformProxy);
	
	var _DrawPriorty = __webpack_require__(43);
	
	var _DrawPriorty2 = _interopRequireDefault(_DrawPriorty);
	
	var _RenderQueue = __webpack_require__(18);
	
	var _RenderQueue2 = _interopRequireDefault(_RenderQueue);
	
	var _RenderQueueRegistry = __webpack_require__(22);
	
	var _RenderQueueRegistry2 = _interopRequireDefault(_RenderQueueRegistry);
	
	var _RotationParser = __webpack_require__(79);
	
	var _RotationParser2 = _interopRequireDefault(_RotationParser);
	
	var _TextureSizeCalculator = __webpack_require__(69);
	
	var _TextureSizeCalculator2 = _interopRequireDefault(_TextureSizeCalculator);
	
	var _main = __webpack_require__(111);
	
	var _main2 = _interopRequireDefault(_main);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var __EXPOSE__ = {
	    "Asset": {
	        "AssetLoader": _AssetLoader2.default,
	        "CacheResolver": _CacheResolver2.default,
	        "ExternalResourceResolver": _ExternalResourceResolver2.default,
	        "ImageResolver": _ImageResolver2.default,
	        "TextFileResolver": _TextFileResolver2.default
	    },
	    "Camera": {
	        "BasicCamera": _BasicCamera2.default,
	        "ViewCameraBase": _ViewCameraBase2.default
	    },
	    "Components": {
	        "AssetLoadingManagerComponent": _AssetLoadingManagerComponent2.default,
	        "CameraComponent": _CameraComponent2.default,
	        "CanvasInitializerComponent": _CanvasInitializerComponent2.default,
	        "FullscreenComponent": _FullscreenComponent2.default,
	        "GeometryComponent": _GeometryComponent2.default,
	        "GeometryRegistoryComponent": _GeometryRegistoryComponent2.default,
	        "HTMLBinderComponent": _HTMLBinderComponent2.default,
	        "LoopManagerComponent": _LoopManagerComponent2.default,
	        "MaterialComponent": _MaterialComponent2.default,
	        "MaterialContainerComponent": _MaterialContainerComponent2.default,
	        "MaterialImporterComponent": _MaterialImporterComponent2.default,
	        "MaterialManagerComponent": _MaterialManagerComponent2.default,
	        "MeshRendererComponent": _MeshRendererComponent2.default,
	        "MouseCameraControlComponent": _MouseCameraControlComponent2.default,
	        "RenderBufferComponent": _RenderBufferComponent2.default,
	        "RendererComponent": _RendererComponent2.default,
	        "RendererManagerComponent": _RendererManagerComponent2.default,
	        "RenderQuadComponent": _RenderQuadComponent2.default,
	        "RenderSceneComponent": _RenderSceneComponent2.default,
	        "SceneComponent": _SceneComponent2.default,
	        "TextureBufferComponent": _TextureBufferComponent2.default,
	        "TextureComponent": _TextureComponent2.default,
	        "TransformComponent": _TransformComponent2.default
	    },
	    "Converters": {
	        "Angle2DConverter": _Angle2DConverter2.default,
	        "BooleanConverter": _BooleanConverter2.default,
	        "CanvasSizeConverter": _CanvasSizeConverter2.default,
	        "Color3Converter": _Color3Converter2.default,
	        "Color4Converter": _Color4Converter2.default,
	        "ComponentConverter": _ComponentConverter2.default,
	        "EnumConverter": _EnumConverter2.default,
	        "GeometryConverter": _GeometryConverter2.default,
	        "MaterialConverter": _MaterialConverter2.default,
	        "NumberArrayConverter": _NumberArrayConverter2.default,
	        "NumberConverter": _NumberConverter2.default,
	        "ObjectConverter": _ObjectConverter2.default,
	        "Rotation3Converter": _Rotation3Converter2.default,
	        "TextureConverter": _TextureConverter2.default,
	        "Vector2Converter": _Vector2Converter2.default,
	        "Vector3Converter": _Vector3Converter2.default,
	        "Vector4Converter": _Vector4Converter2.default,
	        "ViewportConverter": _ViewportConverter2.default
	    },
	    "Geometry": {
	        "DefaultPrimitives": _DefaultPrimitives2.default,
	        "Geometry": _Geometry2.default,
	        "GeometryBuilder": _GeometryBuilder2.default,
	        "GeometryFactory": _GeometryFactory2.default,
	        "GeometryUtility": _GeometryUtility2.default
	    },
	    "Material": {
	        "DefaultMacro": _DefaultMacro2.default,
	        "DefaultMaterial": _DefaultMaterial2.default,
	        "EnvUniformValueResolver": _EnvUniformValueResolver2.default,
	        "ImportResolver": _ImportResolver2.default,
	        "MacroRegistory": _MacroRegistory2.default,
	        "Material": _Material2.default,
	        "MaterialFactory": _MaterialFactory2.default,
	        "Pass": _Pass2.default,
	        "PassFactory": _PassFactory2.default,
	        "SORTPass": _SORTPass2.default,
	        "TextureReference": _TextureReference2.default,
	        "Transformers": {
	            "AnnotationRemover": _AnnotationRemover2.default,
	            "CommentRemover": _CommentRemover2.default,
	            "GLSLUtil": _GLSLUtil2.default,
	            "ImportTransformer": _ImportTransformer2.default,
	            "SORTPassParser": _SORTPassParser2.default,
	            "UniformRegisterer": _UniformRegisterer2.default,
	            "VariableAnnotationRemover": _VariableAnnotationRemover2.default,
	            "VariableParser": _VariableParser2.default
	        }
	    },
	    "Resource": {
	        "Buffer": _Buffer2.default,
	        "FrameBuffer": _FrameBuffer2.default,
	        "GLExtRequestor": _GLExtRequestor2.default,
	        "Program": _Program2.default,
	        "RenderBuffer": _RenderBuffer2.default,
	        "ResourceBase": _ResourceBase2.default,
	        "ResourceCache": _ResourceCache2.default,
	        "Shader": _Shader2.default,
	        "Texture2D": _Texture2D2.default,
	        "UniformProxy": _UniformProxy2.default
	    },
	    "SceneRenderer": {
	        "DrawPriorty": _DrawPriorty2.default,
	        "RenderQueue": _RenderQueue2.default,
	        "RenderQueueRegistry": _RenderQueueRegistry2.default
	    },
	    "Util": {
	        "RotationParser": _RotationParser2.default,
	        "TextureSizeCalculator": _TextureSizeCalculator2.default
	    }
	};
	var __BASE__ = (0, _main2.default)();
	Object.assign(__BASE__ || {}, __EXPOSE__);
	window["GrimoireJS"].lib.fundamental = __EXPOSE__;
	exports.default = __BASE__;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _EEObject2 = __webpack_require__(2);
	
	var _EEObject3 = _interopRequireDefault(_EEObject2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	
	/**
	 * Provides managing all promise on initializing resources.
	 */
	var AssetLoader = function (_EEObject) {
	    _inherits(AssetLoader, _EEObject);
	
	    function AssetLoader() {
	        _classCallCheck(this, AssetLoader);
	
	        /**
	         * Promise count registered.
	         * @type {number}
	         */
	        var _this = _possibleConstructorReturn(this, (AssetLoader.__proto__ || Object.getPrototypeOf(AssetLoader)).apply(this, arguments));
	
	        _this.registerCount = 0;
	        /**
	         * Promise count finished successfully.
	         * @type {number}
	         */
	        _this.loadCount = 0;
	        /**
	         * Promise count completed(success and errored)
	         * @type {number}
	         */
	        _this.completeCount = 0;
	        /**
	         * Promise count errored
	         * @type {number}
	         */
	        _this.errorCount = 0;
	        /**
	         * Main promise to provide tasks for waiting for all resource loading.
	         * @type {Promise<void>}
	         */
	        _this.promise = new Promise(function (resolve) {
	            _this._resolve = resolve;
	        });
	        return _this;
	    }
	    /**
	     * Register an promise to be waited until finished.
	     */
	
	
	    _createClass(AssetLoader, [{
	        key: "register",
	        value: function register(promise) {
	            var _this2 = this;
	
	            this.registerCount++;
	            return new Promise(function (resolve, reject) {
	                (function () {
	                    return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	                        return regeneratorRuntime.wrap(function _callee$(_context) {
	                            while (1) {
	                                switch (_context.prev = _context.next) {
	                                    case 0:
	                                        _context.prev = 0;
	                                        _context.next = 3;
	                                        return promise;
	
	                                    case 3:
	                                        _context.t0 = _context.sent;
	                                        resolve(_context.t0);
	
	                                        this.loadCount++;
	                                        _context.next = 12;
	                                        break;
	
	                                    case 8:
	                                        _context.prev = 8;
	                                        _context.t1 = _context["catch"](0);
	
	                                        reject(_context.t1);
	                                        this.errorCount++;
	
	                                    case 12:
	                                        this.completeCount++;
	                                        this._checkLoadCompleted();
	
	                                    case 14:
	                                    case "end":
	                                        return _context.stop();
	                                }
	                            }
	                        }, _callee, this, [[0, 8]]);
	                    }));
	                }).bind(_this2)();
	            });
	        }
	        /**
	         * Verify all promises are completed.
	         */
	
	    }, {
	        key: "_checkLoadCompleted",
	        value: function _checkLoadCompleted() {
	            this.emit("progress", this);
	            if (this.registerCount === this.completeCount) {
	                this._resolve();
	            }
	        }
	    }]);
	
	    return AssetLoader;
	}(_EEObject3.default);
	
	exports.default = AssetLoader;

/***/ },
/* 2 */
/***/ function(module, exports) {

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});exports.default=window.GrimoireJS.Base.EEObject;

/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	/**
	 * Resolve resources with caching.
	 */
	/**
	 * Resolve resources with caching.
	 */
	var CacheResolver = function () {
	    function CacheResolver(toAbsolute) {
	        _classCallCheck(this, CacheResolver);
	
	        this.toAbsolute = toAbsolute;
	        this.cache = {};
	        this.resolvers = {};
	    }
	
	    _createClass(CacheResolver, [{
	        key: "resolve",
	        value: function resolve(src, resolver) {
	            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	                var abs, result;
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                abs = this.toAbsolute(src);
	
	                                if (!this._cached(abs)) {
	                                    _context.next = 5;
	                                    break;
	                                }
	
	                                return _context.abrupt("return", this.cache[abs]);
	
	                            case 5:
	                                if (!this._resolving(abs)) {
	                                    _context.next = 11;
	                                    break;
	                                }
	
	                                _context.next = 8;
	                                return this.resolvers[abs];
	
	                            case 8:
	                                return _context.abrupt("return", _context.sent);
	
	                            case 11:
	                                this.resolvers[abs] = resolver(abs);
	                                _context.next = 14;
	                                return this.resolvers[abs];
	
	                            case 14:
	                                result = _context.sent;
	
	                                this._resolved(abs, result);
	                                return _context.abrupt("return", result);
	
	                            case 17:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, this);
	            }));
	        }
	    }, {
	        key: "_cached",
	        value: function _cached(abs) {
	            return typeof this.cache[abs] !== "undefined";
	        }
	    }, {
	        key: "_resolving",
	        value: function _resolving(abs) {
	            return typeof this.resolvers[abs] !== "undefined";
	        }
	    }, {
	        key: "_resolved",
	        value: function _resolved(abs, result) {
	            delete this.resolvers[abs];
	            this.cache[abs] = result;
	        }
	    }]);
	
	    return CacheResolver;
	}();
	
	exports.default = CacheResolver;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _CacheResolver2 = __webpack_require__(3);
	
	var _CacheResolver3 = _interopRequireDefault(_CacheResolver2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ExternalResourceResolver = function (_CacheResolver) {
	    _inherits(ExternalResourceResolver, _CacheResolver);
	
	    function ExternalResourceResolver() {
	        _classCallCheck(this, ExternalResourceResolver);
	
	        return _possibleConstructorReturn(this, (ExternalResourceResolver.__proto__ || Object.getPrototypeOf(ExternalResourceResolver)).call(this, ExternalResourceResolver._toAbsolute));
	    }
	
	    _createClass(ExternalResourceResolver, null, [{
	        key: "_toAbsolute",
	        value: function _toAbsolute(href) {
	            var link = document.createElement("a");
	            link.href = href;
	            return link.protocol + "//" + link.host + link.pathname + link.search + link.hash;
	        }
	    }]);
	
	    return ExternalResourceResolver;
	}(_CacheResolver3.default);
	
	exports.default = ExternalResourceResolver;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.ImageResolver = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _ExternalResourceResolver = __webpack_require__(4);
	
	var _ExternalResourceResolver2 = _interopRequireDefault(_ExternalResourceResolver);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ImageResolver = exports.ImageResolver = function (_ExternalResourceReso) {
	    _inherits(ImageResolver, _ExternalResourceReso);
	
	    function ImageResolver() {
	        _classCallCheck(this, ImageResolver);
	
	        return _possibleConstructorReturn(this, (ImageResolver.__proto__ || Object.getPrototypeOf(ImageResolver)).apply(this, arguments));
	    }
	
	    _createClass(ImageResolver, [{
	        key: "resolve",
	        value: function resolve(path) {
	            return _get(ImageResolver.prototype.__proto__ || Object.getPrototypeOf(ImageResolver.prototype), "resolve", this).call(this, path, function (abs) {
	                return new Promise(function (resolve, reject) {
	                    var imgTag = new Image();
	                    imgTag.onload = function () {
	                        resolve(imgTag);
	                    };
	                    imgTag.onerror = function (e) {
	                        reject(e);
	                    };
	                    imgTag.src = abs;
	                });
	            });
	        }
	    }]);
	
	    return ImageResolver;
	}(_ExternalResourceResolver2.default);
	
	exports.default = new ImageResolver();

/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.TextFileResolver = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _ExternalResourceResolver = __webpack_require__(4);
	
	var _ExternalResourceResolver2 = _interopRequireDefault(_ExternalResourceResolver);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var TextFileResolver = exports.TextFileResolver = function (_ExternalResourceReso) {
	    _inherits(TextFileResolver, _ExternalResourceReso);
	
	    function TextFileResolver() {
	        _classCallCheck(this, TextFileResolver);
	
	        return _possibleConstructorReturn(this, (TextFileResolver.__proto__ || Object.getPrototypeOf(TextFileResolver)).apply(this, arguments));
	    }
	
	    _createClass(TextFileResolver, [{
	        key: "resolve",
	        value: function resolve(path) {
	            return _get(TextFileResolver.prototype.__proto__ || Object.getPrototypeOf(TextFileResolver.prototype), "resolve", this).call(this, path, function (abs) {
	                return new Promise(function (resolve, reject) {
	                    var xhr = new XMLHttpRequest();
	                    xhr.open("GET", abs);
	                    xhr.onload = function (v) {
	                        resolve(xhr.responseText);
	                    };
	                    xhr.onerror = function (e) {
	                        reject(e);
	                    };
	                    xhr.send();
	                });
	            });
	        }
	    }]);
	
	    return TextFileResolver;
	}(_ExternalResourceResolver2.default);
	
	exports.default = new TextFileResolver();

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _ViewCameraBase2 = __webpack_require__(8);
	
	var _ViewCameraBase3 = _interopRequireDefault(_ViewCameraBase2);
	
	var _GLM = __webpack_require__(12);
	
	var _GLM2 = _interopRequireDefault(_GLM);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var mat4 = _GLM2.default.mat4,
	    vec3 = _GLM2.default.vec3,
	    vec4 = _GLM2.default.vec4;
	/**
	 * Provides perspective camera as implementation of ICamera.
	 */
	
	var BasicCamera = function (_ViewCameraBase) {
	    _inherits(BasicCamera, _ViewCameraBase);
	
	    function BasicCamera() {
	        _classCallCheck(this, BasicCamera);
	
	        var _this = _possibleConstructorReturn(this, (BasicCamera.__proto__ || Object.getPrototypeOf(BasicCamera)).apply(this, arguments));
	
	        _this._orthographic = false;
	        return _this;
	    }
	
	    _createClass(BasicCamera, [{
	        key: "getViewMatrix",
	        value: function getViewMatrix() {
	            return this.__viewMatrix;
	        }
	    }, {
	        key: "getProjectionMatrix",
	        value: function getProjectionMatrix() {
	            return this.__projectionMatrix;
	        }
	    }, {
	        key: "getInvProjectionMatrix",
	        value: function getInvProjectionMatrix() {
	            return this.__invProjectionMatrix;
	        }
	    }, {
	        key: "getProjectionViewMatrix",
	        value: function getProjectionViewMatrix() {
	            return this.__projectionViewMatrix;
	        }
	    }, {
	        key: "getFar",
	        value: function getFar() {
	            return this._far;
	        }
	    }, {
	        key: "setFar",
	        value: function setFar(far) {
	            this._far = far;
	            this._recalculateProjection();
	        }
	    }, {
	        key: "getNear",
	        value: function getNear() {
	            return this._near;
	        }
	    }, {
	        key: "setNear",
	        value: function setNear(near) {
	            this._near = near;
	            this._recalculateProjection();
	        }
	    }, {
	        key: "getAspect",
	        value: function getAspect() {
	            return this._aspect;
	        }
	    }, {
	        key: "setAspect",
	        value: function setAspect(aspect) {
	            this._aspect = aspect;
	            this._recalculateProjection();
	        }
	    }, {
	        key: "getFovy",
	        value: function getFovy() {
	            return this._fovy;
	        }
	    }, {
	        key: "setFovy",
	        value: function setFovy(fov) {
	            this._fovy = fov;
	            this._recalculateProjection();
	        }
	    }, {
	        key: "getOrthoSize",
	        value: function getOrthoSize() {
	            return this._orthoSize;
	        }
	    }, {
	        key: "setOrthoSize",
	        value: function setOrthoSize(size) {
	            this._orthoSize = size;
	        }
	    }, {
	        key: "setOrthographicMode",
	        value: function setOrthographicMode(isOrtho) {
	            this._orthographic = isOrtho;
	            this._recalculateProjection();
	        }
	    }, {
	        key: "getOrthographicMode",
	        value: function getOrthographicMode() {
	            return this._orthographic;
	        }
	    }, {
	        key: "_recalculateProjection",
	        value: function _recalculateProjection() {
	            if (!this._orthographic) {
	                mat4.perspective(this.__projectionMatrix.rawElements, this._fovy, this._aspect, this._near, this._far);
	            } else {
	                mat4.ortho(this.__projectionMatrix.rawElements, -this._orthoSize * this._aspect, this._orthoSize * this._aspect, -this._orthoSize, this._orthoSize, this._near, this._far);
	            }
	            mat4.mul(this.__projectionViewMatrix.rawElements, this.__projectionMatrix.rawElements, this.__viewMatrix.rawElements);
	            mat4.invert(this.__invProjectionMatrix.rawElements, this.__projectionMatrix.rawElements);
	        }
	    }]);
	
	    return BasicCamera;
	}(_ViewCameraBase3.default);
	
	exports.default = BasicCamera;

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Vector = __webpack_require__(9);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	var _Matrix = __webpack_require__(10);
	
	var _Matrix2 = _interopRequireDefault(_Matrix);
	
	var _Vector3 = __webpack_require__(11);
	
	var _Vector4 = _interopRequireDefault(_Vector3);
	
	var _GLM = __webpack_require__(12);
	
	var _GLM2 = _interopRequireDefault(_GLM);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var mat4 = _GLM2.default.mat4,
	    vec3 = _GLM2.default.vec3,
	    vec4 = _GLM2.default.vec4;
	
	var ViewCameraBase = function () {
	    function ViewCameraBase() {
	        _classCallCheck(this, ViewCameraBase);
	
	        this._eyeCache = _Vector2.default.Zero;
	        this._lookAtCache = _Vector2.default.Zero;
	        this._upCache = _Vector2.default.Zero;
	        this.__viewMatrix = new _Matrix2.default();
	        this.__projectionMatrix = new _Matrix2.default();
	        this.__invProjectionMatrix = new _Matrix2.default();
	        this.__projectionViewMatrix = new _Matrix2.default();
	    }
	
	    _createClass(ViewCameraBase, [{
	        key: "updateTransform",
	        value: function updateTransform(transform) {
	            vec3.transformMat4(this._eyeCache.rawElements, _Vector2.default.Zero.rawElements, transform.globalTransform.rawElements);
	            vec4.transformMat4(this._lookAtCache.rawElements, ViewCameraBase._frontOrigin.rawElements, transform.globalTransform.rawElements);
	            vec3.add(this._lookAtCache.rawElements, this._lookAtCache.rawElements, this._eyeCache.rawElements);
	            vec4.transformMat4(this._upCache.rawElements, ViewCameraBase._upOrigin.rawElements, transform.globalTransform.rawElements);
	            mat4.lookAt(this.__viewMatrix.rawElements, this._eyeCache.rawElements, this._lookAtCache.rawElements, this._upCache.rawElements);
	            mat4.mul(this.__projectionViewMatrix.rawElements, this.__projectionMatrix.rawElements, this.__viewMatrix.rawElements);
	        }
	    }]);
	
	    return ViewCameraBase;
	}();
	
	ViewCameraBase._frontOrigin = new _Vector4.default(0, 0, -1, 0);
	ViewCameraBase._upOrigin = new _Vector4.default(0, 1, 0, 0);
	exports.default = ViewCameraBase;

/***/ },
/* 9 */
/***/ function(module, exports) {

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});exports.default=window.GrimoireJS.lib.math.Vector3;

/***/ },
/* 10 */
/***/ function(module, exports) {

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});exports.default=window.GrimoireJS.lib.math.Matrix;

/***/ },
/* 11 */
/***/ function(module, exports) {

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});exports.default=window.GrimoireJS.lib.math.Vector4;

/***/ },
/* 12 */
/***/ function(module, exports) {

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});exports.default=window.GrimoireJS.lib.math.GLM;

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _grimoirejs = __webpack_require__(14);
	
	var _grimoirejs2 = _interopRequireDefault(_grimoirejs);
	
	var _AssetLoader = __webpack_require__(1);
	
	var _AssetLoader2 = _interopRequireDefault(_AssetLoader);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	var _defaultLoader = __webpack_require__(16);
	
	var _defaultLoader2 = _interopRequireDefault(_defaultLoader);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	
	var AssetLoadingManagerComponent = function (_Component) {
	    _inherits(AssetLoadingManagerComponent, _Component);
	
	    function AssetLoadingManagerComponent() {
	        _classCallCheck(this, AssetLoadingManagerComponent);
	
	        var _this = _possibleConstructorReturn(this, (AssetLoadingManagerComponent.__proto__ || Object.getPrototypeOf(AssetLoadingManagerComponent)).apply(this, arguments));
	
	        _this.loader = new _AssetLoader2.default();
	        return _this;
	    }
	
	    _createClass(AssetLoadingManagerComponent, [{
	        key: "$treeInitialized",
	        value: function $treeInitialized() {
	            if (this.getAttribute("autoStart")) {
	                this._autoStart();
	            }
	            this._documentResolver();
	        }
	    }, {
	        key: "$awake",
	        value: function $awake() {
	            var _this2 = this;
	
	            this.companion.set(_grimoirejs2.default.ns(this.name.ns)("loader"), this.loader);
	            this.loader.register(new Promise(function (resolve) {
	                _this2._documentResolver = resolve;
	            }));
	            var canvasContainer = this.companion.get("canvasContainer");
	            if (!this.getAttribute("enableLoader")) {
	                return;
	            }
	            var loaderContainer = document.createElement("div");
	            loaderContainer.innerHTML = _defaultLoader2.default;
	            loaderContainer.style.width = loaderContainer.style.height = "100%";
	            canvasContainer.appendChild(loaderContainer);
	            this._loaderElement = loaderContainer;
	        }
	    }, {
	        key: "_autoStart",
	        value: function _autoStart() {
	            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                _context.next = 2;
	                                return this.loader.promise;
	
	                            case 2:
	                                if (this._loaderElement) {
	                                    this._loaderElement.remove();
	                                }
	                                this.node.emit("asset-load-completed");
	                                this.tree("goml").setAttribute("loopEnabled", true);
	
	                            case 5:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, this);
	            }));
	        }
	    }]);
	
	    return AssetLoadingManagerComponent;
	}(_Component3.default);
	
	exports.default = AssetLoadingManagerComponent;
	
	AssetLoadingManagerComponent.attributes = {
	    loadingProgress: {
	        default: 0,
	        converter: "Number"
	    },
	    autoStart: {
	        default: true,
	        converter: "Boolean"
	    },
	    enableLoader: {
	        default: true,
	        converter: "Boolean"
	    }
	};

/***/ },
/* 14 */
/***/ function(module, exports) {

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});exports.default=window.GrimoireJS;

/***/ },
/* 15 */
/***/ function(module, exports) {

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});exports.default=window.GrimoireJS.Node.Component;

/***/ },
/* 16 */
/***/ function(module, exports) {

	module.exports = "<div style=\"width:100%;height:100%;position: relative;\">\n    <div style=\"width: 55px;height: 55px;border-radius: 100%;border: 5px solid #381794;border-right-color: #FC659D;animation: rotate 1s linear infinite;position: absolute;top: 0;left: 0;right: 0;bottom: 0;margin: auto;\"></div>\n</div>\n<style type=\"text/css\">\n    @keyframes rotate {\n        from {\n            transform: rotate(0deg);\n        }\n        to {\n            transform: rotate(360deg);\n        }\n    }\n</style>\n"

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _RenderQueue = __webpack_require__(18);
	
	var _RenderQueue2 = _interopRequireDefault(_RenderQueue);
	
	var _TransformComponent = __webpack_require__(19);
	
	var _TransformComponent2 = _interopRequireDefault(_TransformComponent);
	
	var _BasicCamera = __webpack_require__(7);
	
	var _BasicCamera2 = _interopRequireDefault(_BasicCamera);
	
	var _SceneComponent = __webpack_require__(21);
	
	var _SceneComponent2 = _interopRequireDefault(_SceneComponent);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var CameraComponent = function (_Component) {
	    _inherits(CameraComponent, _Component);
	
	    function CameraComponent() {
	        _classCallCheck(this, CameraComponent);
	
	        var _this = _possibleConstructorReturn(this, (CameraComponent.__proto__ || Object.getPrototypeOf(CameraComponent)).apply(this, arguments));
	
	        _this._renderQueue = new _RenderQueue2.default();
	        return _this;
	    }
	    /**
	    * Find scene tag recursively.
	    * @param  {GomlNode}       node [the node to searching currently]
	    * @return {SceneComponent}      [the scene component found]
	    */
	
	
	    _createClass(CameraComponent, [{
	        key: "$awake",
	        value: function $awake() {
	            var c = this.camera = new _BasicCamera2.default();
	            this.transform = this.node.getComponent(_TransformComponent2.default);
	            this._onTransformUpdate(this.transform);
	            this.getAttributeRaw("far").watch(function (v) {
	                c.setFar(v);
	            }, true);
	            this.getAttributeRaw("near").watch(function (v) {
	                c.setNear(v);
	            }, true);
	            this.getAttributeRaw("fovy").watch(function (v) {
	                c.setFovy(v);
	            }, true);
	            this.getAttributeRaw("aspect").watch(function (v) {
	                c.setAspect(v);
	            }, true);
	            this.getAttributeRaw("orthoSize").watch(function (v) {
	                c.setOrthoSize(v);
	            }, true);
	            this.getAttributeRaw("orthogonal").watch(function (v) {
	                c.setOrthographicMode(v);
	            }, true);
	            this.getAttributeRaw("autoAspect").boundTo("_autoAspect");
	        }
	    }, {
	        key: "$mount",
	        value: function $mount() {
	            this.containedScene = CameraComponent._findContainedScene(this.node);
	            this.containedScene.queueRegistory.registerQueue(this._renderQueue);
	            this.node.on("transformUpdated", this._onTransformUpdate.bind(this));
	        }
	    }, {
	        key: "$unmount",
	        value: function $unmount() {
	            this.containedScene.queueRegistory.unregisterQueue(this._renderQueue);
	            this.containedScene = null;
	        }
	    }, {
	        key: "updateContainedScene",
	        value: function updateContainedScene(loopIndex) {
	            if (this.containedScene) {
	                this.containedScene.updateScene(loopIndex);
	            }
	        }
	    }, {
	        key: "renderScene",
	        value: function renderScene(args) {
	            if (this.containedScene) {
	                this._justifyAspect(args);
	                args.sceneDescription = this.containedScene.sceneDescription;
	                args.defaultTexture = this.companion.get("defaultTexture");
	                this._renderQueue.renderAll(args, true, args.loopIndex);
	            }
	        }
	    }, {
	        key: "_onTransformUpdate",
	        value: function _onTransformUpdate(t) {
	            if (this.camera) {
	                this.camera.updateTransform(t);
	            }
	        }
	    }, {
	        key: "_justifyAspect",
	        value: function _justifyAspect(args) {
	            if (this._autoAspect) {
	                var asp = args.viewport.Width / args.viewport.Height;
	                if (this._aspectCache !== asp) {
	                    this.setAttribute("aspect", asp);
	                    this._aspectCache = asp;
	                }
	            }
	        }
	    }], [{
	        key: "_findContainedScene",
	        value: function _findContainedScene(node) {
	            if (node.parent) {
	                var scene = node.parent.getComponent(_SceneComponent2.default);
	                if (scene) {
	                    return scene;
	                } else {
	                    return CameraComponent._findContainedScene(node.parent);
	                }
	            } else {
	                return null;
	            }
	        }
	    }]);
	
	    return CameraComponent;
	}(_Component3.default);
	
	exports.default = CameraComponent;
	
	CameraComponent.attributes = {
	    fovy: {
	        default: "45d",
	        converter: "Angle2D"
	    },
	    near: {
	        default: 0.01,
	        converter: "Number"
	    },
	    far: {
	        default: 100,
	        converter: "Number"
	    },
	    aspect: {
	        default: 1.6,
	        converter: "Number"
	    },
	    autoAspect: {
	        default: true,
	        converter: "Boolean"
	    },
	    orthoSize: {
	        default: 100,
	        converter: "Number"
	    },
	    orthogonal: {
	        default: false,
	        converter: "Boolean"
	    }
	};

/***/ },
/* 18 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var RenderQueue = function () {
	    function RenderQueue() {
	        _classCallCheck(this, RenderQueue);
	
	        this._rendeables = [];
	    }
	
	    _createClass(RenderQueue, [{
	        key: "add",
	        value: function add(rendarable) {
	            this._rendeables.push({
	                rendarable: rendarable,
	                priortyCache: Number.MIN_VALUE
	            });
	        }
	    }, {
	        key: "remove",
	        value: function remove(rendarable) {
	            var index = 0;
	            for (; index < this._rendeables.length; index++) {
	                var r = this._rendeables[index];
	                if (r.rendarable.id === rendarable.id) {
	                    break;
	                }
	            }
	            if (this._rendeables.length !== index) {
	                this._rendeables.splice(index, 1);
	            }
	        }
	    }, {
	        key: "renderAll",
	        value: function renderAll(args, cameraMoved, frameNumber) {
	            for (var i = 0; i < this._rendeables.length; i++) {
	                this._rendeables[i].priortyCache = this._rendeables[i].rendarable.getRenderingPriorty(args.camera, cameraMoved, this._rendeables[i].priortyCache);
	            }
	            this._rendeables.sort(function (a, b) {
	                return a.priortyCache - b.priortyCache;
	            });
	            this._rendeables.forEach(function (r) {
	                r.rendarable.render(args);
	            });
	        }
	    }]);
	
	    return RenderQueue;
	}();
	
	exports.default = RenderQueue;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Matrix = __webpack_require__(10);
	
	var _Matrix2 = _interopRequireDefault(_Matrix);
	
	var _Vector = __webpack_require__(9);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	var _Vector3 = __webpack_require__(11);
	
	var _Vector4 = _interopRequireDefault(_Vector3);
	
	var _Quaternion = __webpack_require__(20);
	
	var _Quaternion2 = _interopRequireDefault(_Quaternion);
	
	var _GLM = __webpack_require__(12);
	
	var _GLM2 = _interopRequireDefault(_GLM);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var mat4 = _GLM2.default.mat4,
	    vec3 = _GLM2.default.vec3,
	    vec4 = _GLM2.default.vec4;
	/**
	 * Provides object transformation like translation,rotation,scaling.
	 */
	
	var TransformComponent = function (_Component) {
	    _inherits(TransformComponent, _Component);
	
	    function TransformComponent() {
	        _classCallCheck(this, TransformComponent);
	
	        /**
	         * Local transform matrix representing scaling,rotation and translation of attached object.
	         * @return {[type]} [description]
	         */
	        var _this = _possibleConstructorReturn(this, (TransformComponent.__proto__ || Object.getPrototypeOf(TransformComponent)).apply(this, arguments));
	
	        _this.localTransform = new _Matrix2.default();
	        /**
	         * Global transform that consider parent transform and local transform
	         * @return {[type]} [description]
	         */
	        _this.globalTransform = new _Matrix2.default();
	        /**
	         * The children transform should be notified when this transform was updated.
	         * @type {TransformComponent[]}
	         */
	        _this._children = [];
	        /**
	         * Calculation cache to
	         * @return {[type]} [description]
	         */
	        _this._cachePVM = new _Matrix2.default();
	        _this._cacheVM = new _Matrix2.default();
	        /**
	         * Cache of forward direction of this object
	         */
	        _this._forward = new _Vector2.default([0, 0, -1, 0]);
	        /**
	         * Cache of up direction of this object.
	         */
	        _this._up = new _Vector2.default([0, 1, 0, 0]);
	        /**
	         * Cache of right direction of this object.
	         */
	        _this._right = new _Vector2.default([1, 0, 0, 0]);
	        _this._globalPosition = new _Vector2.default([0, 0, 0]);
	        _this._globalScale = new _Vector2.default([1, 1, 1]);
	        _this._matrixTransformMode = false;
	        return _this;
	    }
	
	    _createClass(TransformComponent, [{
	        key: "calcPVM",
	        value: function calcPVM(camera) {
	            mat4.mul(this._cachePVM.rawElements, camera.getProjectionViewMatrix().rawElements, this.globalTransform.rawElements);
	            return this._cachePVM;
	        }
	    }, {
	        key: "calcVM",
	        value: function calcVM(camera) {
	            mat4.mul(this._cacheVM.rawElements, camera.getViewMatrix().rawElements, this.globalTransform.rawElements);
	            return this._cacheVM;
	        }
	    }, {
	        key: "$awake",
	        value: function $awake() {
	            var _this2 = this;
	
	            // register observers
	            this.getAttributeRaw("position").watch(function (v) {
	                _this2._localPosition = v;
	                _this2._matrixTransformMode = false;
	                _this2.updateTransform(true);
	            });
	            this.getAttributeRaw("rotation").watch(function (v) {
	                _this2._localRotation = v;
	                _this2._matrixTransformMode = false;
	                _this2.updateTransform();
	            });
	            this.getAttributeRaw("scale").watch(function (v) {
	                _this2._localScale = v;
	                _this2._matrixTransformMode = false;
	                _this2.updateTransform(true);
	            });
	            this.getAttributeRaw("rawMatrix").watch(function (v) {
	                if (v !== null) {
	                    var mat = v;
	                    _this2._matrixTransformMode = true;
	                    // TODO should be addded?
	                    // mat4.getTranslation(this._localPosition.rawElements, mat.rawElements);
	                    // mat4.getScaling(this._localScale.rawElements, mat.rawElements);
	                    // mat4.getRotation(this._localRotation.rawElements, mat.rawElements);
	                    _this2.localTransform = mat;
	                    _this2.updateGlobalTransform();
	                }
	            });
	            // assign attribute values to field
	            this._localPosition = this.getAttribute("position");
	            this._localRotation = this.getAttribute("rotation");
	            this._localScale = this.getAttribute("scale");
	            this.updateTransform();
	        }
	    }, {
	        key: "$mount",
	        value: function $mount() {
	            this._parentTransform = this.node.parent.getComponent(TransformComponent);
	            if (this._parentTransform) {
	                this._parentTransform._children.push(this);
	            }
	            this.updateTransform();
	        }
	    }, {
	        key: "$unmount",
	        value: function $unmount() {
	            if (this._parentTransform) {
	                this._parentTransform._children.splice(this._parentTransform._children.indexOf(this), 1);
	                this._parentTransform = null;
	            }
	        }
	        /**
	         * update local transform and global transform.
	         * This need to be called if you manually edit raw elements of scale,position or rotation to recalculate transform matricies.
	         */
	
	    }, {
	        key: "updateTransform",
	        value: function updateTransform(noDirectionalUpdate) {
	            if (!this._matrixTransformMode) {
	                mat4.fromRotationTranslationScale(this.localTransform.rawElements, this._localRotation.rawElements, this._localPosition.rawElements, this._localScale.rawElements);
	            }
	            this.updateGlobalTransform(noDirectionalUpdate);
	        }
	        /**
	         * Update global transoform.
	         */
	
	    }, {
	        key: "updateGlobalTransform",
	        value: function updateGlobalTransform(noDirectionalUpdate) {
	            if (!this._parentTransform) {
	                mat4.copy(this.globalTransform.rawElements, this.localTransform.rawElements);
	            } else {
	                mat4.mul(this.globalTransform.rawElements, this._parentTransform.globalTransform.rawElements, this.localTransform.rawElements);
	            }
	            if (noDirectionalUpdate) {
	                this._updateDirections();
	            }
	            this._updateGlobalProperty();
	            this.node.emit("transformUpdated", this);
	            this._children.forEach(function (v) {
	                return v.updateGlobalTransform(noDirectionalUpdate);
	            });
	        }
	    }, {
	        key: "_updateDirections",
	        value: function _updateDirections() {
	            vec4.transformMat4(this._forward.rawElements, TransformComponent._forwardBase.rawElements, this.globalTransform.rawElements);
	            vec4.transformMat4(this._up.rawElements, TransformComponent._upBase.rawElements, this.globalTransform.rawElements);
	            vec4.transformMat4(this._right.rawElements, TransformComponent._rightBase.rawElements, this.globalTransform.rawElements);
	        }
	    }, {
	        key: "_updateGlobalProperty",
	        value: function _updateGlobalProperty() {
	            if (!this._parentTransform) {
	                vec3.copy(this._globalPosition.rawElements, this._localPosition.rawElements);
	                vec3.copy(this._globalScale.rawElements, this._localScale.rawElements);
	            } else {
	                vec3.transformMat4(this._globalPosition.rawElements, this._localPosition.rawElements, this._parentTransform.globalTransform.rawElements);
	                vec3.transformMat4(this._globalScale.rawElements, this._localScale.rawElements, this._parentTransform.globalTransform.rawElements); // TODO buggy
	            }
	        }
	    }, {
	        key: "globalPosition",
	        get: function get() {
	            return this._globalPosition;
	        }
	    }, {
	        key: "localPosition",
	        get: function get() {
	            return this._localPosition;
	        },
	        set: function set(val) {
	            this._localPosition = val;
	            this.setAttribute("position", val);
	        }
	    }, {
	        key: "localRotation",
	        get: function get() {
	            return this._localRotation;
	        },
	        set: function set(val) {
	            this._localRotation = val;
	            this.setAttribute("rotation", val);
	        }
	    }, {
	        key: "globalScale",
	        get: function get() {
	            return this._globalScale;
	        }
	    }, {
	        key: "localScale",
	        get: function get() {
	            return this._localScale;
	        },
	        set: function set(val) {
	            this._localScale = val;
	            this.setAttribute("scale", val);
	        }
	    }, {
	        key: "forward",
	        get: function get() {
	            return this._forward;
	        }
	    }, {
	        key: "up",
	        get: function get() {
	            return this._up;
	        }
	    }, {
	        key: "right",
	        get: function get() {
	            return this._right;
	        }
	    }]);
	
	    return TransformComponent;
	}(_Component3.default);
	
	exports.default = TransformComponent;
	
	TransformComponent.attributes = {
	    "position": {
	        converter: "Vector3",
	        default: _Vector2.default.Zero
	    },
	    "rotation": {
	        converter: "Rotation3",
	        default: _Quaternion2.default.Identity
	    },
	    "scale": {
	        converter: "Vector3",
	        default: _Vector2.default.One
	    },
	    "rawMatrix": {
	        converter: "Object",
	        default: null
	    }
	};
	/**
	 * Source vector to be multiplied with global transform to calculate forward direction of attached object.
	 */
	TransformComponent._forwardBase = new _Vector4.default(0, 0, -1, 0);
	/**
	 * Source vector to be multiplied with global transform to calculate up direction of attached object.
	 */
	TransformComponent._upBase = new _Vector4.default(0, 1, 0, 0);
	/**
	 * Source vector to be multiplied with global transform to calculate right direction of attached object.
	 */
	TransformComponent._rightBase = new _Vector4.default(1, 0, 0, 0);

/***/ },
/* 20 */
/***/ function(module, exports) {

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});exports.default=window.GrimoireJS.lib.math.Quaternion;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _RenderQueueRegistry = __webpack_require__(22);
	
	var _RenderQueueRegistry2 = _interopRequireDefault(_RenderQueueRegistry);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var SceneComponent = function (_Component) {
	    _inherits(SceneComponent, _Component);
	
	    function SceneComponent() {
	        _classCallCheck(this, SceneComponent);
	
	        var _this = _possibleConstructorReturn(this, (SceneComponent.__proto__ || Object.getPrototypeOf(SceneComponent)).apply(this, arguments));
	
	        _this.sceneDescription = {};
	        _this.queueRegistory = new _RenderQueueRegistry2.default();
	        return _this;
	    }
	    /**
	     * Notify update scene only when send update message is needed.
	     * @param {number} loopIndex [description]
	     */
	
	
	    _createClass(SceneComponent, [{
	        key: "updateScene",
	        value: function updateScene(loopIndex) {
	            if (this._lastUpdateIndex !== loopIndex) {
	                this.node.broadcastMessage("update", this.sceneDescription);
	                this._lastUpdateIndex = loopIndex;
	            }
	        }
	    }]);
	
	    return SceneComponent;
	}(_Component3.default);
	
	exports.default = SceneComponent;
	
	SceneComponent.attributes = {};

/***/ },
/* 22 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var RenderQueueRegistry = function () {
	    function RenderQueueRegistry() {
	        _classCallCheck(this, RenderQueueRegistry);
	
	        this._queues = [];
	        this._renderables = [];
	    }
	
	    _createClass(RenderQueueRegistry, [{
	        key: "registerQueue",
	        value: function registerQueue(queue) {
	            this._queues.push(queue);
	            this._renderables.forEach(function (r) {
	                return queue.add(r);
	            });
	        }
	    }, {
	        key: "unregisterQueue",
	        value: function unregisterQueue(queue) {
	            var index = this._queues.indexOf(queue);
	            if (index > -1) {
	                this._queues.splice(index, 1);
	            }
	        }
	    }, {
	        key: "addRenderable",
	        value: function addRenderable(rendarable) {
	            this._renderables.push(rendarable);
	            this._queues.forEach(function (q) {
	                return q.add(rendarable);
	            });
	        }
	    }, {
	        key: "removeRenderable",
	        value: function removeRenderable(renderable) {
	            var index = this._renderables.indexOf(renderable);
	            if (index === -1) {
	                return; // Could not find specified renderable
	            }
	            this._renderables.splice(index, 1);
	            this._queues.forEach(function (q) {
	                return q.remove(renderable);
	            });
	        }
	    }]);
	
	    return RenderQueueRegistry;
	}();
	
	exports.default = RenderQueueRegistry;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _GrimoireInterface = __webpack_require__(24);
	
	var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);
	
	var _Texture2D = __webpack_require__(25);
	
	var _Texture2D2 = _interopRequireDefault(_Texture2D);
	
	var _GLExtRequestor = __webpack_require__(28);
	
	var _GLExtRequestor2 = _interopRequireDefault(_GLExtRequestor);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ns = _GrimoireInterface2.default.ns("HTTP://GRIMOIRE.GL/NS/DEFAULT");
	var ResizeMode;
	(function (ResizeMode) {
	    ResizeMode[ResizeMode["Aspect"] = 0] = "Aspect";
	    ResizeMode[ResizeMode["Fit"] = 1] = "Fit";
	    ResizeMode[ResizeMode["Manual"] = 2] = "Manual";
	})(ResizeMode || (ResizeMode = {}));
	
	var CanvasInitializerComponent = function (_Component) {
	    _inherits(CanvasInitializerComponent, _Component);
	
	    function CanvasInitializerComponent() {
	        _classCallCheck(this, CanvasInitializerComponent);
	
	        return _possibleConstructorReturn(this, (CanvasInitializerComponent.__proto__ || Object.getPrototypeOf(CanvasInitializerComponent)).apply(this, arguments));
	    }
	
	    _createClass(CanvasInitializerComponent, [{
	        key: "$awake",
	        value: function $awake() {
	            var _this2 = this;
	
	            this._scriptTag = this.companion.get("scriptElement");
	            if (this._isContainedInBody(this._scriptTag)) {
	                // canvas should be placed siblings of the script tag
	                this._generateCanvas(this._scriptTag);
	            } else {}
	            // apply sizes on changed
	            this.getAttributeRaw("width").watch(function (v) {
	                _this2._resize();
	            });
	            this.getAttributeRaw("height").watch(function (v) {
	                _this2._resize();
	            });
	        }
	        /**
	         * Generate canvas element
	         * @param  {Element}           parent [description]
	         * @return {HTMLCanvasElement}        [description]
	         */
	
	    }, {
	        key: "_generateCanvas",
	        value: function _generateCanvas(scriptTag) {
	            var _this3 = this;
	
	            this._autoFixForBody(scriptTag);
	            this.canvas = document.createElement("canvas");
	            window.addEventListener("resize", function () {
	                return _this3._onWindowResize();
	            });
	            this._configureCanvas(this.canvas, scriptTag);
	            var gl = this._getContext(this.canvas);
	            this._defaultTexture = new _Texture2D2.default(gl);
	            this._defaultTexture.update(0, 1, 1, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, new Uint8Array([0, 0, 0, 0]));
	            this.companion.set(ns("gl"), gl);
	            this.companion.set(ns("canvasElement"), this.canvas);
	            this.companion.set(ns("GLExtRequestor"), new _GLExtRequestor2.default(gl));
	            this.companion.set(ns("defaultTexture"), this._defaultTexture);
	            return this.canvas;
	        }
	    }, {
	        key: "_resize",
	        value: function _resize(supressBroadcast) {
	            var canvas = this.companion.get("canvasElement");
	            var widthRaw = this.getAttribute("width");
	            var heightRaw = this.getAttribute("height");
	            this._widthMode = this._asResizeMode(widthRaw);
	            this._heightMode = this._asResizeMode(heightRaw);
	            if (this._widthMode === this._heightMode && this._widthMode === ResizeMode.Aspect) {
	                throw new Error("Width and height could not have aspect mode in same time!");
	            }
	            if (this._widthMode === ResizeMode.Aspect) {
	                this._ratio = widthRaw.aspect;
	            }
	            if (this._heightMode === ResizeMode.Aspect) {
	                this._ratio = heightRaw.aspect;
	            }
	            if (this._widthMode === ResizeMode.Manual) {
	                this._applyManualWidth(widthRaw.size, supressBroadcast);
	            }
	            if (this._heightMode === ResizeMode.Manual) {
	                this._applyManualHeight(heightRaw.size, supressBroadcast);
	            }
	            this._onWindowResize(supressBroadcast);
	        }
	    }, {
	        key: "_onWindowResize",
	        value: function _onWindowResize(supressBroadcast) {
	            var size = this._getParentSize();
	            if (this._widthMode === ResizeMode.Fit) {
	                this._applyManualWidth(size.width, supressBroadcast);
	            }
	            if (this._heightMode === ResizeMode.Fit) {
	                if (size.height === 0 && _GrimoireInterface2.default.debug) {
	                    console.warn("Canvas height parameter specified as fit and height of parent element is 0.\n This is possibly the reason you haven't set css to html or body element.");
	                }
	                this._applyManualHeight(size.height, supressBroadcast);
	            }
	        }
	    }, {
	        key: "_applyManualWidth",
	        value: function _applyManualWidth(width, supressBroadcast) {
	            if (width === this.canvas.width) {
	                return;
	            }
	            this.canvas.width = width;
	            this._canvasContainer.style.width = width + "px";
	            if (!supressBroadcast) {
	                this.node.broadcastMessage(1, "resizeCanvas");
	            }
	            if (this._heightMode === ResizeMode.Aspect) {
	                this._applyManualHeight(width / this._ratio, supressBroadcast);
	            }
	        }
	    }, {
	        key: "_applyManualHeight",
	        value: function _applyManualHeight(height, supressBroadcast) {
	            if (height === this.canvas.height) {
	                return;
	            }
	            this.canvas.height = height;
	            this._canvasContainer.style.height = height + "px";
	            if (!supressBroadcast) {
	                this.node.broadcastMessage(1, "resizeCanvas");
	            }
	            if (this._widthMode === ResizeMode.Aspect) {
	                this._applyManualWidth(height * this._ratio, supressBroadcast);
	            }
	        }
	    }, {
	        key: "_getParentSize",
	        value: function _getParentSize() {
	            var parent = this._canvasContainer.parentElement;
	            var boundingBox = parent.getBoundingClientRect();
	            return boundingBox;
	        }
	        /**
	         * Get resize mode from raw attribute of height or width
	         * @param  {string  | number}      mode [description]
	         * @return {ResizeMode}   [description]
	         */
	
	    }, {
	        key: "_asResizeMode",
	        value: function _asResizeMode(cso) {
	            if (cso.mode === "fit") {
	                return ResizeMode.Fit;
	            } else if (cso.mode === "aspect") {
	                return ResizeMode.Aspect;
	            } else {
	                return ResizeMode.Manual;
	            }
	        }
	    }, {
	        key: "_configureCanvas",
	        value: function _configureCanvas(canvas, scriptTag) {
	            canvas.style.position = "absolute";
	            canvas.style.top = "0px";
	            canvas.style.left = "0px";
	            this._canvasContainer = document.createElement("div");
	            this._canvasContainer.style.position = "relative";
	            this._canvasContainer.style.overflow = "hidden";
	            this._canvasContainer.appendChild(canvas);
	            if (this.getAttribute("containerId")) {
	                this._canvasContainer.id = this.getAttribute("containerId");
	            }
	            if (this.getAttribute("containerClass")) {
	                this._canvasContainer.className = this.getAttribute("containerClass");
	            }
	            this.companion.set(ns("canvasContainer"), this._canvasContainer);
	            scriptTag.parentElement.insertBefore(this._canvasContainer, scriptTag.nextSibling);
	            this._resize(true);
	        }
	    }, {
	        key: "_getContext",
	        value: function _getContext(canvas) {
	            var context = canvas.getContext("webgl");
	            if (!context) {
	                context = canvas.getContext("webgl-experimental");
	            }
	            return context;
	        }
	        /**
	         * Check the tag is included in the body
	         * @param  {Element} tag [description]
	         * @return {boolean}     [description]
	         */
	
	    }, {
	        key: "_isContainedInBody",
	        value: function _isContainedInBody(tag) {
	            if (!tag.parentElement) {
	                return false;
	            }
	            if (tag.parentNode.nodeName === "BODY") {
	                return true;
	            }
	            return this._isContainedInBody(tag.parentElement);
	        }
	    }, {
	        key: "_autoFixForBody",
	        value: function _autoFixForBody(scriptTag) {
	            if (scriptTag.parentElement.nodeName === "BODY") {
	                var boudningBox = document.body.getBoundingClientRect();
	                if (boudningBox.height === 0) {
	                    document.body.style.height = "100%";
	                    document.body.parentElement.style.height = "100%";
	                }
	            }
	        }
	    }]);
	
	    return CanvasInitializerComponent;
	}(_Component3.default);
	
	CanvasInitializerComponent.attributes = {
	    width: {
	        default: "fit",
	        converter: "CanvasSize"
	    },
	    height: {
	        default: "fit",
	        converter: "CanvasSize"
	    },
	    containerId: {
	        default: "",
	        converter: "String"
	    },
	    containerClass: {
	        default: "gr-container",
	        converter: "String"
	    }
	};
	exports.default = CanvasInitializerComponent;

/***/ },
/* 24 */
/***/ function(module, exports) {

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});exports.default=window.GrimoireJS.GrimoireInterface;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _ResourceBase2 = __webpack_require__(26);
	
	var _ResourceBase3 = _interopRequireDefault(_ResourceBase2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Texture2D = function (_ResourceBase) {
	    _inherits(Texture2D, _ResourceBase);
	
	    function Texture2D(gl) {
	        _classCallCheck(this, Texture2D);
	
	        var _this = _possibleConstructorReturn(this, (Texture2D.__proto__ || Object.getPrototypeOf(Texture2D)).call(this, gl));
	
	        _this._texParameterChanged = true;
	        _this._magFilter = WebGLRenderingContext.LINEAR;
	        _this._minFilter = WebGLRenderingContext.LINEAR;
	        _this._wrapS = WebGLRenderingContext.REPEAT;
	        _this._wrapT = WebGLRenderingContext.REPEAT;
	        if (!Texture2D._maxTextureSize) {
	            Texture2D._maxTextureSize = gl.getParameter(WebGLRenderingContext.MAX_TEXTURE_SIZE);
	        }
	        _this.texture = gl.createTexture();
	        return _this;
	    }
	
	    _createClass(Texture2D, [{
	        key: "update",
	        value: function update(levelOrImage, widthOrConfig, height, border, format, type, pixels, config) {
	            this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.texture);
	            var uploadConfig = void 0;
	            var image = void 0;
	            var width = void 0;
	            var level = void 0;
	            if (height === void 0) {
	                uploadConfig = widthOrConfig || {
	                    flipY: false,
	                    premultipliedAlpha: false
	                };
	                image = levelOrImage;
	            } else {
	                level = levelOrImage;
	                width = widthOrConfig;
	                uploadConfig = config || {
	                    flipY: false,
	                    premultipliedAlpha: false
	                };
	            }
	            if (uploadConfig.flipY === void 0) {
	                uploadConfig.flipY = false;
	            }
	            if (uploadConfig.premultipliedAlpha === void 0) {
	                uploadConfig.premultipliedAlpha = false;
	            }
	            this.gl.pixelStorei(WebGLRenderingContext.UNPACK_FLIP_Y_WEBGL, uploadConfig.flipY ? 1 : 0);
	            this.gl.pixelStorei(WebGLRenderingContext.UNPACK_PREMULTIPLY_ALPHA_WEBGL, uploadConfig.premultipliedAlpha ? 1 : 0);
	            if (height === void 0) {
	                if (image instanceof HTMLImageElement) {
	                    this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, this._justifyImage(image));
	                } else if (image instanceof HTMLCanvasElement) {
	                    this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, this._justifyCanvas(image));
	                } else if (image instanceof HTMLVideoElement) {
	                    this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D, 0, WebGLRenderingContext.RGBA, WebGLRenderingContext.RGBA, WebGLRenderingContext.UNSIGNED_BYTE, this._justifyVideo(image));
	                }
	            } else {
	                if (pixels === void 0) {
	                    pixels = null;
	                }
	                this.gl.texImage2D(WebGLRenderingContext.TEXTURE_2D, level, format, width, height, border, format, type, pixels);
	            }
	            this._ensureMipmap();
	            this.valid = true;
	        }
	    }, {
	        key: "register",
	        value: function register(registerNumber) {
	            this.gl.activeTexture(WebGLRenderingContext.TEXTURE0 + registerNumber);
	            this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.texture);
	            if (this._texParameterChanged) {
	                this._updateTexParameter();
	            }
	        }
	    }, {
	        key: "destroy",
	        value: function destroy() {
	            _get(Texture2D.prototype.__proto__ || Object.getPrototypeOf(Texture2D.prototype), "destroy", this).call(this);
	            this.gl.deleteTexture(this.texture);
	        }
	        // There should be more effective way to resize texture
	
	    }, {
	        key: "_justifyImage",
	        value: function _justifyImage(img) {
	            var w = img.naturalWidth,
	                h = img.naturalHeight;
	            var size = Math.min(Math.pow(2, Math.log(Math.min(w, h)) / Math.LN2 | 0), Texture2D._maxTextureSize); // largest 2^n integer that does not exceed s
	            if (w !== h || w !== size) {
	                var canv = document.createElement("canvas");
	                canv.height = canv.width = size;
	                canv.getContext("2d").drawImage(img, 0, 0, w, h, 0, 0, size, size);
	                return canv;
	            }
	            return img;
	        }
	    }, {
	        key: "_justifyCanvas",
	        value: function _justifyCanvas(canvas) {
	            var w = canvas.width;
	            var h = canvas.height;
	            var size = Math.pow(2, Math.log(Math.min(w, h)) / Math.LN2 | 0); // largest 2^n integer that does not exceed s
	            if (w !== h || w !== size) {
	                canvas.height = canvas.width = size * 2;
	            }
	            return canvas;
	        }
	    }, {
	        key: "_justifyVideo",
	        value: function _justifyVideo(video) {
	            var w = video.videoWidth,
	                h = video.videoHeight;
	            var size = Math.pow(2, Math.log(Math.min(w, h)) / Math.LN2 | 0); // largest 2^n integer that does not exceed s
	            if (w !== h || w !== size) {
	                var canv = document.createElement("canvas");
	                canv.height = canv.width = size;
	                canv.getContext("2d").drawImage(video, 0, 0, w, h, 0, 0, size, size);
	                return canv;
	            }
	            return video;
	        }
	    }, {
	        key: "_updateTexParameter",
	        value: function _updateTexParameter() {
	            this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MIN_FILTER, this._minFilter);
	            this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_MAG_FILTER, this._magFilter);
	            this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_S, this._wrapS);
	            this.gl.texParameteri(WebGLRenderingContext.TEXTURE_2D, WebGLRenderingContext.TEXTURE_WRAP_T, this._wrapT);
	            this._texParameterChanged = false;
	        }
	    }, {
	        key: "_ensureMipmap",
	        value: function _ensureMipmap() {
	            if (Texture2D._filtersNeedsMipmap.indexOf(this.magFilter) >= 0 || Texture2D._filtersNeedsMipmap.indexOf(this.minFilter) >= 0) {
	                this.gl.bindTexture(WebGLRenderingContext.TEXTURE_2D, this.texture);
	                this.gl.generateMipmap(WebGLRenderingContext.TEXTURE_2D);
	            }
	        }
	    }, {
	        key: "magFilter",
	        get: function get() {
	            return this._magFilter;
	        },
	        set: function set(filter) {
	            if (this._magFilter !== filter) {
	                this._texParameterChanged = true;
	                this._magFilter = filter;
	                this._ensureMipmap();
	            }
	        }
	    }, {
	        key: "minFilter",
	        get: function get() {
	            return this._minFilter;
	        },
	        set: function set(filter) {
	            if (this._minFilter !== filter) {
	                this._texParameterChanged = true;
	                this._minFilter = filter;
	                this._ensureMipmap();
	            }
	        }
	    }, {
	        key: "wrapS",
	        get: function get() {
	            return this._wrapS;
	        },
	        set: function set(filter) {
	            if (this._wrapS !== filter) {
	                this._texParameterChanged = true;
	                this._wrapS = filter;
	            }
	        }
	    }, {
	        key: "wrapT",
	        get: function get() {
	            return this._wrapT;
	        },
	        set: function set(filter) {
	            if (this._wrapT !== filter) {
	                this._texParameterChanged = true;
	                this._wrapT = filter;
	            }
	        }
	    }]);
	
	    return Texture2D;
	}(_ResourceBase3.default);
	/**
	 * ミップマップの更新が必要なフィルタ
	 * @type {number[]}
	 */
	
	
	exports.default = Texture2D;
	Texture2D._filtersNeedsMipmap = [WebGLRenderingContext.LINEAR_MIPMAP_LINEAR, WebGLRenderingContext.LINEAR_MIPMAP_NEAREST, WebGLRenderingContext.NEAREST_MIPMAP_LINEAR, WebGLRenderingContext.NEAREST_MIPMAP_NEAREST];

/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _IDObject2 = __webpack_require__(27);
	
	var _IDObject3 = _interopRequireDefault(_IDObject2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var ResourceBase = function (_IDObject) {
	    _inherits(ResourceBase, _IDObject);
	
	    function ResourceBase(gl) {
	        _classCallCheck(this, ResourceBase);
	
	        var _this = _possibleConstructorReturn(this, (ResourceBase.__proto__ || Object.getPrototypeOf(ResourceBase)).call(this));
	
	        _this.gl = gl;
	        _this.destroyed = false;
	        _this.valid = false;
	        return _this;
	    }
	
	    _createClass(ResourceBase, [{
	        key: "destroy",
	        value: function destroy() {
	            this.destroyed = true;
	        }
	    }, {
	        key: "valid",
	        get: function get() {
	            return this._valid;
	        },
	        set: function set(val) {
	            var _this2 = this;
	
	            if (this._valid === val) {
	                return;
	            }
	            this._valid = val;
	            if (this._valid) {
	                this._validResolve(this);
	            } else {
	                this.validPromise = new Promise(function (resolve) {
	                    _this2._validResolve = resolve;
	                });
	            }
	        }
	    }]);
	
	    return ResourceBase;
	}(_IDObject3.default);
	
	exports.default = ResourceBase;

/***/ },
/* 27 */
/***/ function(module, exports) {

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});exports.default=window.GrimoireJS.Base.IDObject;

/***/ },
/* 28 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var GLExtRequestor = function () {
	    function GLExtRequestor(gl) {
	        _classCallCheck(this, GLExtRequestor);
	
	        this.gl = gl;
	        this.extensions = {};
	        this._readyExtensions = {};
	        this._resolveRequested();
	        GLExtRequestor._requestObserver.push(this._resolveExtensionSafely);
	    }
	    /**
	     * Request extension to use.
	     * @param {string} str [description]
	     */
	
	
	    _createClass(GLExtRequestor, [{
	        key: "_resolveRequested",
	
	        /**
	         * Resolve all extension requested already.
	         */
	        value: function _resolveRequested() {
	            var _this = this;
	
	            GLExtRequestor._requestedExtensions.forEach(function (e) {
	                _this._resolveExtensionSafely(e.extensionName);
	            });
	        }
	    }, {
	        key: "_resolveExtensionSafely",
	        value: function _resolveExtensionSafely(extName) {
	            var e = GLExtRequestor._requestedExtensions[GLExtRequestor._requestIndexOf(extName)];
	            if (!this._resolveExtension(e.extensionName) && e.isNecessary) {
	                throw new Error("A WebGL extension '" + e.extensionName + "' was requested. But that is not supported on this device.");
	            }
	        }
	    }, {
	        key: "_resolveExtension",
	        value: function _resolveExtension(name) {
	            if (this._readyExtensions[name]) {
	                return true;
	            }
	            var ext = void 0;
	            if (typeof GLExtRequestor._customExtensionResolvers[name] === "undefined") {
	                ext = this.extensions[name] = this.gl.getExtension(name);
	            } else {
	                ext = this.extensions[name] = GLExtRequestor._customExtensionResolvers[name](this.gl);
	            }
	            this._readyExtensions[name] = this.extensions[name] !== void 0;
	            return !!this._readyExtensions[name];
	        }
	    }], [{
	        key: "request",
	        value: function request(extName) {
	            var isNecessary = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	            var index = GLExtRequestor._requestIndexOf(extName);
	            if (index > -1 && isNecessary) {
	                GLExtRequestor._requestedExtensions[index] = { extensionName: extName, isNecessary: isNecessary };
	            } else if (index === -1) {
	                GLExtRequestor._requestedExtensions.push({ extensionName: extName, isNecessary: isNecessary });
	            }
	            GLExtRequestor._requestObserver.forEach(function (o) {
	                return o(extName);
	            });
	        }
	    }, {
	        key: "_requestIndexOf",
	        value: function _requestIndexOf(extName) {
	            for (var i = 0; i < GLExtRequestor._requestedExtensions.length; i++) {
	                if (GLExtRequestor._requestedExtensions[i].extensionName === extName) {
	                    return i;
	                }
	            }
	            return -1;
	        }
	    }]);
	
	    return GLExtRequestor;
	}();
	/**
	 * Extension list requested to use.
	 * @type {string[]}
	 */
	
	
	exports.default = GLExtRequestor;
	GLExtRequestor._requestedExtensions = [];
	/**
	 * Some of extensions needed to override resolving extensions by this.
	 */
	GLExtRequestor._customExtensionResolvers = {};
	GLExtRequestor._requestObserver = [];
	GLExtRequestor._customExtensionResolvers["WEBGL_color_buffer_float"] = function (gl) {
	    var isSupported = void 0;
	    if (gl.getExtension("WEBGL_color_buffer_float") === null) {
	        var fbo = gl.createFramebuffer();
	        var tex = gl.createTexture();
	        gl.bindFramebuffer(gl.FRAMEBUFFER, fbo);
	        gl.bindTexture(gl.TEXTURE_2D, tex);
	        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.FLOAT, null);
	        gl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tex, 0);
	        if (gl.checkFramebufferStatus(gl.FRAMEBUFFER) !== gl.FRAMEBUFFER_COMPLETE) {
	            isSupported = false;
	        } else {
	            isSupported = true;
	        }
	        gl.deleteTexture(tex);
	        gl.deleteFramebuffer(fbo);
	    } else {
	        isSupported = true;
	    }
	    return isSupported;
	};

/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var FullscreenComponent = function (_Component) {
	    _inherits(FullscreenComponent, _Component);
	
	    function FullscreenComponent() {
	        _classCallCheck(this, FullscreenComponent);
	
	        var _this = _possibleConstructorReturn(this, (FullscreenComponent.__proto__ || Object.getPrototypeOf(FullscreenComponent)).apply(this, arguments));
	
	        _this._fullscreen = false;
	        return _this;
	    }
	
	    _createClass(FullscreenComponent, [{
	        key: "$awake",
	        value: function $awake() {
	            var _this2 = this;
	
	            this.getAttributeRaw("fullscreen").watch(function (attr) {
	                if (_this2._fullscreen === attr) {
	                    return;
	                }
	                _this2._fullscreen = attr;
	                _this2._switchFullscreen();
	            });
	        }
	    }, {
	        key: "_switchFullscreen",
	        value: function _switchFullscreen() {
	            if (this._fullscreen) {
	                this.requestFullscreen(this.getAttribute("fullscreenTarget") || this.companion.get("canvasContainer"));
	            } else {
	                this.exitFullscreen();
	            }
	        }
	    }, {
	        key: "requestFullscreen",
	        value: function requestFullscreen(target) {
	            if (target.webkitRequestFullscreen) {
	                target.webkitRequestFullscreen(); //Chrome15+, Safari5.1+, Opera15+
	            } else if (target["mozRequestFullScreen"]) {
	                target["mozRequestFullScreen"](); //FF10+
	            } else if (target["msRequestFullscreen"]) {
	                target["msRequestFullscreen"](); //IE11+
	            } else if (target.requestFullscreen) {
	                target.requestFullscreen(); // HTML5 Fullscreen API仕様
	            } else {
	                console.error('ご利用のブラウザはフルスクリーン操作に対応していません');
	                return;
	            }
	        }
	        /*フルスクリーン終了用ファンクション*/
	
	    }, {
	        key: "exitFullscreen",
	        value: function exitFullscreen() {
	            if (document.webkitCancelFullScreen) {
	                document.webkitCancelFullScreen(); //Chrome15+, Safari5.1+, Opera15+
	            } else if (document["mozCancelFullScreen"]) {
	                document["mozCancelFullScreen"](); //FF10+
	            } else if (document["msExitFullscreen"]) {
	                document["msExitFullscreen"](); //IE11+
	            } else if (document["cancelFullScreen"]) {
	                document["cancelFullScreen"](); //Gecko:FullScreenAPI仕様
	            } else if (document.exitFullscreen) {
	                document.exitFullscreen(); // HTML5 Fullscreen API仕様
	            }
	        }
	    }]);
	
	    return FullscreenComponent;
	}(_Component3.default);
	
	exports.default = FullscreenComponent;
	
	FullscreenComponent.attributes = {
	    fullscreen: {
	        converter: "Boolean",
	        default: false
	    },
	    fullscreenTarget: {
	        converter: "String",
	        default: null
	    }
	};

/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _GeometryFactory = __webpack_require__(31);
	
	var _GeometryFactory2 = _interopRequireDefault(_GeometryFactory);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var GeometryComponent = function (_Component) {
	    _inherits(GeometryComponent, _Component);
	
	    function GeometryComponent() {
	        _classCallCheck(this, GeometryComponent);
	
	        return _possibleConstructorReturn(this, (GeometryComponent.__proto__ || Object.getPrototypeOf(GeometryComponent)).apply(this, arguments));
	    }
	
	    _createClass(GeometryComponent, [{
	        key: "$mount",
	        value: function $mount() {
	            var type = this.getAttribute("type");
	            if (type) {
	                var gf = this.companion.get("GeometryFactory");
	                var attrs = _GeometryFactory2.default.factoryArgumentDeclarations[type];
	                var geometryArgument = {};
	                for (var key in attrs) {
	                    this.__addAtribute(key, attrs[key]);
	                    geometryArgument[key] = this.getAttribute(key);
	                }
	                this.geometry = gf.instanciate(type, geometryArgument);
	                var gr = this.companion.get("GeometryRegistory");
	                var name = this.getAttribute("name");
	                if (!name) {
	                    throw new Error("Name was not specified");
	                }
	                gr.addGeometry(name, this.geometry);
	            }
	        }
	    }]);
	
	    return GeometryComponent;
	}(_Component3.default);
	
	exports.default = GeometryComponent;
	
	GeometryComponent.attributes = {
	    type: {
	        converter: "String",
	        default: null
	    },
	    name: {
	        converter: "String",
	        default: null
	    }
	};

/***/ },
/* 31 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Provides the feature to instanciate primitive geometry.
	 */
	var GeometryFactory = function () {
	    function GeometryFactory(gl) {
	        _classCallCheck(this, GeometryFactory);
	
	        this.gl = gl;
	    }
	    /**
	     * Add new type geometry
	     * @param {string}                   typeName        [description]
	     * @param {IAttributeDeclaration }}             argumentDeclarations [description]
	     * @param {IGeometryFactoryDelegate} factoryDelegate [description]
	     */
	
	
	    _createClass(GeometryFactory, [{
	        key: "instanciate",
	        value: function instanciate(type, args) {
	            var factoryDelegate = GeometryFactory.factoryDelegates[type];
	            if (!factoryDelegate) {
	                throw new Error("Can not instanciate unknown geometry type " + type);
	            }
	            return factoryDelegate(this.gl, args);
	        }
	    }, {
	        key: "instanciateAsDefault",
	        value: function instanciateAsDefault(type) {
	            var decl = GeometryFactory.factoryArgumentDeclarations[type];
	            var args = {};
	            for (var attr in decl) {
	                var attrDecl = decl[attr];
	                args[attr] = attrDecl.default;
	            }
	            return this.instanciate(type, args);
	        }
	    }], [{
	        key: "addType",
	        value: function addType(typeName, argumentDeclarations, factoryDelegate) {
	            GeometryFactory.factoryDelegates[typeName] = factoryDelegate;
	            GeometryFactory.factoryArgumentDeclarations[typeName] = argumentDeclarations;
	        }
	    }]);
	
	    return GeometryFactory;
	}();
	/**
	 * Delegates to be used as factory
	 */
	
	
	exports.default = GeometryFactory;
	GeometryFactory.factoryDelegates = {};
	/**
	 * Argument inputs to be used for construction of geometry.
	 */
	GeometryFactory.factoryArgumentDeclarations = {};

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _GeometryFactory = __webpack_require__(31);
	
	var _GeometryFactory2 = _interopRequireDefault(_GeometryFactory);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	var _grimoirejs = __webpack_require__(14);
	
	var _grimoirejs2 = _interopRequireDefault(_grimoirejs);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var GeometryRegistoryComponent = function (_Component) {
	    _inherits(GeometryRegistoryComponent, _Component);
	
	    function GeometryRegistoryComponent() {
	        _classCallCheck(this, GeometryRegistoryComponent);
	
	        var _this = _possibleConstructorReturn(this, (GeometryRegistoryComponent.__proto__ || Object.getPrototypeOf(GeometryRegistoryComponent)).apply(this, arguments));
	
	        _this._geometries = {};
	        return _this;
	    }
	
	    _createClass(GeometryRegistoryComponent, [{
	        key: "$awake",
	        value: function $awake() {
	            this._factory = new _GeometryFactory2.default(this.companion.get("gl"));
	            this.companion.set(this.name, this);
	            this.companion.set(_grimoirejs2.default.ns(this.name.ns)("GeometryFactory"), this._factory);
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;
	
	            try {
	                for (var _iterator = this.getAttribute("defaultGeometry")[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var geometry = _step.value;
	
	                    this.addGeometry(geometry, this._factory.instanciateAsDefault(geometry));
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	        }
	    }, {
	        key: "addGeometry",
	        value: function addGeometry(name, geometry) {
	            this._geometries[name] = geometry;
	        }
	    }, {
	        key: "removeGeometry",
	        value: function removeGeometry(name) {
	            if (this._geometries[name]) {
	                delete this._geometries[name];
	            }
	        }
	    }, {
	        key: "getGeometry",
	        value: function getGeometry(name) {
	            return this._geometries[name];
	        }
	    }]);
	
	    return GeometryRegistoryComponent;
	}(_Component3.default);
	
	exports.default = GeometryRegistoryComponent;
	
	GeometryRegistoryComponent.attributes = {
	    defaultGeometry: {
	        converter: "StringArray",
	        default: ["quad", "cube", "sphere"]
	    }
	};

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _TransformComponent = __webpack_require__(19);
	
	var _TransformComponent2 = _interopRequireDefault(_TransformComponent);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	var _Vector = __webpack_require__(11);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	var _Matrix = __webpack_require__(10);
	
	var _Matrix2 = _interopRequireDefault(_Matrix);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var HTMLBinderComponent = function (_Component) {
	    _inherits(HTMLBinderComponent, _Component);
	
	    function HTMLBinderComponent() {
	        _classCallCheck(this, HTMLBinderComponent);
	
	        var _this = _possibleConstructorReturn(this, (HTMLBinderComponent.__proto__ || Object.getPrototypeOf(HTMLBinderComponent)).apply(this, arguments));
	
	        _this._isFirstCall = true;
	        return _this;
	    }
	
	    _createClass(HTMLBinderComponent, [{
	        key: "$awake",
	        value: function $awake() {
	            this._canvasContainer = this.companion.get("canvasContainer");
	            this._currentTransform = this.node.getComponent(_TransformComponent2.default);
	        }
	    }, {
	        key: "$mount",
	        value: function $mount() {
	            this._canvasContainer = this.companion.get("canvasContainer");
	            this._currentTransform = this.node.getComponent(_TransformComponent2.default);
	            this.node.on("render", this._onRender.bind(this));
	        }
	    }, {
	        key: "$treeInitialized",
	        value: function $treeInitialized() {
	            var _this2 = this;
	
	            this.getAttributeRaw("targetRenderer").watch(function (v) {
	                if (_this2._rendererQuery !== v) {
	                    _this2._onRendererChanged();
	                }
	            }, true);
	            this.getAttributeRaw("htmlQuery").watch(function (v) {
	                _this2._onQueryChanged(v);
	            }, true);
	        }
	    }, {
	        key: "_onRender",
	        value: function _onRender(args) {
	            if (this._isFirstCall) {
	                this._onRendererChanged();
	                this._isFirstCall = false;
	            }
	            if (this._queriedElement && args.caller.node === this._targetNode) {
	                var vp = args.viewport;
	                var rawPos = _Matrix2.default.transform(this._currentTransform.calcPVM(args.camera.camera), new _Vector2.default(0, 0, 0, 1));
	                var rawScPos = {
	                    x: rawPos.X / rawPos.W,
	                    y: rawPos.Y / rawPos.W,
	                    z: rawPos.Z / rawPos.W
	                };
	                if (rawScPos.z >= -1 && rawScPos.z <= 1) {
	                    var scPos = {
	                        x: vp.Left + (rawScPos.x + 1) / 2 * vp.Width,
	                        y: vp.Top + (rawScPos.y + 1) / 2 * vp.Height
	                    };
	                    this._queriedElement.style.visibility = "visible";
	                    this._queriedElement.style.left = scPos.x + "px";
	                    this._queriedElement.style.bottom = scPos.y + "px";
	                } else {
	                    this._queriedElement.style.visibility = "hidden";
	                }
	            }
	        }
	        /**
	         * Restore default position of queried html
	         */
	
	    }, {
	        key: "_restoreDefault",
	        value: function _restoreDefault() {
	            this._canvasContainer.removeChild(this._queriedElement);
	            this._parentCache.appendChild(this._queriedElement);
	            var s = this._queriedElement.style;
	            var c = this._styleCache;
	            s.position = c["position"];
	            s.left = c["left"];
	            s.bottom = c["bottom"];
	            s.visibility = c["visibility"];
	        }
	    }, {
	        key: "_beginTrack",
	        value: function _beginTrack() {
	            this._parentCache.removeChild(this._queriedElement);
	            this._canvasContainer.appendChild(this._queriedElement);
	            this._queriedElement.style.position = "absolute";
	        }
	    }, {
	        key: "_onRendererChanged",
	        value: function _onRendererChanged() {
	            var _this3 = this;
	
	            var returned = false;
	            this.tree(this.getAttribute("targetRenderer")).forEach(function (n) {
	                if (returned) {
	                    return true;
	                } else {
	                    _this3._targetNode = n;
	                    returned = true;
	                }
	            });
	        }
	    }, {
	        key: "_onQueryChanged",
	        value: function _onQueryChanged(query) {
	            var queried = void 0;
	            if (query && query !== "") {
	                queried = document.querySelectorAll(query);
	            }
	            if (this._queriedElement) {
	                this._restoreDefault();
	            }
	            if (!queried || queried.length === 0) {
	                this._queriedElement = undefined;
	                this._parentCache = undefined;
	            } else {
	                this._queriedElement = queried.item(0);
	                var s = this._queriedElement.style;
	                this._styleCache = {
	                    position: s.position,
	                    visibility: s.visibility,
	                    left: s.left,
	                    bottom: s.bottom
	                };
	                this._parentCache = this._queriedElement.parentElement;
	                this._beginTrack();
	            }
	        }
	    }]);
	
	    return HTMLBinderComponent;
	}(_Component3.default);
	
	exports.default = HTMLBinderComponent;
	
	HTMLBinderComponent.attributes = {
	    htmlQuery: {
	        default: null,
	        converter: "String"
	    },
	    targetRenderer: {
	        default: "render-scene",
	        converter: "String"
	    }
	};

/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var LoopManagerComponent = function (_Component) {
	    _inherits(LoopManagerComponent, _Component);
	
	    function LoopManagerComponent() {
	        _classCallCheck(this, LoopManagerComponent);
	
	        var _this = _possibleConstructorReturn(this, (LoopManagerComponent.__proto__ || Object.getPrototypeOf(LoopManagerComponent)).apply(this, arguments));
	
	        _this._loopActions = [];
	        _this._loopIndex = 0;
	        return _this;
	    }
	
	    _createClass(LoopManagerComponent, [{
	        key: "$awake",
	        value: function $awake() {
	            var _this2 = this;
	
	            this.getAttributeRaw("loopEnabled").watch(function (attr) {
	                if (attr) {
	                    _this2._begin();
	                }
	            });
	            this._registerNextLoop = window.requestAnimationFrame // if window.requestAnimationFrame is defined or undefined
	            ? function () {
	                window.requestAnimationFrame(_this2._loop.bind(_this2));
	            } : function () {
	                window.setTimeout(_this2._loop.bind(_this2), 1000 / 60);
	            };
	        }
	    }, {
	        key: "register",
	        value: function register(action, priorty) {
	            this._loopActions.push({
	                action: action,
	                priorty: priorty
	            });
	            this._loopActions.sort(function (a, b) {
	                return a.priorty - b.priorty;
	            });
	        }
	    }, {
	        key: "_begin",
	        value: function _begin() {
	            this._registerNextLoop();
	        }
	    }, {
	        key: "_loop",
	        value: function _loop() {
	            var _this3 = this;
	
	            this.node.emit("loop", {
	                loopIndex: this._loopIndex
	            });
	            this._loopActions.forEach(function (a) {
	                return a.action(_this3._loopIndex);
	            });
	            this._loopIndex++;
	            this._registerNextLoop();
	        }
	    }]);
	
	    return LoopManagerComponent;
	}(_Component3.default);
	
	LoopManagerComponent.attributes = {
	    loopEnabled: {
	        default: false,
	        converter: "Boolean"
	    }
	};
	exports.default = LoopManagerComponent;

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _SORTPass = __webpack_require__(36);
	
	var _SORTPass2 = _interopRequireDefault(_SORTPass);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	var _ResourceBase = __webpack_require__(26);
	
	var _ResourceBase2 = _interopRequireDefault(_ResourceBase);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	
	var MaterialComponent = function (_Component) {
	    _inherits(MaterialComponent, _Component);
	
	    function MaterialComponent() {
	        _classCallCheck(this, MaterialComponent);
	
	        var _this = _possibleConstructorReturn(this, (MaterialComponent.__proto__ || Object.getPrototypeOf(MaterialComponent)).apply(this, arguments));
	
	        _this.materialArgs = {};
	        return _this;
	    }
	
	    _createClass(MaterialComponent, [{
	        key: "$mount",
	        value: function $mount() {
	            var typeName = this.getAttribute("type");
	            if (typeName) {
	                this.materialPromise = this.companion.get("MaterialFactory").instanciate(typeName);
	                this._registerAttributes();
	            }
	        }
	    }, {
	        key: "_registerAttributes",
	        value: function _registerAttributes() {
	            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	                var _this2 = this;
	
	                var promises;
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                _context.next = 2;
	                                return this.materialPromise;
	
	                            case 2:
	                                this.material = _context.sent;
	                                promises = [];
	
	                                this.material.pass.forEach(function (p) {
	                                    if (p instanceof _SORTPass2.default) {
	                                        var _ret = function () {
	                                            var cp = p;
	
	                                            var _loop = function _loop(key) {
	                                                _this2.__addAtribute(key, cp.sort.gomlAttributes[key]);
	                                                _this2.getAttributeRaw(key).watch(function (v) {
	                                                    _this2.materialArgs[key] = v;
	                                                });
	                                                var value = _this2.materialArgs[key] = _this2.getAttribute(key);
	                                                if (value instanceof _ResourceBase2.default) {
	                                                    promises.push(value.validPromise);
	                                                }
	                                            };
	
	                                            for (var key in cp.sort.gomlAttributes) {
	                                                _loop(key);
	                                            }
	                                            var _iteratorNormalCompletion = true;
	                                            var _didIteratorError = false;
	                                            var _iteratorError = undefined;
	
	                                            try {
	                                                var _loop2 = function _loop2() {
	                                                    var macro = _step.value;
	
	                                                    switch (macro.type) {
	                                                        case "int":
	                                                            _this2.__addAtribute(macro.attributeName, {
	                                                                converter: "Number",
	                                                                default: macro.default
	                                                            });
	                                                            _this2.getAttributeRaw(macro.attributeName).watch(function (v) {
	                                                                cp.setMacro(macro.macroName, "" + Math.floor(v));
	                                                            }, true);
	                                                            return {
	                                                                v: {
	                                                                    v: void 0
	                                                                }
	                                                            };
	                                                        case "bool":
	                                                            _this2.__addAtribute(macro.attributeName, {
	                                                                converter: "Boolean",
	                                                                default: macro.default
	                                                            });
	                                                            _this2.getAttributeRaw(macro.attributeName).watch(function (v) {
	                                                                cp.setMacro(macro.macroName, v);
	                                                            }, true);
	                                                            return {
	                                                                v: {
	                                                                    v: void 0
	                                                                }
	                                                            };
	                                                        default:
	                                                            throw new Error("Unexpected macro type " + macro.type);
	                                                    }
	                                                };
	
	                                                for (var _iterator = cp.sort.macros[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                                                    var _ret3 = _loop2();
	
	                                                    if ((typeof _ret3 === "undefined" ? "undefined" : _typeof(_ret3)) === "object") return _ret3.v;
	                                                }
	                                            } catch (err) {
	                                                _didIteratorError = true;
	                                                _iteratorError = err;
	                                            } finally {
	                                                try {
	                                                    if (!_iteratorNormalCompletion && _iterator.return) {
	                                                        _iterator.return();
	                                                    }
	                                                } finally {
	                                                    if (_didIteratorError) {
	                                                        throw _iteratorError;
	                                                    }
	                                                }
	                                            }
	                                        }();
	
	                                        if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
	                                    }
	                                });
	                                _context.next = 7;
	                                return Promise.all(promises);
	
	                            case 7:
	                                this.ready = true;
	
	                            case 8:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, this);
	            }));
	        }
	    }]);
	
	    return MaterialComponent;
	}(_Component3.default);
	
	exports.default = MaterialComponent;
	
	MaterialComponent.attributes = {
	    type: {
	        converter: "String",
	        default: null
	    }
	};

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Shader = __webpack_require__(37);
	
	var _Shader2 = _interopRequireDefault(_Shader);
	
	var _Program = __webpack_require__(38);
	
	var _Program2 = _interopRequireDefault(_Program);
	
	var _Pass2 = __webpack_require__(41);
	
	var _Pass3 = _interopRequireDefault(_Pass2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var SORTPass = function (_Pass) {
	    _inherits(SORTPass, _Pass);
	
	    function SORTPass(factory, sort) {
	        _classCallCheck(this, SORTPass);
	
	        var _this = _possibleConstructorReturn(this, (SORTPass.__proto__ || Object.getPrototypeOf(SORTPass)).call(this));
	
	        _this.factory = factory;
	        _this.sort = sort;
	        _this._macroValues = {};
	        _this.attributes = Object.keys(sort.attributes);
	        _this.gl = factory.gl;
	        _this.fs = new _Shader2.default(_this.gl, WebGLRenderingContext.FRAGMENT_SHADER);
	        _this.vs = new _Shader2.default(_this.gl, WebGLRenderingContext.VERTEX_SHADER);
	        _this.program = new _Program2.default(_this.gl);
	        for (var i = 0; i < sort.macros.length; i++) {
	            var macroInfo = sort.macros[i];
	            if (macroInfo.type === "boolean") {
	                if (macroInfo.default) {
	                    _this._macroValues[macroInfo.macroName] = "";
	                }
	            } else {
	                _this._macroValues[macroInfo.macroName] = macroInfo.default;
	            }
	        }
	        factory.macro.addObserver(function () {
	            _this._updateProgram();
	        });
	        _this._updateProgram();
	        return _this;
	    }
	
	    _createClass(SORTPass, [{
	        key: "setMacro",
	        value: function setMacro(key, value) {
	            if (this._macroValues[key] === value) {
	                return; // Nothing to do if specified value is unchanged
	            }
	            if (typeof value === "boolean") {
	                this._macroValues[key] = value ? "" : null;
	            } else {
	                this._macroValues[key] = value;
	            }
	            this._updateProgram();
	        }
	    }, {
	        key: "getMacro",
	        value: function getMacro(key) {
	            return this._macroValues[key];
	        }
	    }, {
	        key: "__beforeDraw",
	        value: function __beforeDraw(args) {
	            for (var attributeKey in this.sort.gomlAttributes) {
	                this.sort.gomlAttributes[attributeKey].register(this.program.uniforms, args);
	            }
	            for (var key in this.sort.systemRegisterers) {
	                this.sort.systemRegisterers[key](this.program.uniforms, args);
	            }
	            // apply gl states
	            for (var _key in this.sort.configurator) {
	                this.sort.configurator[_key](this.gl);
	            }
	        }
	    }, {
	        key: "_updateProgram",
	        value: function _updateProgram() {
	            this.fs.update(this._generateShaderCode("FS"));
	            this.vs.update(this._generateShaderCode("VS"));
	            this.program.update([this.vs, this.fs]);
	        }
	    }, {
	        key: "_generateShaderCode",
	        value: function _generateShaderCode(shaderType) {
	            return "#define " + shaderType + "\n" + this.factory.shaderHeader + "\n" + this.factory.macro.macroString + "\n" + this._getMaterialMacro() + "\n/*BEGINNING OF USER CODE*/\n" + this.sort.shaderSource;
	        }
	        /**
	         * Obtain macro code of material
	         * @return {string} [description]
	         */
	
	    }, {
	        key: "_getMaterialMacro",
	        value: function _getMaterialMacro() {
	            var result = "";
	            for (var key in this._macroValues) {
	                if (this._macroValues[key] === null) {
	                    continue;
	                }
	                result += "#define " + key + " " + this._macroValues[key] + "\n";
	            }
	            return result;
	        }
	    }]);
	
	    return SORTPass;
	}(_Pass3.default);
	
	exports.default = SORTPass;

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _ResourceBase2 = __webpack_require__(26);
	
	var _ResourceBase3 = _interopRequireDefault(_ResourceBase2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Shader = function (_ResourceBase) {
	    _inherits(Shader, _ResourceBase);
	
	    function Shader(gl, type, sourceCode) {
	        _classCallCheck(this, Shader);
	
	        var _this = _possibleConstructorReturn(this, (Shader.__proto__ || Object.getPrototypeOf(Shader)).call(this, gl));
	
	        _this.type = type;
	        _this.sourceCode = sourceCode;
	        _this.shader = gl.createShader(type);
	        if (sourceCode) {
	            _this.update(sourceCode);
	        }
	        return _this;
	    }
	
	    _createClass(Shader, [{
	        key: "update",
	        value: function update(source) {
	            this.gl.shaderSource(this.shader, source);
	            this.gl.compileShader(this.shader);
	            if (!this.gl.getShaderParameter(this.shader, WebGLRenderingContext.COMPILE_STATUS)) {
	                throw new Error("Compiling shader failed.\nSourceCode:\n" + source + "\n\nErrorCode:" + this.gl.getShaderInfoLog(this.shader));
	            }
	            this.sourceCode = source;
	            this.valid = true;
	        }
	    }, {
	        key: "destroy",
	        value: function destroy() {
	            _get(Shader.prototype.__proto__ || Object.getPrototypeOf(Shader.prototype), "destroy", this).call(this);
	            this.gl.deleteShader(this.shader);
	        }
	    }]);
	
	    return Shader;
	}(_ResourceBase3.default);
	
	exports.default = Shader;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _ResourceCache = __webpack_require__(39);
	
	var _ResourceCache2 = _interopRequireDefault(_ResourceCache);
	
	var _UniformProxy = __webpack_require__(40);
	
	var _UniformProxy2 = _interopRequireDefault(_UniformProxy);
	
	var _ResourceBase2 = __webpack_require__(26);
	
	var _ResourceBase3 = _interopRequireDefault(_ResourceBase2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Program = function (_ResourceBase) {
	    _inherits(Program, _ResourceBase);
	
	    function Program(gl) {
	        _classCallCheck(this, Program);
	
	        var _this = _possibleConstructorReturn(this, (Program.__proto__ || Object.getPrototypeOf(Program)).call(this, gl));
	
	        _this._uniformLocations = {};
	        _this._attributeLocations = {};
	        _this.uniforms = new _UniformProxy2.default(_this);
	        _this.program = gl.createProgram();
	        return _this;
	    }
	
	    _createClass(Program, [{
	        key: "update",
	        value: function update(shaders) {
	            var _this2 = this;
	
	            if (this.valid) {
	                // detach all attached shaders previously
	                var preciousShaders = this.gl.getAttachedShaders(this.program);
	                preciousShaders.forEach(function (s) {
	                    return _this2.gl.detachShader(_this2.program, s);
	                });
	            }
	            shaders.forEach(function (shader) {
	                _this2.gl.attachShader(_this2.program, shader.shader);
	            });
	            this.gl.linkProgram(this.program);
	            if (!this.gl.getProgramParameter(this.program, WebGLRenderingContext.LINK_STATUS)) {
	                var errorLog = this.gl.getProgramInfoLog(this.program);
	                throw new Error("LINK FAILED\n" + errorLog);
	            }
	            this.valid = true;
	        }
	    }, {
	        key: "use",
	        value: function use() {
	            if (!_ResourceCache2.default.useProgramCheck(this.gl, this.program)) {
	                this.gl.useProgram(this.program);
	            }
	            this.uniforms.onUse();
	        }
	    }, {
	        key: "destroy",
	        value: function destroy() {
	            _get(Program.prototype.__proto__ || Object.getPrototypeOf(Program.prototype), "destroy", this).call(this);
	            this.gl.deleteProgram(this.program);
	        }
	    }, {
	        key: "findAttributeLocation",
	        value: function findAttributeLocation(variableName) {
	            if (this._attributeLocations[variableName] === void 0) {
	                this._attributeLocations[variableName] = this.gl.getAttribLocation(this.program, variableName);
	                this._safeEnableVertexAttribArray(this._attributeLocations[variableName]);
	                return this._attributeLocations[variableName];
	            } else {
	                return this._attributeLocations[variableName];
	            }
	        }
	    }, {
	        key: "findUniformLocation",
	        value: function findUniformLocation(variableName) {
	            var location = this._uniformLocations[variableName];
	            if (!location) {
	                return this._uniformLocations[variableName] = this.gl.getUniformLocation(this.program, variableName);
	            } else {
	                return location;
	            }
	        }
	    }, {
	        key: "_safeEnableVertexAttribArray",
	        value: function _safeEnableVertexAttribArray(location) {
	            if (location < 0) {
	                return;
	            }
	            this.gl.enableVertexAttribArray(location);
	        }
	    }]);
	
	    return Program;
	}(_ResourceBase3.default);
	
	exports.default = Program;

/***/ },
/* 39 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ResourceCache = exports.ResourceCache = function () {
	    function ResourceCache() {
	        _classCallCheck(this, ResourceCache);
	
	        this._lastUsedPrograms = new Map();
	    }
	    /**
	     * Save the specified WebGLProgram as last used program.
	     * And check the specified program was used last time.
	     */
	
	
	    _createClass(ResourceCache, [{
	        key: "useProgramCheck",
	        value: function useProgramCheck(gl, program) {
	            if (this._lastUsedPrograms.get(gl) === program) {
	                return true;
	            }
	            this._lastUsedPrograms.set(gl, program);
	            return false;
	        }
	    }]);
	
	    return ResourceCache;
	}();
	
	exports.default = new ResourceCache();

/***/ },
/* 40 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var UniformProxy = function () {
	    function UniformProxy(program) {
	        _classCallCheck(this, UniformProxy);
	
	        this.program = program;
	        this._currentTextureRegister = 0;
	        this._gl = program.gl;
	    }
	
	    _createClass(UniformProxy, [{
	        key: "uniformBool",
	        value: function uniformBool(variableName, val) {
	            var _this = this;
	
	            this._pass(variableName, function (l) {
	                return _this._gl.uniform1i(l, val ? 1 : 0);
	            });
	        }
	    }, {
	        key: "uniformMatrix",
	        value: function uniformMatrix(variableName, mat) {
	            var _this2 = this;
	
	            this._pass(variableName, function (l) {
	                return _this2._gl.uniformMatrix4fv(l, false, mat.rawElements);
	            });
	        }
	    }, {
	        key: "uniformMatrixArray",
	        value: function uniformMatrixArray(variableName, matricies) {
	            var _this3 = this;
	
	            var length = matricies.length / 16;
	
	            var _loop = function _loop(i) {
	                _this3._passAsArray(variableName, i, function (l) {
	                    return _this3._gl.uniformMatrix4fv(l, false, new Float32Array(matricies.buffer, matricies.byteOffset + i * 64));
	                });
	            };
	
	            for (var i = 0; i < length; i++) {
	                _loop(i);
	            }
	        }
	    }, {
	        key: "uniformFloat",
	        value: function uniformFloat(variableName, val) {
	            var _this4 = this;
	
	            this._pass(variableName, function (l) {
	                return _this4._gl.uniform1f(l, val);
	            });
	        }
	    }, {
	        key: "uniformFloatArray",
	        value: function uniformFloatArray(variableName, val) {
	            var _this5 = this;
	
	            this._pass(variableName, function (l) {
	                return _this5._gl.uniform1fv(l, val);
	            });
	        }
	    }, {
	        key: "uniformInt",
	        value: function uniformInt(variableName, val) {
	            var _this6 = this;
	
	            this._pass(variableName, function (l) {
	                return _this6._gl.uniform1i(l, val);
	            });
	        }
	    }, {
	        key: "uniformVector2",
	        value: function uniformVector2(variableName, val) {
	            var _this7 = this;
	
	            this._pass(variableName, function (l) {
	                return _this7._gl.uniform2f(l, val.X, val.Y);
	            });
	        }
	    }, {
	        key: "uniformVector2Array",
	        value: function uniformVector2Array(variableName, val) {
	            var _this8 = this;
	
	            this._pass(variableName, function (l) {
	                return _this8._gl.uniform2fv(l, val);
	            });
	        }
	    }, {
	        key: "uniformVector3",
	        value: function uniformVector3(variableName, val) {
	            var _this9 = this;
	
	            this._pass(variableName, function (l) {
	                return _this9._gl.uniform3f(l, val.X, val.Y, val.Z);
	            });
	        }
	    }, {
	        key: "uniformVector3Array",
	        value: function uniformVector3Array(variableName, val) {
	            var _this10 = this;
	
	            this._pass(variableName, function (l) {
	                return _this10._gl.uniform3fv(l, val);
	            });
	        }
	    }, {
	        key: "uniformColor3",
	        value: function uniformColor3(variableName, val) {
	            var _this11 = this;
	
	            this._pass(variableName, function (l) {
	                return _this11._gl.uniform3f(l, val.R, val.G, val.B);
	            });
	        }
	    }, {
	        key: "uniformVector4",
	        value: function uniformVector4(variableName, val) {
	            var _this12 = this;
	
	            this._pass(variableName, function (l) {
	                return _this12._gl.uniform4f(l, val.X, val.Y, val.Z, val.W);
	            });
	        }
	    }, {
	        key: "uniformVector4Array",
	        value: function uniformVector4Array(variableName, val) {
	            var _this13 = this;
	
	            this._pass(variableName, function (l) {
	                return _this13._gl.uniform4fv(l, val);
	            });
	        }
	    }, {
	        key: "uniformColor4",
	        value: function uniformColor4(variableName, val) {
	            var _this14 = this;
	
	            this._pass(variableName, function (l) {
	                return _this14._gl.uniform4f(l, val.R, val.G, val.B, val.A);
	            });
	        }
	    }, {
	        key: "uniformTexture2D",
	        value: function uniformTexture2D(variableName, val) {
	            if (val.valid) {
	                val.register(this._currentTextureRegister);
	                this.uniformInt(variableName, this._currentTextureRegister);
	                this._currentTextureRegister++;
	            } else {
	                console.warn("The texture assigned to '" + variableName + "' is not valid.");
	            }
	        }
	    }, {
	        key: "onUse",
	        value: function onUse() {
	            this._currentTextureRegister = 0;
	        }
	    }, {
	        key: "_pass",
	        value: function _pass(variableName, act) {
	            var location = this.program.findUniformLocation(variableName);
	            if (location) {
	                act(location);
	            }
	        }
	    }, {
	        key: "_passAsArray",
	        value: function _passAsArray(variableName, index, act) {
	            var location = this.program.findUniformLocation(variableName + "[" + index + "]");
	            if (location) {
	                act(location);
	            }
	        }
	    }]);
	
	    return UniformProxy;
	}();
	
	exports.default = UniformProxy;

/***/ },
/* 41 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Pass = function () {
	    function Pass() {
	        _classCallCheck(this, Pass);
	
	        this.attributes = [];
	    }
	
	    _createClass(Pass, [{
	        key: "draw",
	        value: function draw(arg) {
	            if (!this.program) {
	                return;
	            }
	            this.program.use();
	            this.__beforeDraw(arg);
	            arg.geometry.drawByDefault(arg.targetBuffer, this.attributes, this.program, arg.drawCount, arg.drawOffset);
	        }
	    }, {
	        key: "__beforeDraw",
	        value: function __beforeDraw(arg) {
	            // Should be overrrided or rewritten
	        }
	    }]);
	
	    return Pass;
	}();
	
	exports.default = Pass;

/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _DrawPriorty = __webpack_require__(43);
	
	var _DrawPriorty2 = _interopRequireDefault(_DrawPriorty);
	
	var _ResourceBase = __webpack_require__(26);
	
	var _ResourceBase2 = _interopRequireDefault(_ResourceBase);
	
	var _SORTPass = __webpack_require__(36);
	
	var _SORTPass2 = _interopRequireDefault(_SORTPass);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	var _grimoirejs = __webpack_require__(14);
	
	var _grimoirejs2 = _interopRequireDefault(_grimoirejs);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	
	var MaterialContainerComponent = function (_Component) {
	    _inherits(MaterialContainerComponent, _Component);
	
	    function MaterialContainerComponent() {
	        _classCallCheck(this, MaterialContainerComponent);
	
	        var _this = _possibleConstructorReturn(this, (MaterialContainerComponent.__proto__ || Object.getPrototypeOf(MaterialContainerComponent)).apply(this, arguments));
	
	        _this.materialArgs = {};
	        _this.ready = false;
	        _this.useMaterial = false;
	        return _this;
	    }
	
	    _createClass(MaterialContainerComponent, [{
	        key: "getDrawPriorty",
	        value: function getDrawPriorty(depth) {
	            if (!this.ready) {
	                return Number.MAX_VALUE;
	            }
	            var orderCriteria = _DrawPriorty2.default[this._drawOrder ? this._drawOrder : this.material.drawOrder];
	            if (orderCriteria.descending) {
	                return (1.0 - depth / 10000) * orderCriteria.priorty;
	            } else {
	                return depth / 10000 * orderCriteria.priorty;
	            }
	        }
	    }, {
	        key: "$mount",
	        value: function $mount() {
	            this.getAttributeRaw("material").watch(this._onMaterialChanged);
	            this.companion.get("loader").register(this._onMaterialChanged());
	            this.getAttributeRaw("drawOrder").boundTo("_drawOrder");
	        }
	        /**
	         * When the material attribute is changed.
	         */
	
	    }, {
	        key: "_onMaterialChanged",
	        value: function _onMaterialChanged() {
	            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	                var materialPromise;
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                materialPromise = this.getAttribute("material");
	
	                                if (!(materialPromise === void 0)) {
	                                    _context.next = 4;
	                                    break;
	                                }
	
	                                this.useMaterial = false;
	                                return _context.abrupt("return");
	
	                            case 4:
	                                this.useMaterial = true;
	                                if (!this._materialComponent) {
	                                    this._prepareInternalMaterial(materialPromise);
	                                } else {
	                                    this._prepareExternalMaterial(materialPromise);
	                                }
	
	                            case 6:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, this);
	            }));
	        }
	        /**
	         * Resolve materials only when the material required from external material component.
	         * @return {Promise<void>} [description]
	         */
	
	    }, {
	        key: "_prepareExternalMaterial",
	        value: function _prepareExternalMaterial(materialPromise) {
	            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee2() {
	                var loader, material;
	                return regeneratorRuntime.wrap(function _callee2$(_context2) {
	                    while (1) {
	                        switch (_context2.prev = _context2.next) {
	                            case 0:
	                                loader = this.companion.get("loader");
	
	                                loader.register(materialPromise);
	                                _context2.next = 4;
	                                return materialPromise;
	
	                            case 4:
	                                material = _context2.sent;
	
	                                this.material = material;
	                                this.materialArgs = this._materialComponent.materialArgs;
	                                this.ready = true;
	
	                            case 8:
	                            case "end":
	                                return _context2.stop();
	                        }
	                    }
	                }, _callee2, this);
	            }));
	        }
	    }, {
	        key: "_prepareInternalMaterial",
	        value: function _prepareInternalMaterial(materialPromise) {
	            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee3() {
	                var _this2 = this;
	
	                var loader, material, promises;
	                return regeneratorRuntime.wrap(function _callee3$(_context3) {
	                    while (1) {
	                        switch (_context3.prev = _context3.next) {
	                            case 0:
	                                // obtain promise of instanciating material
	                                loader = this.companion.get("loader");
	
	                                loader.register(materialPromise);
	
	                                if (materialPromise) {
	                                    _context3.next = 4;
	                                    break;
	                                }
	
	                                return _context3.abrupt("return");
	
	                            case 4:
	                                _context3.next = 6;
	                                return materialPromise;
	
	                            case 6:
	                                material = _context3.sent;
	                                promises = [];
	
	                                material.pass.forEach(function (p) {
	                                    if (p instanceof _SORTPass2.default) {
	                                        var _ret = function () {
	                                            var cp = p;
	
	                                            var _loop = function _loop(key) {
	                                                var val = cp.sort.gomlAttributes[key];
	                                                _this2.__addAtribute(key, val);
	                                                _this2.getAttributeRaw(key).watch(function (v) {
	                                                    _this2.materialArgs[key] = v;
	                                                });
	                                                var value = _this2.materialArgs[key] = _this2.getAttribute(key);
	                                                if (value instanceof _ResourceBase2.default) {
	                                                    promises.push(value.validPromise);
	                                                }
	                                            };
	
	                                            for (var key in cp.sort.gomlAttributes) {
	                                                _loop(key);
	                                            }
	                                            var _iteratorNormalCompletion = true;
	                                            var _didIteratorError = false;
	                                            var _iteratorError = undefined;
	
	                                            try {
	                                                var _loop2 = function _loop2() {
	                                                    var macro = _step.value;
	
	                                                    switch (macro.type) {
	                                                        case "int":
	                                                            _this2.__addAtribute(macro.attributeName, {
	                                                                converter: "Number",
	                                                                default: macro.default
	                                                            });
	                                                            _this2.getAttributeRaw(macro.attributeName).watch(function (v) {
	                                                                cp.setMacro(macro.macroName, "" + Math.floor(v));
	                                                            }, true);
	                                                            return {
	                                                                v: {
	                                                                    v: void 0
	                                                                }
	                                                            };
	                                                        case "bool":
	                                                            _this2.__addAtribute(macro.attributeName, {
	                                                                converter: "Boolean",
	                                                                default: macro.default
	                                                            });
	                                                            _this2.getAttributeRaw(macro.attributeName).watch(function (v) {
	                                                                cp.setMacro(macro.macroName, v);
	                                                            }, true);
	                                                            return {
	                                                                v: {
	                                                                    v: void 0
	                                                                }
	                                                            };
	                                                    }
	                                                };
	
	                                                for (var _iterator = cp.sort.macros[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                                                    var _ret3 = _loop2();
	
	                                                    if ((typeof _ret3 === "undefined" ? "undefined" : _typeof(_ret3)) === "object") return _ret3.v;
	                                                }
	                                            } catch (err) {
	                                                _didIteratorError = true;
	                                                _iteratorError = err;
	                                            } finally {
	                                                try {
	                                                    if (!_iteratorNormalCompletion && _iterator.return) {
	                                                        _iterator.return();
	                                                    }
	                                                } finally {
	                                                    if (_didIteratorError) {
	                                                        throw _iteratorError;
	                                                    }
	                                                }
	                                            }
	                                        }();
	
	                                        if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
	                                    }
	                                });
	                                Promise.all(promises);
	                                this.material = material;
	                                this.ready = true;
	
	                            case 12:
	                            case "end":
	                                return _context3.stop();
	                        }
	                    }
	                }, _callee3, this);
	            }));
	        }
	    }], [{
	        key: "rewriteDefaultMaterial",
	        value: function rewriteDefaultMaterial(materialName) {
	            if (materialName !== MaterialContainerComponent._defaultMaterial) {
	                MaterialContainerComponent._defaultMaterial = materialName;
	                _grimoirejs2.default.componentDeclarations.get("MaterialContainer").attributes["material"].default = "new(" + materialName + ")";
	            }
	        }
	    }, {
	        key: "defaultMaterial",
	        get: function get() {
	            return this._defaultMaterial;
	        }
	    }]);
	
	    return MaterialContainerComponent;
	}(_Component3.default);
	
	exports.default = MaterialContainerComponent;
	
	MaterialContainerComponent.attributes = {
	    material: {
	        converter: "Material",
	        default: "new(unlit)",
	        componentBoundTo: "_materialComponent" // When the material was specified with the other material tag, this field would be assigned.
	    },
	    drawOrder: {
	        converter: "String",
	        default: null
	    }
	};
	MaterialContainerComponent._defaultMaterial = "unlit";

/***/ },
/* 43 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    Background: { priorty: 1000 },
	    NoAlpha: { priorty: 2000 },
	    UseAlpha: { priorty: 3000, descending: true },
	    NoDepth: { priorty: 4000, descending: true },
	    Overlay: { priorty: 5000, descending: true }
	};

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _MaterialFactory = __webpack_require__(45);
	
	var _MaterialFactory2 = _interopRequireDefault(_MaterialFactory);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var MaterialImporterComponent = function (_Component) {
	    _inherits(MaterialImporterComponent, _Component);
	
	    function MaterialImporterComponent() {
	        _classCallCheck(this, MaterialImporterComponent);
	
	        return _possibleConstructorReturn(this, (MaterialImporterComponent.__proto__ || Object.getPrototypeOf(MaterialImporterComponent)).apply(this, arguments));
	    }
	
	    _createClass(MaterialImporterComponent, [{
	        key: "$awake",
	        value: function $awake() {
	            if (!this.getAttribute("typeName") || !this.getAttribute("src")) {
	                throw new Error("type or src cannot be null in material importer");
	            } else {
	                _MaterialFactory2.default.addSORTMaterialFromURL(this.getAttribute("typeName"), this.getAttribute("src"));
	            }
	        }
	    }]);
	
	    return MaterialImporterComponent;
	}(_Component3.default);
	
	exports.default = MaterialImporterComponent;
	
	MaterialImporterComponent.attributes = {
	    typeName: {
	        default: null,
	        converter: "String"
	    },
	    src: {
	        default: null,
	        converter: "String"
	    }
	};

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _DrawPriorty = __webpack_require__(43);
	
	var _DrawPriorty2 = _interopRequireDefault(_DrawPriorty);
	
	var _SORTPass = __webpack_require__(36);
	
	var _SORTPass2 = _interopRequireDefault(_SORTPass);
	
	var _MacroRegistory = __webpack_require__(46);
	
	var _MacroRegistory2 = _interopRequireDefault(_MacroRegistory);
	
	var _PassFactory = __webpack_require__(48);
	
	var _PassFactory2 = _interopRequireDefault(_PassFactory);
	
	var _TextFileResolver = __webpack_require__(6);
	
	var _TextFileResolver2 = _interopRequireDefault(_TextFileResolver);
	
	var _Material = __webpack_require__(62);
	
	var _Material2 = _interopRequireDefault(_Material);
	
	var _header = __webpack_require__(63);
	
	var _header2 = _interopRequireDefault(_header);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	
	/**
	 * Manage factories for materials.
	 * Materials can be instanciated with this instance.
	 */
	var MaterialFactory = function () {
	    function MaterialFactory(gl) {
	        _classCallCheck(this, MaterialFactory);
	
	        this.gl = gl;
	        this.shaderHeader = MaterialFactory.defaultShaderHeader;
	        this.macro = new _MacroRegistory2.default();
	    }
	
	    _createClass(MaterialFactory, [{
	        key: "instanciate",
	        value: function instanciate(typeName) {
	            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                if (!MaterialFactory.factories[typeName]) {
	                                    _context.next = 4;
	                                    break;
	                                }
	
	                                return _context.abrupt("return", MaterialFactory.factories[typeName](this));
	
	                            case 4:
	                                _context.next = 6;
	                                return this._waitForRegistered(typeName);
	
	                            case 6:
	                                return _context.abrupt("return", _context.sent);
	
	                            case 7:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, this);
	            }));
	        }
	    }, {
	        key: "_waitForRegistered",
	        value: function _waitForRegistered(typeName) {
	            var _this = this;
	
	            return new Promise(function (resolve) {
	                MaterialFactory._onRegister(typeName, function () {
	                    resolve(MaterialFactory.factories[typeName](_this));
	                });
	            });
	        }
	    }], [{
	        key: "addMaterialType",
	        value: function addMaterialType(typeName, factory) {
	            MaterialFactory.factories[typeName] = factory;
	            if (MaterialFactory.registerdHandlers[typeName]) {
	                MaterialFactory.registerdHandlers[typeName].forEach(function (t) {
	                    return t();
	                });
	            }
	        }
	        /**
	         * Add source of .sort material as specified typename.
	         * @param  {string}        typeName [description]
	         * @param  {string}        source   [description]
	         * @return {Promise<void>}          [description]
	         */
	
	    }, {
	        key: "addSORTMaterial",
	        value: function addSORTMaterial(typeName, source) {
	            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee2() {
	                var sortInfos;
	                return regeneratorRuntime.wrap(function _callee2$(_context2) {
	                    while (1) {
	                        switch (_context2.prev = _context2.next) {
	                            case 0:
	                                _context2.next = 2;
	                                return _PassFactory2.default.passInfoFromSORT(source);
	
	                            case 2:
	                                sortInfos = _context2.sent;
	
	                                MaterialFactory.addMaterialType(typeName, function (factory) {
	                                    var sorts = sortInfos.map(function (p) {
	                                        return new _SORTPass2.default(factory, p);
	                                    });
	                                    return new _Material2.default(sorts, MaterialFactory._parseSortDrawOrder(source));
	                                });
	
	                            case 4:
	                            case "end":
	                                return _context2.stop();
	                        }
	                    }
	                }, _callee2, this);
	            }));
	        }
	        /**
	         * Add source of .sort material from external url as specified typeName.
	         * @param  {string}        typeName [description]
	         * @param  {string}        url      [description]
	         * @return {Promise<void>}          [description]
	         */
	
	    }, {
	        key: "addSORTMaterialFromURL",
	        value: function addSORTMaterialFromURL(typeName, url) {
	            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee3() {
	                var source;
	                return regeneratorRuntime.wrap(function _callee3$(_context3) {
	                    while (1) {
	                        switch (_context3.prev = _context3.next) {
	                            case 0:
	                                _context3.next = 2;
	                                return _TextFileResolver2.default.resolve(url);
	
	                            case 2:
	                                source = _context3.sent;
	                                _context3.next = 5;
	                                return MaterialFactory.addSORTMaterial(typeName, source);
	
	                            case 5:
	                            case "end":
	                                return _context3.stop();
	                        }
	                    }
	                }, _callee3, this);
	            }));
	        }
	    }, {
	        key: "_onRegister",
	        value: function _onRegister(factoryName, handler) {
	            if (MaterialFactory.registerdHandlers[factoryName]) {
	                MaterialFactory.registerdHandlers[factoryName].push(handler);
	            } else {
	                MaterialFactory.registerdHandlers[factoryName] = [handler];
	            }
	        }
	    }, {
	        key: "_parseSortDrawOrder",
	        value: function _parseSortDrawOrder(source) {
	            var regex = /@DrawOrder\(\s*([a-zA-Z0-9]+)\s*\)/;
	            var result = regex.exec(source);
	            if (!result) {
	                return undefined;
	            } else {
	                var drawOrder = result[1];
	                if (_DrawPriorty2.default[drawOrder] === void 0) {
	                    throw new Error("Specified draw order " + drawOrder + " was not found.");
	                } else {
	                    return drawOrder;
	                }
	            }
	        }
	    }]);
	
	    return MaterialFactory;
	}();
	
	exports.default = MaterialFactory;
	
	MaterialFactory.defaultShaderHeader = _header2.default;
	/**
	 * Actual material generator.
	 */
	MaterialFactory.factories = {};
	MaterialFactory.registerdHandlers = {};

/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _DefaultMacro = __webpack_require__(47);
	
	var _DefaultMacro2 = _interopRequireDefault(_DefaultMacro);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Manage macros which would be appended head of all shaders grimoire.js would load.
	 */
	var MacroRegistory = function () {
	    function MacroRegistory() {
	        _classCallCheck(this, MacroRegistory);
	
	        /**
	         * Macro string which generated by registored macro.
	         * @type {string}
	         */
	        this.macroString = "";
	        /**
	         * The map of macro.
	         */
	        this._macro = {};
	        /**
	         * Handlers functions for changing macro.
	         */
	        this._observers = [];
	        for (var key in _DefaultMacro2.default) {
	            this.setValue(key, _DefaultMacro2.default[key]);
	        }
	    }
	    /**
	     * Set the value of macros.
	     * @param {string}    key [description]
	     * @param {string =   null}        val [description]
	     */
	
	
	    _createClass(MacroRegistory, [{
	        key: "setValue",
	        value: function setValue(key) {
	            var val = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	
	            if (this._macro[key] !== val) {
	                this._macro[key] = val;
	                this.macroString = this._getMacroString();
	                this._notifyMacroChanged();
	            }
	        }
	        /**
	         * Get the value of macro.
	         * @param  {string} key [description]
	         * @return {string}     [description]
	         */
	
	    }, {
	        key: "getValue",
	        value: function getValue(key) {
	            return this._macro[key];
	        }
	    }, {
	        key: "addObserver",
	        value: function addObserver(handler) {
	            this._observers.push(handler);
	        }
	    }, {
	        key: "removeObserver",
	        value: function removeObserver(handler) {
	            for (var i = 0; i < this._observers.length; i++) {
	                if (this._observers[i] === handler) {
	                    this._observers.splice(i, 1);
	                }
	            }
	        }
	    }, {
	        key: "_getMacroString",
	        value: function _getMacroString() {
	            var result = "";
	            for (var key in this._macro) {
	                result += this._genSingleMacroString(key, this._macro[key]);
	            }
	            return result;
	        }
	    }, {
	        key: "_notifyMacroChanged",
	        value: function _notifyMacroChanged() {
	            for (var i = 0; i < this._observers.length; i++) {
	                this._observers[i]();
	            }
	        }
	        /**
	         * Generate macro string for single macro
	         * @param  {string} key [description]
	         * @param  {string} val [description]
	         * @return {string}     [description]
	         */
	
	    }, {
	        key: "_genSingleMacroString",
	        value: function _genSingleMacroString(key, val) {
	            if (val === void 0) {
	                throw new Error("Macro value of " + key + " can't be undefined");
	            }
	            if (val === null) {
	                return "#define " + key + "\n";
	            } else {
	                return "#define " + key + " " + val + "\n";
	            }
	        }
	    }]);
	
	    return MacroRegistory;
	}();
	
	exports.default = MacroRegistory;

/***/ },
/* 47 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    "GRIMOIRE": null,
	    "WEBGL_VERSION": "1"
	};

/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _SORTPassParser = __webpack_require__(49);
	
	var _SORTPassParser2 = _interopRequireDefault(_SORTPassParser);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var PassFactory = function () {
	    function PassFactory() {
	        _classCallCheck(this, PassFactory);
	    }
	
	    _createClass(PassFactory, null, [{
	        key: "passInfoFromSORT",
	        value: function passInfoFromSORT(source) {
	            var splitted = source.split("@Pass");
	            splitted.splice(0, 1); // Separate with @Pass and if there was some pass without containing @, that would be skipped since that is assumed as empty.
	            return Promise.all(splitted.map(function (p) {
	                return _SORTPassParser2.default.parse(p);
	            }));
	        }
	    }]);
	
	    return PassFactory;
	}();
	
	exports.default = PassFactory;

/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _UniformRegisterer = __webpack_require__(50);
	
	var _UniformRegisterer2 = _interopRequireDefault(_UniformRegisterer);
	
	var _CommentRemover = __webpack_require__(54);
	
	var _CommentRemover2 = _interopRequireDefault(_CommentRemover);
	
	var _ImportTransformer = __webpack_require__(55);
	
	var _ImportTransformer2 = _interopRequireDefault(_ImportTransformer);
	
	var _VariableParser = __webpack_require__(57);
	
	var _VariableParser2 = _interopRequireDefault(_VariableParser);
	
	var _VariableAnnotationRemover = __webpack_require__(59);
	
	var _VariableAnnotationRemover2 = _interopRequireDefault(_VariableAnnotationRemover);
	
	var _PreferenceParser = __webpack_require__(60);
	
	var _PreferenceParser2 = _interopRequireDefault(_PreferenceParser);
	
	var _AnnotationRemover = __webpack_require__(61);
	
	var _AnnotationRemover2 = _interopRequireDefault(_AnnotationRemover);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	
	var SORTPassParser = function () {
	    function SORTPassParser() {
	        _classCallCheck(this, SORTPassParser);
	    }
	
	    _createClass(SORTPassParser, null, [{
	        key: "parse",
	        value: function parse(source) {
	            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	                var transformingInfo, i;
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                transformingInfo = {
	                                    origin: source,
	                                    info: {
	                                        shaderSource: source,
	                                        uniforms: {},
	                                        attributes: {},
	                                        macros: [],
	                                        configurator: [],
	                                        systemRegisterers: [],
	                                        gomlAttributes: {}
	                                    }
	                                };
	                                i = 0;
	
	                            case 2:
	                                if (!(i < SORTPassParser.transformers.length)) {
	                                    _context.next = 9;
	                                    break;
	                                }
	
	                                _context.next = 5;
	                                return SORTPassParser.transformers[i](transformingInfo);
	
	                            case 5:
	                                transformingInfo = _context.sent;
	
	                            case 6:
	                                i++;
	                                _context.next = 2;
	                                break;
	
	                            case 9:
	                                return _context.abrupt("return", transformingInfo.info);
	
	                            case 10:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, this);
	            }));
	        }
	    }]);
	
	    return SORTPassParser;
	}();
	
	exports.default = SORTPassParser;
	
	SORTPassParser.transformers = [_CommentRemover2.default, _ImportTransformer2.default, (0, _VariableParser2.default)("uniform"), (0, _VariableParser2.default)("attribute"), _PreferenceParser2.default, _AnnotationRemover2.default, _VariableAnnotationRemover2.default, _UniformRegisterer2.default];

/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	exports.default = function (input) {
	    return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee2() {
	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	            while (1) {
	                switch (_context2.prev = _context2.next) {
	                    case 0:
	                        _context2.next = 2;
	                        return _registerUserUniforms(input);
	
	                    case 2:
	                        _registerEnvUniforms(input);
	                        return _context2.abrupt("return", input);
	
	                    case 4:
	                    case "end":
	                        return _context2.stop();
	                }
	            }
	        }, _callee2, this);
	    }));
	};
	
	var _GLSLUtil = __webpack_require__(51);
	
	var _GLSLUtil2 = _interopRequireDefault(_GLSLUtil);
	
	var _EnvUniformValueResolver = __webpack_require__(52);
	
	var _EnvUniformValueResolver2 = _interopRequireDefault(_EnvUniformValueResolver);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	
	function _getDecl(converter, defaultValue, register) {
	    return {
	        converter: converter,
	        default: defaultValue,
	        register: register
	    };
	}
	// return default value if annotation containing default value. if not, return provided default value.
	function _resolveDefault(vi, defaultValue) {
	    if (vi.variableAnnotation.default) {
	        return vi.variableAnnotation.default;
	    } else {
	        return defaultValue;
	    }
	}
	function _registerUserUniforms(input) {
	    return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	        var promises, attributes, _loop, variableName, _ret;
	
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	            while (1) {
	                switch (_context.prev = _context.next) {
	                    case 0:
	                        promises = [];
	                        attributes = input.info.gomlAttributes;
	
	                        _loop = function _loop(variableName) {
	                            if (variableName.charAt(0) === "_") {
	                                // this should not assigned by material argument
	                                return "continue";
	                            }
	                            var valName = variableName;
	                            var uniforms = input.info.uniforms;
	                            var variableInfo = uniforms[variableName];
	                            var annotations = variableInfo.variableAnnotation;
	                            if (_GLSLUtil2.default.isPrimitive(variableInfo.variableType)) {
	                                if (variableInfo.isArray) {
	                                    switch (variableInfo.variableType) {
	                                        case "float":
	                                            var defaultArray = new Array();
	                                            defaultArray = defaultArray.map(function (p) {
	                                                return 0;
	                                            });
	                                            attributes[valName] = _getDecl("NumberArray", _resolveDefault(variableInfo, defaultArray), function (proxy, matArg) {
	                                                proxy.uniformFloatArray(valName, matArg.attributeValues[valName]);
	                                            });
	                                            break;
	                                        case "mat4":
	                                            var defaultArray2 = new Array();
	                                            defaultArray = defaultArray2.map(function (p) {
	                                                return 0;
	                                            });
	                                            attributes[valName] = _getDecl("Object", _resolveDefault(variableInfo, defaultArray), function (proxy, matArg) {
	                                                proxy.uniformMatrixArray(valName, matArg.attributeValues[valName]);
	                                            });
	                                            break;
	                                        default:
	                                            throw new Error("Unsupported array type " + variableInfo.variableType);
	                                    }
	                                } else {
	                                    (function () {
	                                        switch (variableInfo.variableType) {
	                                            case "bool":
	                                                attributes[valName] = _getDecl("Boolean", _resolveDefault(variableInfo, false), function (proxy, matArg) {
	                                                    proxy.uniformBool(valName, matArg.attributeValues[valName]);
	                                                });
	                                                break;
	                                            case "float":
	                                                attributes[valName] = _getDecl("Number", _resolveDefault(variableInfo, 0), function (proxy, matArg) {
	                                                    proxy.uniformFloat(valName, matArg.attributeValues[valName]);
	                                                });
	                                                break;
	                                            case "vec2":
	                                                attributes[valName] = _getDecl("Vector2", _resolveDefault(variableInfo, "0,0"), function (proxy, matArg) {
	                                                    proxy.uniformVector2(valName, matArg.attributeValues[valName]);
	                                                });
	                                                break;
	                                            case "vec3":
	                                                if (annotations["type"] === "color") {
	                                                    attributes[valName] = _getDecl("Color3", _resolveDefault(variableInfo, "#000"), function (proxy, matArg) {
	                                                        proxy.uniformColor3(valName, matArg.attributeValues[valName]);
	                                                    });
	                                                } else {
	                                                    attributes[valName] = _getDecl("Vector3", _resolveDefault(variableInfo, "0,0,0"), function (proxy, matArg) {
	                                                        proxy.uniformVector3(valName, matArg.attributeValues[valName]);
	                                                    });
	                                                }
	                                                break;
	                                            case "vec4":
	                                                if (annotations["type"] === "color") {
	                                                    attributes[valName] = _getDecl("Color4", _resolveDefault(variableInfo, "#0000"), function (proxy, matArg) {
	                                                        proxy.uniformColor4(valName, matArg.attributeValues[valName]);
	                                                    });
	                                                } else {
	                                                    attributes[valName] = _getDecl("Vector4", _resolveDefault(variableInfo, "0,0,0,0"), function (proxy, matArg) {
	                                                        proxy.uniformVector4(valName, matArg.attributeValues[valName]);
	                                                    });
	                                                }
	                                                break;
	                                            case "sampler2D":
	                                                var flagAssignTo = undefined;
	                                                // check used flag is existing
	                                                if (annotations["usedFlag"]) {
	                                                    if (annotations["usedFlag"] !== void 0) {
	                                                        flagAssignTo = annotations["usedFlag"];
	                                                    }
	                                                }
	                                                attributes[valName] = _getDecl("Texture", _resolveDefault(variableInfo, null), function (proxy, matArgs) {
	                                                    var texture = void 0;
	                                                    if (matArgs.attributeValues[valName] && (texture = matArgs.attributeValues[valName].get(matArgs.buffers))) {
	                                                        proxy.uniformTexture2D(valName, texture);
	                                                        if (flagAssignTo) {
	                                                            proxy.uniformBool(flagAssignTo, true);
	                                                        }
	                                                    } else {
	                                                        proxy.uniformTexture2D(valName, matArgs.defaultTexture);
	                                                        if (flagAssignTo) {
	                                                            proxy.uniformBool(flagAssignTo, false);
	                                                        }
	                                                    }
	                                                });
	                                                break;
	                                            default:
	                                                throw new Error("Unsupported type was found");
	                                        }
	                                    })();
	                                }
	                            } else {
	                                debugger;
	                            }
	                        };
	
	                        _context.t0 = regeneratorRuntime.keys(input.info.uniforms);
	
	                    case 4:
	                        if ((_context.t1 = _context.t0()).done) {
	                            _context.next = 11;
	                            break;
	                        }
	
	                        variableName = _context.t1.value;
	                        _ret = _loop(variableName);
	
	                        if (!(_ret === "continue")) {
	                            _context.next = 9;
	                            break;
	                        }
	
	                        return _context.abrupt("continue", 4);
	
	                    case 9:
	                        _context.next = 4;
	                        break;
	
	                    case 11:
	                        _context.next = 13;
	                        return Promise.all(promises);
	
	                    case 13:
	                    case "end":
	                        return _context.stop();
	                }
	            }
	        }, _callee, this);
	    }));
	}
	/**
	 * Register system shader variables whose name starts with _.
	 * @param  {ITransformingArgument} input [description]
	 * @return {Promise<void>}           [description]
	 */
	function _registerEnvUniforms(input) {
	    var registerers = input.info.systemRegisterers;
	    for (var variableName in input.info.uniforms) {
	        if (variableName.charAt(0) === "_") {
	            var _variableInfo = input.info.uniforms[variableName];
	            var resolver = _EnvUniformValueResolver2.default.resolve(variableName, _variableInfo);
	            if (resolver) {
	                registerers.push(resolver);
	                continue;
	            }
	        }
	    }
	}

/***/ },
/* 51 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var GLSLUtil = function () {
	    function GLSLUtil() {
	        _classCallCheck(this, GLSLUtil);
	    }
	
	    _createClass(GLSLUtil, null, [{
	        key: "isPrimitive",
	        value: function isPrimitive(type) {
	            return GLSLUtil._primitives.indexOf(type) >= 0;
	        }
	    }]);
	
	    return GLSLUtil;
	}();
	
	exports.default = GLSLUtil;
	
	GLSLUtil._primitives = ["float", "bool", "int", "vec2", "vec3", "vec4", "ivec2", "ivec3", "ivec4", "bvec2", "bvec3", "bvec4", "mat2", "mat3", "mat4", "sampler1D", "sampler2D", "sampler3D", "samplerCube", "sampler1DShadow", "sampler2DShadow"];

/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Vector = __webpack_require__(53);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Environment uniform value resolver
	 */
	var EnvUniformValueResolver = function () {
	    function EnvUniformValueResolver() {
	        _classCallCheck(this, EnvUniformValueResolver);
	    }
	
	    _createClass(EnvUniformValueResolver, null, [{
	        key: "addResolver",
	
	        /**
	         * Add static environment uniform value resolver to specified name.
	         * @param  {string} name     [description]
	         * @param  {string} resolver [description]
	         * @return {[type]}          [description]
	         */
	        value: function addResolver(name, resolver) {
	            EnvUniformValueResolver.resolvers[name] = resolver;
	        }
	        /**
	         * Add dynamic environment uniform value resolver.
	         * When pasased variable are not resolved by a resolver, that resolver should return null or undefined.
	         * @param  {string} resolver [description]
	         * @return {[type]}          [description]
	         */
	
	    }, {
	        key: "addDynamicResolver",
	        value: function addDynamicResolver(resolver) {
	            EnvUniformValueResolver.dynamicResolvers.push(resolver);
	        }
	    }, {
	        key: "resolve",
	        value: function resolve(name, valInfo) {
	            if (EnvUniformValueResolver.resolvers[name]) {
	                return EnvUniformValueResolver.resolvers[name](valInfo, name);
	            } else {
	                var targetResolver = null;
	                for (var i = 0; i < EnvUniformValueResolver.dynamicResolvers.length; i++) {
	                    targetResolver = EnvUniformValueResolver.dynamicResolvers[i](valInfo, name);
	                    if (targetResolver != null) {
	                        return targetResolver;
	                    }
	                }
	            }
	        }
	    }]);
	
	    return EnvUniformValueResolver;
	}();
	/**
	 * Static environment uniform value resolvers which names are already known.
	 * @type {IVariableInfo}
	 */
	
	
	exports.default = EnvUniformValueResolver;
	EnvUniformValueResolver.resolvers = {};
	/**
	 * Dynamic environment uniform value resolvers which names are not known yet.
	 * @type {IVariableInfo}
	 */
	EnvUniformValueResolver.dynamicResolvers = [];
	// Matricies
	EnvUniformValueResolver.addResolver("_matPVM", function (valInfo, name) {
	    return function (proxy, args) {
	        return proxy.uniformMatrix(name, args.transform.calcPVM(args.camera.camera));
	    };
	});
	EnvUniformValueResolver.addResolver("_matP", function (valInfo, name) {
	    return function (proxy, args) {
	        return proxy.uniformMatrix(name, args.camera.camera.getProjectionMatrix());
	    };
	});
	EnvUniformValueResolver.addResolver("_matV", function (valInfo, name) {
	    return function (proxy, args) {
	        return proxy.uniformMatrix(name, args.camera.camera.getViewMatrix());
	    };
	});
	EnvUniformValueResolver.addResolver("_matM", function (valInfo, name) {
	    return function (proxy, args) {
	        return proxy.uniformMatrix(name, args.transform.globalTransform);
	    };
	});
	EnvUniformValueResolver.addResolver("_matVM", function (valInfo, name) {
	    return function (proxy, args) {
	        return proxy.uniformMatrix(name, args.transform.calcVM(args.camera.camera));
	    };
	});
	EnvUniformValueResolver.addResolver("_matPV", function (valInfo, name) {
	    return function (proxy, args) {
	        return proxy.uniformMatrix(name, args.camera.camera.getProjectionViewMatrix());
	    };
	});
	// Misc
	EnvUniformValueResolver.addResolver("_time", function (valInfo, name) {
	    return function (proxy, args) {
	        return proxy.uniformFloat(name, Date.now() % 1000000);
	    };
	});
	EnvUniformValueResolver.addResolver("_viewportSize", function (valInfo, name) {
	    var cacheVec = new _Vector2.default(0, 0);
	    return function (proxy, args) {
	        cacheVec.X = args.viewport.Width;
	        cacheVec.Y = args.viewport.Height;
	        proxy.uniformVector2(name, cacheVec);
	    };
	});
	EnvUniformValueResolver.addResolver("_cameraPosition", function (valInfo, name) {
	    return function (proxy, args) {
	        return proxy.uniformVector3(name, args.camera.transform.globalPosition);
	    };
	});
	EnvUniformValueResolver.addResolver("_cameraDirection", function (valInfo, name) {
	    return function (proxy, args) {
	        return proxy.uniformVector3(name, args.camera.transform.forward);
	    };
	});

/***/ },
/* 53 */
/***/ function(module, exports) {

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});exports.default=window.GrimoireJS.lib.math.Vector2;

/***/ },
/* 54 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	exports.default = function (input) {
	    return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	            while (1) {
	                switch (_context.prev = _context.next) {
	                    case 0:
	                        input.info.shaderSource = _removeComment(input.info.shaderSource);
	                        return _context.abrupt("return", input);
	
	                    case 2:
	                    case "end":
	                        return _context.stop();
	                }
	            }
	        }, _callee, this);
	    }));
	};
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	function _removeComment(source) {
	    var text = "";
	    var isLineComment = false;
	    var isMultiLineComment = false;
	    for (var i = 0; i < source.length; i++) {
	        var c = source.charAt(i);
	        if (c === "/") {
	            if (i + 1 < source.length) {
	                if (source.charAt(i + 1) === "/" && !isMultiLineComment) {
	                    isLineComment = true;
	                    i++;
	                    continue;
	                } else if (source.charAt(i + 1) === "*" && !isLineComment) {
	                    isMultiLineComment = true;
	                    i++;
	                    continue;
	                }
	            }
	        }
	        if (c === "*" && isMultiLineComment && i + 1 < source.length && source.charAt(i + 1) === "/") {
	            isMultiLineComment = false;
	            i++;
	            continue;
	        }
	        if (c === "\n" && isLineComment) {
	            isLineComment = false;
	            continue;
	        }
	        if (!isLineComment && !isMultiLineComment) {
	            text += c;
	        }
	    }
	    return text;
	}

/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	exports.default = function (input) {
	    return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee2() {
	        var transformed;
	        return regeneratorRuntime.wrap(function _callee2$(_context2) {
	            while (1) {
	                switch (_context2.prev = _context2.next) {
	                    case 0:
	                        _context2.next = 2;
	                        return _parseImport(input.info.shaderSource);
	
	                    case 2:
	                        transformed = _context2.sent;
	
	                        input.info.shaderSource = transformed;
	                        return _context2.abrupt("return", input);
	
	                    case 5:
	                    case "end":
	                        return _context2.stop();
	                }
	            }
	        }, _callee2, this);
	    }));
	};
	
	var _ImportResolver = __webpack_require__(56);
	
	var _ImportResolver2 = _interopRequireDefault(_ImportResolver);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	
	function _parseImport(source) {
	    return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	        var regexResult, importContent;
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	            while (1) {
	                switch (_context.prev = _context.next) {
	                    case 0:
	                        if (false) {
	                            _context.next = 16;
	                            break;
	                        }
	
	                        regexResult = /\s*@import\s+"([^"]+)"/.exec(source);
	
	                        if (regexResult) {
	                            _context.next = 4;
	                            break;
	                        }
	
	                        return _context.abrupt("break", 16);
	
	                    case 4:
	                        importContent = void 0;
	                        _context.next = 7;
	                        return _ImportResolver2.default.resolve(regexResult[1]);
	
	                    case 7:
	                        _context.t0 = _context.sent;
	                        _context.next = 10;
	                        return _parseImport(_context.t0);
	
	                    case 10:
	                        importContent = _context.sent;
	
	                        if (importContent) {
	                            _context.next = 13;
	                            break;
	                        }
	
	                        throw new Error("Required shader chunk '" + regexResult[1] + "' was not found!!");
	
	                    case 13:
	                        source = source.replace(regexResult[0], "\n" + importContent + "\n");
	                        _context.next = 0;
	                        break;
	
	                    case 16:
	                        return _context.abrupt("return", source);
	
	                    case 17:
	                    case "end":
	                        return _context.stop();
	                }
	            }
	        }, _callee, this);
	    }));
	}

/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.ImportResolver = undefined;
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _CacheResolver2 = __webpack_require__(3);
	
	var _CacheResolver3 = _interopRequireDefault(_CacheResolver2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	
	var ImportResolver = exports.ImportResolver = function (_CacheResolver) {
	    _inherits(ImportResolver, _CacheResolver);
	
	    function ImportResolver() {
	        _classCallCheck(this, ImportResolver);
	
	        var _this = _possibleConstructorReturn(this, (ImportResolver.__proto__ || Object.getPrototypeOf(ImportResolver)).call(this, function (str) {
	            var regex = /^https?:\/\/.*/gm;
	            return regex.test(str) ? ImportResolver._toAbsolute(str) : str;
	        }));
	
	        _this.staticImports = {};
	        return _this;
	    }
	
	    _createClass(ImportResolver, [{
	        key: "resolve",
	        value: function resolve(path) {
	            var _this2 = this;
	
	            return _get(ImportResolver.prototype.__proto__ || Object.getPrototypeOf(ImportResolver.prototype), "resolve", this).call(this, path, function (abs) {
	                return _this2._resolve(path);
	            });
	        }
	    }, {
	        key: "_resolve",
	        value: function _resolve(path) {
	            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                if (!this.staticImports[path]) {
	                                    _context.next = 4;
	                                    break;
	                                }
	
	                                return _context.abrupt("return", this.staticImports[path]);
	
	                            case 4:
	                                _context.next = 6;
	                                return this._fromExternal(path);
	
	                            case 6:
	                                return _context.abrupt("return", _context.sent);
	
	                            case 7:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, this);
	            }));
	        }
	    }, {
	        key: "_fromExternal",
	        value: function _fromExternal(path) {
	            return new Promise(function (resolve, reject) {
	                var xhr = new XMLHttpRequest();
	                xhr.open("GET", path);
	                xhr.onload = function (v) {
	                    resolve(xhr.responseText);
	                };
	                xhr.onerror = function (e) {
	                    reject(e);
	                };
	                xhr.send();
	            });
	        }
	    }], [{
	        key: "_toAbsolute",
	        value: function _toAbsolute(href) {
	            var link = document.createElement("a");
	            link.href = href;
	            return link.protocol + "//" + link.host + link.pathname + link.search + link.hash;
	        }
	    }]);
	
	    return ImportResolver;
	}(_CacheResolver3.default);
	
	exports.default = new ImportResolver();

/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	exports.default = function (type) {
	    return function (arg) {
	        return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	            var variables;
	            return regeneratorRuntime.wrap(function _callee$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            variables = _parseVariables(arg.info.shaderSource, type);
	                            _context.t0 = type;
	                            _context.next = _context.t0 === "uniform" ? 4 : _context.t0 === "attribute" ? 6 : 8;
	                            break;
	
	                        case 4:
	                            arg.info.uniforms = variables;
	                            return _context.abrupt("break", 9);
	
	                        case 6:
	                            arg.info.attributes = variables;
	                            return _context.abrupt("break", 9);
	
	                        case 8:
	                            throw new Error("Unknown variable type!!");
	
	                        case 9:
	                            return _context.abrupt("return", arg);
	
	                        case 10:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, _callee, this);
	        }));
	    };
	};
	
	var _json = __webpack_require__(58);
	
	var _json2 = _interopRequireDefault(_json);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	
	function _parseVariableAttributes(attributes) {
	    return _json2.default.parse(attributes);
	}
	function _generateVariableFetchRegex(variableType) {
	    return new RegExp("(?:@(\\{.+\\}))?\\s*" + variableType + "\\s+(?:(lowp|mediump|highp)\\s+)?([a-z0-9A-Z]+)\\s+([a-zA-Z0-9_]+)(?:\\s*\\[\\s*([a-zA-Z0-9_]+)\\s*\\]\\s*)?\\s*;", "g");
	}
	function _parseVariables(source, variableType) {
	    var result = {};
	    var regex = _generateVariableFetchRegex(variableType);
	    var regexResult = void 0;
	
	    var _loop = function _loop() {
	        var name = regexResult[4];
	        var type = regexResult[3];
	        var precision = regexResult[2];
	        var rawAnnotations = regexResult[1];
	        var isArray = regexResult[5] !== void 0;
	        var arrayCount = undefined;
	        if (isArray) {
	            (function () {
	                var c = parseInt(regexResult[5], 10);
	                arrayCount = function arrayCount() {
	                    return c;
	                };
	                if (isNaN(c)) {
	                    arrayCount = function (_arrayCount) {
	                        function arrayCount(_x) {
	                            return _arrayCount.apply(this, arguments);
	                        }
	
	                        arrayCount.toString = function () {
	                            return _arrayCount.toString();
	                        };
	
	                        return arrayCount;
	                    }(function (m) {
	                        return m[arrayCount];
	                    });
	                }
	            })();
	        }
	        result[name] = {
	            variableName: name,
	            variableType: type,
	            variablePrecision: precision,
	            variableAnnotation: rawAnnotations ? _parseVariableAttributes(rawAnnotations) : {},
	            isArray: isArray,
	            arrayLength: arrayCount
	        };
	    };
	
	    while (regexResult = regex.exec(source)) {
	        _loop();
	    }
	    return result;
	}

/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	// json5.js
	// Modern JSON. See README.md for details.
	//
	// This file is based directly off of Douglas Crockford's json_parse.js:
	// https://github.com/douglascrockford/JSON-js/blob/master/json_parse.js
	
	var JSON5 = ( true ? exports : {});
	
	JSON5.parse = (function () {
	    "use strict";
	
	// This is a function that can parse a JSON5 text, producing a JavaScript
	// data structure. It is a simple, recursive descent parser. It does not use
	// eval or regular expressions, so it can be used as a model for implementing
	// a JSON5 parser in other languages.
	
	// We are defining the function inside of another function to avoid creating
	// global variables.
	
	    var at,           // The index of the current character
	        lineNumber,   // The current line number
	        columnNumber, // The current column number
	        ch,           // The current character
	        escapee = {
	            "'":  "'",
	            '"':  '"',
	            '\\': '\\',
	            '/':  '/',
	            '\n': '',       // Replace escaped newlines in strings w/ empty string
	            b:    '\b',
	            f:    '\f',
	            n:    '\n',
	            r:    '\r',
	            t:    '\t'
	        },
	        ws = [
	            ' ',
	            '\t',
	            '\r',
	            '\n',
	            '\v',
	            '\f',
	            '\xA0',
	            '\uFEFF'
	        ],
	        text,
	
	        renderChar = function (chr) {
	            return chr === '' ? 'EOF' : "'" + chr + "'";
	        },
	
	        error = function (m) {
	
	// Call error when something is wrong.
	
	            var error = new SyntaxError();
	            // beginning of message suffix to agree with that provided by Gecko - see https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/JSON/parse
	            error.message = m + " at line " + lineNumber + " column " + columnNumber + " of the JSON5 data. Still to read: " + JSON.stringify(text.substring(at - 1, at + 19));
	            error.at = at;
	            // These two property names have been chosen to agree with the ones in Gecko, the only popular
	            // environment which seems to supply this info on JSON.parse
	            error.lineNumber = lineNumber;
	            error.columnNumber = columnNumber;
	            throw error;
	        },
	
	        next = function (c) {
	
	// If a c parameter is provided, verify that it matches the current character.
	
	            if (c && c !== ch) {
	                error("Expected " + renderChar(c) + " instead of " + renderChar(ch));
	            }
	
	// Get the next character. When there are no more characters,
	// return the empty string.
	
	            ch = text.charAt(at);
	            at++;
	            columnNumber++;
	            if (ch === '\n' || ch === '\r' && peek() !== '\n') {
	                lineNumber++;
	                columnNumber = 0;
	            }
	            return ch;
	        },
	
	        peek = function () {
	
	// Get the next character without consuming it or
	// assigning it to the ch varaible.
	
	            return text.charAt(at);
	        },
	
	        identifier = function () {
	
	// Parse an identifier. Normally, reserved words are disallowed here, but we
	// only use this for unquoted object keys, where reserved words are allowed,
	// so we don't check for those here. References:
	// - http://es5.github.com/#x7.6
	// - https://developer.mozilla.org/en/Core_JavaScript_1.5_Guide/Core_Language_Features#Variables
	// - http://docstore.mik.ua/orelly/webprog/jscript/ch02_07.htm
	// TODO Identifiers can have Unicode "letters" in them; add support for those.
	
	            var key = ch;
	
	            // Identifiers must start with a letter, _ or $.
	            if ((ch !== '_' && ch !== '$') &&
	                    (ch < 'a' || ch > 'z') &&
	                    (ch < 'A' || ch > 'Z')) {
	                error("Bad identifier as unquoted key");
	            }
	
	            // Subsequent characters can contain digits.
	            while (next() && (
	                    ch === '_' || ch === '$' ||
	                    (ch >= 'a' && ch <= 'z') ||
	                    (ch >= 'A' && ch <= 'Z') ||
	                    (ch >= '0' && ch <= '9'))) {
	                key += ch;
	            }
	
	            return key;
	        },
	
	        number = function () {
	
	// Parse a number value.
	
	            var number,
	                sign = '',
	                string = '',
	                base = 10;
	
	            if (ch === '-' || ch === '+') {
	                sign = ch;
	                next(ch);
	            }
	
	            // support for Infinity (could tweak to allow other words):
	            if (ch === 'I') {
	                number = word();
	                if (typeof number !== 'number' || isNaN(number)) {
	                    error('Unexpected word for number');
	                }
	                return (sign === '-') ? -number : number;
	            }
	
	            // support for NaN
	            if (ch === 'N' ) {
	              number = word();
	              if (!isNaN(number)) {
	                error('expected word to be NaN');
	              }
	              // ignore sign as -NaN also is NaN
	              return number;
	            }
	
	            if (ch === '0') {
	                string += ch;
	                next();
	                if (ch === 'x' || ch === 'X') {
	                    string += ch;
	                    next();
	                    base = 16;
	                } else if (ch >= '0' && ch <= '9') {
	                    error('Octal literal');
	                }
	            }
	
	            switch (base) {
	            case 10:
	                while (ch >= '0' && ch <= '9' ) {
	                    string += ch;
	                    next();
	                }
	                if (ch === '.') {
	                    string += '.';
	                    while (next() && ch >= '0' && ch <= '9') {
	                        string += ch;
	                    }
	                }
	                if (ch === 'e' || ch === 'E') {
	                    string += ch;
	                    next();
	                    if (ch === '-' || ch === '+') {
	                        string += ch;
	                        next();
	                    }
	                    while (ch >= '0' && ch <= '9') {
	                        string += ch;
	                        next();
	                    }
	                }
	                break;
	            case 16:
	                while (ch >= '0' && ch <= '9' || ch >= 'A' && ch <= 'F' || ch >= 'a' && ch <= 'f') {
	                    string += ch;
	                    next();
	                }
	                break;
	            }
	
	            if(sign === '-') {
	                number = -string;
	            } else {
	                number = +string;
	            }
	
	            if (!isFinite(number)) {
	                error("Bad number");
	            } else {
	                return number;
	            }
	        },
	
	        string = function () {
	
	// Parse a string value.
	
	            var hex,
	                i,
	                string = '',
	                delim,      // double quote or single quote
	                uffff;
	
	// When parsing for string values, we must look for ' or " and \ characters.
	
	            if (ch === '"' || ch === "'") {
	                delim = ch;
	                while (next()) {
	                    if (ch === delim) {
	                        next();
	                        return string;
	                    } else if (ch === '\\') {
	                        next();
	                        if (ch === 'u') {
	                            uffff = 0;
	                            for (i = 0; i < 4; i += 1) {
	                                hex = parseInt(next(), 16);
	                                if (!isFinite(hex)) {
	                                    break;
	                                }
	                                uffff = uffff * 16 + hex;
	                            }
	                            string += String.fromCharCode(uffff);
	                        } else if (ch === '\r') {
	                            if (peek() === '\n') {
	                                next();
	                            }
	                        } else if (typeof escapee[ch] === 'string') {
	                            string += escapee[ch];
	                        } else {
	                            break;
	                        }
	                    } else if (ch === '\n') {
	                        // unescaped newlines are invalid; see:
	                        // https://github.com/aseemk/json5/issues/24
	                        // TODO this feels special-cased; are there other
	                        // invalid unescaped chars?
	                        break;
	                    } else {
	                        string += ch;
	                    }
	                }
	            }
	            error("Bad string");
	        },
	
	        inlineComment = function () {
	
	// Skip an inline comment, assuming this is one. The current character should
	// be the second / character in the // pair that begins this inline comment.
	// To finish the inline comment, we look for a newline or the end of the text.
	
	            if (ch !== '/') {
	                error("Not an inline comment");
	            }
	
	            do {
	                next();
	                if (ch === '\n' || ch === '\r') {
	                    next();
	                    return;
	                }
	            } while (ch);
	        },
	
	        blockComment = function () {
	
	// Skip a block comment, assuming this is one. The current character should be
	// the * character in the /* pair that begins this block comment.
	// To finish the block comment, we look for an ending */ pair of characters,
	// but we also watch for the end of text before the comment is terminated.
	
	            if (ch !== '*') {
	                error("Not a block comment");
	            }
	
	            do {
	                next();
	                while (ch === '*') {
	                    next('*');
	                    if (ch === '/') {
	                        next('/');
	                        return;
	                    }
	                }
	            } while (ch);
	
	            error("Unterminated block comment");
	        },
	
	        comment = function () {
	
	// Skip a comment, whether inline or block-level, assuming this is one.
	// Comments always begin with a / character.
	
	            if (ch !== '/') {
	                error("Not a comment");
	            }
	
	            next('/');
	
	            if (ch === '/') {
	                inlineComment();
	            } else if (ch === '*') {
	                blockComment();
	            } else {
	                error("Unrecognized comment");
	            }
	        },
	
	        white = function () {
	
	// Skip whitespace and comments.
	// Note that we're detecting comments by only a single / character.
	// This works since regular expressions are not valid JSON(5), but this will
	// break if there are other valid values that begin with a / character!
	
	            while (ch) {
	                if (ch === '/') {
	                    comment();
	                } else if (ws.indexOf(ch) >= 0) {
	                    next();
	                } else {
	                    return;
	                }
	            }
	        },
	
	        word = function () {
	
	// true, false, or null.
	
	            switch (ch) {
	            case 't':
	                next('t');
	                next('r');
	                next('u');
	                next('e');
	                return true;
	            case 'f':
	                next('f');
	                next('a');
	                next('l');
	                next('s');
	                next('e');
	                return false;
	            case 'n':
	                next('n');
	                next('u');
	                next('l');
	                next('l');
	                return null;
	            case 'I':
	                next('I');
	                next('n');
	                next('f');
	                next('i');
	                next('n');
	                next('i');
	                next('t');
	                next('y');
	                return Infinity;
	            case 'N':
	              next( 'N' );
	              next( 'a' );
	              next( 'N' );
	              return NaN;
	            }
	            error("Unexpected " + renderChar(ch));
	        },
	
	        value,  // Place holder for the value function.
	
	        array = function () {
	
	// Parse an array value.
	
	            var array = [];
	
	            if (ch === '[') {
	                next('[');
	                white();
	                while (ch) {
	                    if (ch === ']') {
	                        next(']');
	                        return array;   // Potentially empty array
	                    }
	                    // ES5 allows omitting elements in arrays, e.g. [,] and
	                    // [,null]. We don't allow this in JSON5.
	                    if (ch === ',') {
	                        error("Missing array element");
	                    } else {
	                        array.push(value());
	                    }
	                    white();
	                    // If there's no comma after this value, this needs to
	                    // be the end of the array.
	                    if (ch !== ',') {
	                        next(']');
	                        return array;
	                    }
	                    next(',');
	                    white();
	                }
	            }
	            error("Bad array");
	        },
	
	        object = function () {
	
	// Parse an object value.
	
	            var key,
	                object = {};
	
	            if (ch === '{') {
	                next('{');
	                white();
	                while (ch) {
	                    if (ch === '}') {
	                        next('}');
	                        return object;   // Potentially empty object
	                    }
	
	                    // Keys can be unquoted. If they are, they need to be
	                    // valid JS identifiers.
	                    if (ch === '"' || ch === "'") {
	                        key = string();
	                    } else {
	                        key = identifier();
	                    }
	
	                    white();
	                    next(':');
	                    object[key] = value();
	                    white();
	                    // If there's no comma after this pair, this needs to be
	                    // the end of the object.
	                    if (ch !== ',') {
	                        next('}');
	                        return object;
	                    }
	                    next(',');
	                    white();
	                }
	            }
	            error("Bad object");
	        };
	
	    value = function () {
	
	// Parse a JSON value. It could be an object, an array, a string, a number,
	// or a word.
	
	        white();
	        switch (ch) {
	        case '{':
	            return object();
	        case '[':
	            return array();
	        case '"':
	        case "'":
	            return string();
	        case '-':
	        case '+':
	        case '.':
	            return number();
	        default:
	            return ch >= '0' && ch <= '9' ? number() : word();
	        }
	    };
	
	// Return the json_parse function. It will have access to all of the above
	// functions and variables.
	
	    return function (source, reviver) {
	        var result;
	
	        text = String(source);
	        at = 0;
	        lineNumber = 1;
	        columnNumber = 1;
	        ch = ' ';
	        result = value();
	        white();
	        if (ch) {
	            error("Syntax error");
	        }
	
	// If there is a reviver function, we recursively walk the new structure,
	// passing each name/value pair to the reviver function for possible
	// transformation, starting with a temporary root object that holds the result
	// in an empty key. If there is not a reviver function, we simply return the
	// result.
	
	        return typeof reviver === 'function' ? (function walk(holder, key) {
	            var k, v, value = holder[key];
	            if (value && typeof value === 'object') {
	                for (k in value) {
	                    if (Object.prototype.hasOwnProperty.call(value, k)) {
	                        v = walk(value, k);
	                        if (v !== undefined) {
	                            value[k] = v;
	                        } else {
	                            delete value[k];
	                        }
	                    }
	                }
	            }
	            return reviver.call(holder, key, value);
	        }({'': result}, '')) : result;
	    };
	}());
	
	// JSON5 stringify will not quote keys where appropriate
	JSON5.stringify = function (obj, replacer, space) {
	    if (replacer && (typeof(replacer) !== "function" && !isArray(replacer))) {
	        throw new Error('Replacer must be a function or an array');
	    }
	    var getReplacedValueOrUndefined = function(holder, key, isTopLevel) {
	        var value = holder[key];
	
	        // Replace the value with its toJSON value first, if possible
	        if (value && value.toJSON && typeof value.toJSON === "function") {
	            value = value.toJSON();
	        }
	
	        // If the user-supplied replacer if a function, call it. If it's an array, check objects' string keys for
	        // presence in the array (removing the key/value pair from the resulting JSON if the key is missing).
	        if (typeof(replacer) === "function") {
	            return replacer.call(holder, key, value);
	        } else if(replacer) {
	            if (isTopLevel || isArray(holder) || replacer.indexOf(key) >= 0) {
	                return value;
	            } else {
	                return undefined;
	            }
	        } else {
	            return value;
	        }
	    };
	
	    function isWordChar(c) {
	        return (c >= 'a' && c <= 'z') ||
	            (c >= 'A' && c <= 'Z') ||
	            (c >= '0' && c <= '9') ||
	            c === '_' || c === '$';
	    }
	
	    function isWordStart(c) {
	        return (c >= 'a' && c <= 'z') ||
	            (c >= 'A' && c <= 'Z') ||
	            c === '_' || c === '$';
	    }
	
	    function isWord(key) {
	        if (typeof key !== 'string') {
	            return false;
	        }
	        if (!isWordStart(key[0])) {
	            return false;
	        }
	        var i = 1, length = key.length;
	        while (i < length) {
	            if (!isWordChar(key[i])) {
	                return false;
	            }
	            i++;
	        }
	        return true;
	    }
	
	    // export for use in tests
	    JSON5.isWord = isWord;
	
	    // polyfills
	    function isArray(obj) {
	        if (Array.isArray) {
	            return Array.isArray(obj);
	        } else {
	            return Object.prototype.toString.call(obj) === '[object Array]';
	        }
	    }
	
	    function isDate(obj) {
	        return Object.prototype.toString.call(obj) === '[object Date]';
	    }
	
	    var objStack = [];
	    function checkForCircular(obj) {
	        for (var i = 0; i < objStack.length; i++) {
	            if (objStack[i] === obj) {
	                throw new TypeError("Converting circular structure to JSON");
	            }
	        }
	    }
	
	    function makeIndent(str, num, noNewLine) {
	        if (!str) {
	            return "";
	        }
	        // indentation no more than 10 chars
	        if (str.length > 10) {
	            str = str.substring(0, 10);
	        }
	
	        var indent = noNewLine ? "" : "\n";
	        for (var i = 0; i < num; i++) {
	            indent += str;
	        }
	
	        return indent;
	    }
	
	    var indentStr;
	    if (space) {
	        if (typeof space === "string") {
	            indentStr = space;
	        } else if (typeof space === "number" && space >= 0) {
	            indentStr = makeIndent(" ", space, true);
	        } else {
	            // ignore space parameter
	        }
	    }
	
	    // Copied from Crokford's implementation of JSON
	    // See https://github.com/douglascrockford/JSON-js/blob/e39db4b7e6249f04a195e7dd0840e610cc9e941e/json2.js#L195
	    // Begin
	    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
	        meta = { // table of character substitutions
	        '\b': '\\b',
	        '\t': '\\t',
	        '\n': '\\n',
	        '\f': '\\f',
	        '\r': '\\r',
	        '"' : '\\"',
	        '\\': '\\\\'
	    };
	    function escapeString(string) {
	
	// If the string contains no control characters, no quote characters, and no
	// backslash characters, then we can safely slap some quotes around it.
	// Otherwise we must also replace the offending characters with safe escape
	// sequences.
	        escapable.lastIndex = 0;
	        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
	            var c = meta[a];
	            return typeof c === 'string' ?
	                c :
	                '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
	        }) + '"' : '"' + string + '"';
	    }
	    // End
	
	    function internalStringify(holder, key, isTopLevel) {
	        var buffer, res;
	
	        // Replace the value, if necessary
	        var obj_part = getReplacedValueOrUndefined(holder, key, isTopLevel);
	
	        if (obj_part && !isDate(obj_part)) {
	            // unbox objects
	            // don't unbox dates, since will turn it into number
	            obj_part = obj_part.valueOf();
	        }
	        switch(typeof obj_part) {
	            case "boolean":
	                return obj_part.toString();
	
	            case "number":
	                if (isNaN(obj_part) || !isFinite(obj_part)) {
	                    return "null";
	                }
	                return obj_part.toString();
	
	            case "string":
	                return escapeString(obj_part.toString());
	
	            case "object":
	                if (obj_part === null) {
	                    return "null";
	                } else if (isArray(obj_part)) {
	                    checkForCircular(obj_part);
	                    buffer = "[";
	                    objStack.push(obj_part);
	
	                    for (var i = 0; i < obj_part.length; i++) {
	                        res = internalStringify(obj_part, i, false);
	                        buffer += makeIndent(indentStr, objStack.length);
	                        if (res === null || typeof res === "undefined") {
	                            buffer += "null";
	                        } else {
	                            buffer += res;
	                        }
	                        if (i < obj_part.length-1) {
	                            buffer += ",";
	                        } else if (indentStr) {
	                            buffer += "\n";
	                        }
	                    }
	                    objStack.pop();
	                    if (obj_part.length) {
	                        buffer += makeIndent(indentStr, objStack.length, true)
	                    }
	                    buffer += "]";
	                } else {
	                    checkForCircular(obj_part);
	                    buffer = "{";
	                    var nonEmpty = false;
	                    objStack.push(obj_part);
	                    for (var prop in obj_part) {
	                        if (obj_part.hasOwnProperty(prop)) {
	                            var value = internalStringify(obj_part, prop, false);
	                            isTopLevel = false;
	                            if (typeof value !== "undefined" && value !== null) {
	                                buffer += makeIndent(indentStr, objStack.length);
	                                nonEmpty = true;
	                                key = isWord(prop) ? prop : escapeString(prop);
	                                buffer += key + ":" + (indentStr ? ' ' : '') + value + ",";
	                            }
	                        }
	                    }
	                    objStack.pop();
	                    if (nonEmpty) {
	                        buffer = buffer.substring(0, buffer.length-1) + makeIndent(indentStr, objStack.length) + "}";
	                    } else {
	                        buffer = '{}';
	                    }
	                }
	                return buffer;
	            default:
	                // functions and undefined should be ignored
	                return undefined;
	        }
	    }
	
	    // special case...when undefined is used inside of
	    // a compound object/array, return null.
	    // but when top-level, return undefined
	    var topLevelHolder = {"":obj};
	    if (obj === undefined) {
	        return getReplacedValueOrUndefined(topLevelHolder, '', true);
	    }
	    return internalStringify(topLevelHolder, '', true);
	};


/***/ },
/* 59 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	exports.default = function (input) {
	    return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	            while (1) {
	                switch (_context.prev = _context.next) {
	                    case 0:
	                        input.info.shaderSource = _removeVariableAnnotations(input.info.shaderSource);
	                        return _context.abrupt("return", input);
	
	                    case 2:
	                    case "end":
	                        return _context.stop();
	                }
	            }
	        }, _callee, this);
	    }));
	};
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	function _removeVariableAnnotations(source) {
	    var regexResult = void 0;
	    while (regexResult = /@\{.+\}/g.exec(source)) {
	        source = source.substr(0, regexResult.index) + source.substring(regexResult.index + regexResult[0].length, source.length);
	    }
	    return source;
	}

/***/ },
/* 60 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	exports.default = function (input) {
	    return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	        return regeneratorRuntime.wrap(function _callee$(_context2) {
	            while (1) {
	                switch (_context2.prev = _context2.next) {
	                    case 0:
	                        _parsePreference(input.info);
	                        return _context2.abrupt("return", input);
	
	                    case 2:
	                    case "end":
	                        return _context2.stop();
	                }
	            }
	        }, _callee, this);
	    }));
	};
	
	var _marked = [_regexPreferences].map(regeneratorRuntime.mark);
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	function _regexPreferences(source) {
	    var regex, regexResult;
	    return regeneratorRuntime.wrap(function _regexPreferences$(_context) {
	        while (1) {
	            switch (_context.prev = _context.next) {
	                case 0:
	                    regex = /@([a-zA-Z]+)\(([^)]*)\)/g;
	                    regexResult = void 0;
	
	                case 2:
	                    if (!(regexResult = regex.exec(source))) {
	                        _context.next = 7;
	                        break;
	                    }
	
	                    _context.next = 5;
	                    return {
	                        name: regexResult[1],
	                        args: regexResult[2].split(",")
	                    };
	
	                case 5:
	                    _context.next = 2;
	                    break;
	
	                case 7:
	                case "end":
	                    return _context.stop();
	            }
	        }
	    }, _marked[0], this);
	}
	function _enablingFunc(target, enabled) {
	    if (enabled) {
	        return function (gl) {
	            gl.enable(target);
	        };
	    } else {
	        return function (gl) {
	            gl.disable(target);
	        };
	    }
	}
	function _asGLConstants(args, length) {
	    if (args.length !== length) {
	        throw new Error("The arguments should contain " + length + " of items but there was " + args.length);
	    }
	    return args.map(function (arg) {
	        var value = WebGLRenderingContext[arg.toUpperCase().trim()];
	        if (value !== void 0) {
	            return value;
	        } else {
	            throw new Error("Specified WebGL constant " + arg + " was not found");
	        }
	    });
	}
	function _exposeMacro(info, args) {
	    if (args.length !== 4) {
	        throw new Error("ExposeMacro must have 4 of arguments");
	    }
	    info.macros.push({
	        type: args[0],
	        attributeName: args[1],
	        macroName: args[2],
	        default: args[3]
	    });
	}
	function _parsePreference(info) {
	    var configs = _regexPreferences(info.shaderSource);
	    var configResult = void 0;
	    var result = [];
	    var depthEnabled = true,
	        blendEnabled = true,
	        cullEnabled = true;
	    while (configResult = configs.next()) {
	        if (configResult.done) {
	            break;
	        }
	        var config = configResult.value;
	
	        (function () {
	            switch (config.name) {
	                case "NoDepth":
	                    depthEnabled = false;
	                    break;
	                case "DepthFunc":
	                    depthEnabled = true;
	                    var depth = _asGLConstants(config.args, 1);
	                    result.push(function (gl) {
	                        gl.depthFunc(depth[0]);
	                    });
	                    break;
	                case "NoBlend":
	                    blendEnabled = false;
	                    break;
	                case "NoCull":
	                    cullEnabled = false;
	                    break;
	                case "CullFace":
	                    cullEnabled = true;
	                    var cullConfig = _asGLConstants(config.args, 1);
	                    result.push(function (gl) {
	                        gl.cullFace(cullConfig[0]);
	                    });
	                    break;
	                case "BlendFunc":
	                    blendEnabled = true;
	                    var blendFuncConfig = _asGLConstants(config.args, 2);
	                    result.push(function (gl) {
	                        gl.blendFunc(blendFuncConfig[0], blendFuncConfig[1]);
	                    });
	                    break;
	                case "BlendFuncSeparate":
	                    blendEnabled = true;
	                    var blendFuncSeparate = _asGLConstants(config.args, 4);
	                    result.push(function (gl) {
	                        gl.blendFuncSeparate(blendFuncSeparate[0], blendFuncSeparate[1], blendFuncSeparate[2], blendFuncSeparate[3]);
	                    });
	                    break;
	                case "BlendEquation":
	                    blendEnabled = true;
	                    var blendEquation = _asGLConstants(config.args, 1);
	                    result.push(function (gl) {
	                        gl.blendEquation(blendEquation[0]);
	                    });
	                    break;
	                case "BlendEquationSeparate":
	                    blendEnabled = true;
	                    var blendEquationSeparate = _asGLConstants(config.args, 2);
	                    result.push(function (gl) {
	                        gl.blendEquationSeparate(blendEquationSeparate[0], blendEquationSeparate[1]);
	                    });
	                    break;
	                case "ExposeMacro":
	                    _exposeMacro(info, config.args);
	                    break;
	            }
	        })();
	    }
	    result.unshift(_enablingFunc(WebGLRenderingContext.DEPTH_TEST, depthEnabled));
	    result.unshift(_enablingFunc(WebGLRenderingContext.BLEND, blendEnabled));
	    result.unshift(_enablingFunc(WebGLRenderingContext.CULL_FACE, cullEnabled));
	    info.configurator = result;
	}

/***/ },
/* 61 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	exports.default = function (input) {
	    return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	        return regeneratorRuntime.wrap(function _callee$(_context) {
	            while (1) {
	                switch (_context.prev = _context.next) {
	                    case 0:
	                        input.info.shaderSource = _removeAnnotations(input.info.shaderSource);
	                        return _context.abrupt("return", input);
	
	                    case 2:
	                    case "end":
	                        return _context.stop();
	                }
	            }
	        }, _callee, this);
	    }));
	};
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	function _removeAnnotations(source) {
	    var regex = /(\s*@[a-zA-Z]*\([^)]*\))/;
	    while (true) {
	        var found = regex.exec(source);
	        if (!found) {
	            break;
	        }
	        source = source.replace(found[0], "");
	    }
	    return source;
	}

/***/ },
/* 62 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Material = function () {
	    function Material(pass) {
	        var drawOrder = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "UseAlpha";
	
	        _classCallCheck(this, Material);
	
	        this.pass = pass;
	        this.drawOrder = drawOrder;
	    }
	
	    _createClass(Material, [{
	        key: "draw",
	        value: function draw(arg) {
	            this.pass.forEach(function (p) {
	                return p.draw(arg);
	            });
	        }
	    }]);
	
	    return Material;
	}();
	
	exports.default = Material;

/***/ },
/* 63 */
/***/ function(module, exports) {

	module.exports = "/*Header start*/\n// helper macros\n#ifdef FS\n  #define FS_PREC(prec,type) precision prec type;\n  #define VS_PREC(prec,type)\n#endif\n#ifdef VS\n#define VS_PREC(prec,type) precision prec type;\n#define FS_PREC(prec,type)\n#endif\n// constants\n#define PI 3.141592653589793\n#define E 2.718281828459045\n#define LN2 0.6931471805599453\n#define LN10 2.302585092994046\n#define LOG2E 1.4426950408889634\n#define LOG10E 0.4342944819032518\n#define SQRT2 1.4142135623730951\n#define SQRT1_2 0.7071067811865476\n/*Header end*/\n"

/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _grimoirejs = __webpack_require__(14);
	
	var _grimoirejs2 = _interopRequireDefault(_grimoirejs);
	
	var _MaterialFactory = __webpack_require__(45);
	
	var _MaterialFactory2 = _interopRequireDefault(_MaterialFactory);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var MaterialManagerComponent = function (_Component) {
	    _inherits(MaterialManagerComponent, _Component);
	
	    function MaterialManagerComponent() {
	        _classCallCheck(this, MaterialManagerComponent);
	
	        return _possibleConstructorReturn(this, (MaterialManagerComponent.__proto__ || Object.getPrototypeOf(MaterialManagerComponent)).apply(this, arguments));
	    }
	
	    _createClass(MaterialManagerComponent, [{
	        key: "$awake",
	        value: function $awake() {
	            var ns = _grimoirejs2.default.ns(this.name.ns);
	            this.companion.set(ns("MaterialFactory"), new _MaterialFactory2.default(this.companion.get("gl")));
	        }
	    }]);
	
	    return MaterialManagerComponent;
	}(_Component3.default);
	
	exports.default = MaterialManagerComponent;
	
	MaterialManagerComponent.attributes = {};

/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _SceneComponent = __webpack_require__(21);
	
	var _SceneComponent2 = _interopRequireDefault(_SceneComponent);
	
	var _MaterialContainerComponent = __webpack_require__(42);
	
	var _MaterialContainerComponent2 = _interopRequireDefault(_MaterialContainerComponent);
	
	var _TransformComponent = __webpack_require__(19);
	
	var _TransformComponent2 = _interopRequireDefault(_TransformComponent);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var MeshRenderer = function (_Component) {
	    _inherits(MeshRenderer, _Component);
	
	    function MeshRenderer() {
	        _classCallCheck(this, MeshRenderer);
	
	        return _possibleConstructorReturn(this, (MeshRenderer.__proto__ || Object.getPrototypeOf(MeshRenderer)).apply(this, arguments));
	    }
	
	    _createClass(MeshRenderer, [{
	        key: "getRenderingPriorty",
	        value: function getRenderingPriorty(camera, cameraMoved, lastPriorty) {
	            return this._materialContainer.getDrawPriorty(camera.transform.globalPosition.addWith(this._geometry.aabb.Center).subtractWith(this._transformComponent.globalPosition).magnitude); // Obtains distance between camera and center of aabb
	        }
	    }, {
	        key: "$awake",
	        value: function $awake() {
	            this.getAttributeRaw("targetBuffer").boundTo("_targetBuffer");
	            this.getAttributeRaw("layer").boundTo("_layer");
	            this.getAttributeRaw("drawOffset").boundTo("_drawOffset");
	            this.getAttributeRaw("drawCount").boundTo("_drawCount");
	            this.getAttributeRaw("geometry").boundTo("_geometry");
	        }
	    }, {
	        key: "$mount",
	        value: function $mount() {
	            this._transformComponent = this.node.getComponent(_TransformComponent2.default);
	            this._materialContainer = this.node.getComponent(_MaterialContainerComponent2.default);
	            this._containedScene = MeshRenderer._findContainedScene(this.node);
	            this._containedScene.queueRegistory.addRenderable(this);
	        }
	    }, {
	        key: "$unmount",
	        value: function $unmount() {
	            this._containedScene.queueRegistory.removeRenderable(this);
	        }
	    }, {
	        key: "render",
	        value: function render(args) {
	            if (!this.node.isActive || !this.enabled || this._layer !== args.layer) {
	                return;
	            }
	            if (!this._geometry || !args.material && !this._materialContainer.ready) {
	                return; // material is not instanciated yet.
	            }
	            var renderArgs = {
	                targetBuffer: this._targetBuffer,
	                geometry: this._geometry,
	                attributeValues: null,
	                camera: args.camera,
	                transform: this._transformComponent,
	                buffers: args.buffers,
	                viewport: args.viewport,
	                drawCount: this._drawCount,
	                drawOffset: this._drawOffset,
	                sceneDescription: args.sceneDescription,
	                defaultTexture: args.defaultTexture
	            };
	            if (args.material) {
	                renderArgs.attributeValues = args.materialArgs;
	                args.material.draw(renderArgs);
	            } else {
	                renderArgs.attributeValues = this._materialContainer.materialArgs;
	                this._materialContainer.material.draw(renderArgs);
	            }
	            this.node.emit("render", args);
	        }
	    }], [{
	        key: "_findContainedScene",
	
	        /**
	        * Find scene tag recursively.
	        * @param  {GomlNode}       node [the node to searching currently]
	        * @return {SceneComponent}      [the scene component found]
	        */
	        value: function _findContainedScene(node) {
	            if (node.parent) {
	                var scene = node.parent.getComponent(_SceneComponent2.default);
	                if (scene) {
	                    return scene;
	                } else {
	                    return MeshRenderer._findContainedScene(node.parent);
	                }
	            } else {
	                return null;
	            }
	        }
	    }]);
	
	    return MeshRenderer;
	}(_Component3.default);
	
	exports.default = MeshRenderer;
	
	MeshRenderer.attributes = {
	    geometry: {
	        converter: "Geometry",
	        default: "quad"
	    },
	    targetBuffer: {
	        converter: "String",
	        default: "default"
	    },
	    layer: {
	        converter: "String",
	        default: "default"
	    },
	    drawCount: {
	        converter: "Number",
	        default: Number.MAX_VALUE
	    },
	    drawOffset: {
	        converter: "Number",
	        default: 0
	    }
	};

/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Vector = __webpack_require__(9);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	var _Quaternion = __webpack_require__(20);
	
	var _Quaternion2 = _interopRequireDefault(_Quaternion);
	
	var _Matrix = __webpack_require__(10);
	
	var _Matrix2 = _interopRequireDefault(_Matrix);
	
	var _TransformComponent = __webpack_require__(19);
	
	var _TransformComponent2 = _interopRequireDefault(_TransformComponent);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var MouseCameraControlComponent = function (_Component) {
	    _inherits(MouseCameraControlComponent, _Component);
	
	    function MouseCameraControlComponent() {
	        _classCallCheck(this, MouseCameraControlComponent);
	
	        var _this = _possibleConstructorReturn(this, (MouseCameraControlComponent.__proto__ || Object.getPrototypeOf(MouseCameraControlComponent)).apply(this, arguments));
	
	        _this._lastScreenPos = null;
	        _this._xsum = 0;
	        _this._ysum = 0;
	        _this._center = 0;
	        return _this;
	    }
	
	    _createClass(MouseCameraControlComponent, [{
	        key: "$awake",
	        value: function $awake() {
	            this.getAttributeRaw("center").boundTo("_center");
	            this.getAttributeRaw("rotateSpeed").boundTo("_rotateSpeed");
	            this.getAttributeRaw("zoomSpeed").boundTo("_zoomSpeed");
	            this.getAttributeRaw("moveSpeed").boundTo("_moveSpeed");
	            this.getAttributeRaw("origin").boundTo("_origin");
	            this._transform = this.node.getComponent(_TransformComponent2.default);
	        }
	    }, {
	        key: "$mount",
	        value: function $mount() {
	            this._initialRight = _Vector2.default.copy(this._transform.right);
	            this._initialUp = _Vector2.default.copy(this._transform.up);
	            this._initialDirection = this._transform.localPosition.subtractWith(this._origin);
	            this._initialRotation = this._transform.localRotation;
	            this._origin = this._transform.localPosition.addWith(this._transform.forward.multiplyWith(this._center));
	            var scriptTag = this.companion.get("canvasElement");
	            scriptTag.addEventListener("mousemove", this._mouseMove.bind(this));
	            scriptTag.addEventListener("contextmenu", this._contextMenu.bind(this));
	            scriptTag.addEventListener("mousewheel", this._mouseWheel.bind(this));
	        }
	    }, {
	        key: "_contextMenu",
	        value: function _contextMenu(m) {
	            m.preventDefault();
	        }
	    }, {
	        key: "_mouseMove",
	        value: function _mouseMove(m) {
	            if (this._lastScreenPos === null) {
	                this._lastScreenPos = {
	                    x: m.screenX,
	                    y: m.screenY
	                };
	                return;
	            }
	            var updated = false;
	            var diffX = m.screenX - this._lastScreenPos.x;
	            var diffY = m.screenY - this._lastScreenPos.y;
	            var distance = this._transform.localPosition.subtractWith(this._origin).magnitude;
	            if ((m.buttons & 1) > 0) {
	                this._xsum += diffX;
	                this._ysum += diffY;
	                this._ysum = Math.min(Math.PI * 50, this._ysum);
	                this._ysum = Math.max(-Math.PI * 50, this._ysum);
	                updated = true;
	            }
	            if ((m.buttons & 2) > 0) {
	                var moveX = -diffX * this._moveSpeed * 0.01;
	                var moveY = diffY * this._moveSpeed * 0.01;
	                this._origin = this._origin.addWith(this._transform.right.multiplyWith(moveX)).addWith(this._transform.up.multiplyWith(moveY));
	                distance = this._transform.localPosition.subtractWith(this._origin).magnitude;
	                updated = true;
	            }
	            if (updated) {
	                // rotate excution
	                var rotationVartical = _Quaternion2.default.angleAxis(-this._xsum * this._rotateSpeed * 0.01, this._initialUp);
	                var rotationHorizontal = _Quaternion2.default.angleAxis(-this._ysum * this._rotateSpeed * 0.01, this._initialRight);
	                var rotation = _Quaternion2.default.multiply(rotationVartical, rotationHorizontal);
	                var rotationMat = _Matrix2.default.rotationQuaternion(rotation);
	                var direction = _Matrix2.default.transformNormal(rotationMat, this._initialDirection);
	                this._transform.localPosition = this._origin.addWith(_Vector2.default.normalize(direction).multiplyWith(distance));
	                this._transform.localRotation = _Quaternion2.default.multiply(this._initialRotation, rotation);
	            }
	            this._lastScreenPos = {
	                x: m.screenX,
	                y: m.screenY
	            };
	        }
	    }, {
	        key: "_mouseWheel",
	        value: function _mouseWheel(m) {
	            var dir = _Vector2.default.normalize(_Vector2.default.subtract(this._transform.localPosition, this._origin));
	            var moveDist = -m.deltaY * this._zoomSpeed * 0.05;
	            var distance = _Vector2.default.subtract(this._origin, this._transform.localPosition).magnitude;
	            var nextDist = Math.max(1, distance - moveDist);
	            this._transform.localPosition = this._origin.addWith(dir.multiplyWith(nextDist));
	            m.preventDefault();
	        }
	    }]);
	
	    return MouseCameraControlComponent;
	}(_Component3.default);
	
	exports.default = MouseCameraControlComponent;
	
	MouseCameraControlComponent.attributes = {
	    rotateSpeed: {
	        default: 1,
	        converter: "Number"
	    },
	    zoomSpeed: {
	        default: 1,
	        converter: "Number"
	    },
	    moveSpeed: {
	        default: 1,
	        converter: "Number"
	    },
	    center: {
	        default: 20,
	        converter: "Number"
	    },
	    origin: {
	        default: "0,0,0",
	        converter: "Vector3"
	    }
	};

/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _RenderBuffer = __webpack_require__(68);
	
	var _RenderBuffer2 = _interopRequireDefault(_RenderBuffer);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	var _TextureSizeCalculator = __webpack_require__(69);
	
	var _TextureSizeCalculator2 = _interopRequireDefault(_TextureSizeCalculator);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var RenderBufferComponent = function (_Component) {
	    _inherits(RenderBufferComponent, _Component);
	
	    function RenderBufferComponent() {
	        _classCallCheck(this, RenderBufferComponent);
	
	        return _possibleConstructorReturn(this, (RenderBufferComponent.__proto__ || Object.getPrototypeOf(RenderBufferComponent)).apply(this, arguments));
	    }
	
	    _createClass(RenderBufferComponent, [{
	        key: "$mount",
	        value: function $mount() {
	            this.buffer = new _RenderBuffer2.default(this.companion.get("gl"));
	        }
	    }, {
	        key: "$unmount",
	        value: function $unmount() {
	            this.buffer.destroy();
	            this.buffer = null;
	        }
	    }, {
	        key: "$resizeBuffer",
	        value: function $resizeBuffer(arg) {
	            var name = this.getAttribute("name");
	            if (!name) {
	                throw new Error("Attribute 'name' must be specified.");
	            }
	            var newSize = _TextureSizeCalculator2.default.getPow2Size(arg.width, arg.height);
	            this.buffer.update(WebGLRenderingContext.DEPTH_COMPONENT16, newSize.width, newSize.height);
	            arg.bufferSizes[name] = { width: newSize.width, height: newSize.height };
	            arg.buffers[name] = this.buffer;
	        }
	    }]);
	
	    return RenderBufferComponent;
	}(_Component3.default);
	
	exports.default = RenderBufferComponent;
	
	RenderBufferComponent.attributes = {
	    name: {
	        converter: "String",
	        default: null
	    }
	};

/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _ResourceBase2 = __webpack_require__(26);
	
	var _ResourceBase3 = _interopRequireDefault(_ResourceBase2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var RenderBuffer = function (_ResourceBase) {
	    _inherits(RenderBuffer, _ResourceBase);
	
	    function RenderBuffer(gl) {
	        _classCallCheck(this, RenderBuffer);
	
	        var _this = _possibleConstructorReturn(this, (RenderBuffer.__proto__ || Object.getPrototypeOf(RenderBuffer)).call(this, gl));
	
	        _this.renderBuffer = gl.createRenderbuffer();
	        return _this;
	    }
	
	    _createClass(RenderBuffer, [{
	        key: "update",
	        value: function update(format, width, height) {
	            this.gl.bindRenderbuffer(WebGLRenderingContext.RENDERBUFFER, this.renderBuffer);
	            this.gl.renderbufferStorage(WebGLRenderingContext.RENDERBUFFER, format, width, height);
	            this.valid = true;
	        }
	    }, {
	        key: "bind",
	        value: function bind() {
	            this.gl.bindRenderbuffer(WebGLRenderingContext.RENDERBUFFER, this.renderBuffer);
	        }
	    }, {
	        key: "destroy",
	        value: function destroy() {
	            this.gl.deleteRenderbuffer(this.renderBuffer);
	            _get(RenderBuffer.prototype.__proto__ || Object.getPrototypeOf(RenderBuffer.prototype), "destroy", this).call(this);
	        }
	    }]);
	
	    return RenderBuffer;
	}(_ResourceBase3.default);
	
	exports.default = RenderBuffer;

/***/ },
/* 69 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var TextureSizeCalculator = function () {
	    function TextureSizeCalculator() {
	        _classCallCheck(this, TextureSizeCalculator);
	    }
	
	    _createClass(TextureSizeCalculator, null, [{
	        key: "getPow2Size",
	        value: function getPow2Size(width, height) {
	            var nw = Math.pow(2, Math.log(width) / Math.LN2 | 0); // largest 2^n integer that does not exceed s
	            var nh = Math.pow(2, Math.log(height) / Math.LN2 | 0); // largest 2^n integer that does not exceed s
	            return {
	                width: nw,
	                height: nh
	            };
	        }
	    }]);
	
	    return TextureSizeCalculator;
	}();
	
	exports.default = TextureSizeCalculator;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var RendererComponent = function (_Component) {
	    _inherits(RendererComponent, _Component);
	
	    function RendererComponent() {
	        _classCallCheck(this, RendererComponent);
	
	        var _this = _possibleConstructorReturn(this, (RendererComponent.__proto__ || Object.getPrototypeOf(RendererComponent)).apply(this, arguments));
	
	        _this._buffers = {};
	        _this._bufferSizes = {};
	        return _this;
	    }
	
	    _createClass(RendererComponent, [{
	        key: "$mount",
	        value: function $mount() {
	            var _this2 = this;
	
	            this._gl = this.companion.get("gl");
	            this._canvas = this.companion.get("canvasElement");
	            this._camera = this.getAttribute("camera");
	            this.getAttributeRaw("camera").watch(function (v) {
	                return _this2._camera = v;
	            });
	            this.getAttributeRaw("viewport").watch(function (v) {
	                _this2._viewportSizeGenerator = v;
	                _this2.$resizeCanvas();
	            });
	            this._viewportSizeGenerator = this.getAttribute("viewport");
	        }
	    }, {
	        key: "$treeInitialized",
	        value: function $treeInitialized() {
	            // This should be called after mounting all of tree nodes in children
	            this.$resizeCanvas();
	        }
	    }, {
	        key: "$resizeCanvas",
	        value: function $resizeCanvas() {
	            this._viewportCache = this._viewportSizeGenerator(this._canvas);
	            if (this.node.children.length === 0) {
	                this.node.addChildByName("render-scene", {});
	            }
	            this.node.broadcastMessage("resizeBuffer", {
	                width: this._viewportCache.Width,
	                height: this._viewportCache.Height,
	                buffers: this._buffers,
	                bufferSizes: this._bufferSizes
	            });
	            this.node.broadcastMessage("bufferUpdated", {
	                buffers: this._buffers,
	                bufferSizes: this._bufferSizes
	            });
	        }
	    }, {
	        key: "$renderViewport",
	        value: function $renderViewport(args) {
	            this.node.broadcastMessage("render", {
	                camera: this._camera,
	                viewport: this._viewportCache,
	                bufferSizes: this._bufferSizes,
	                buffers: this._buffers,
	                loopIndex: args.loopIndex
	            });
	        }
	    }]);
	
	    return RendererComponent;
	}(_Component3.default);
	
	exports.default = RendererComponent;
	
	RendererComponent.attributes = {
	    camera: {
	        converter: "Component",
	        default: "camera",
	        target: "Camera"
	    },
	    viewport: {
	        converter: "Viewport",
	        default: "auto"
	    }
	};

/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Color = __webpack_require__(72);
	
	var _Color2 = _interopRequireDefault(_Color);
	
	var _LoopManagerComponent = __webpack_require__(34);
	
	var _LoopManagerComponent2 = _interopRequireDefault(_LoopManagerComponent);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var RendererManagerComponent = function (_Component) {
	    _inherits(RendererManagerComponent, _Component);
	
	    function RendererManagerComponent() {
	        _classCallCheck(this, RendererManagerComponent);
	
	        return _possibleConstructorReturn(this, (RendererManagerComponent.__proto__ || Object.getPrototypeOf(RendererManagerComponent)).apply(this, arguments));
	    }
	
	    _createClass(RendererManagerComponent, [{
	        key: "$awake",
	        value: function $awake() {
	            this.getAttributeRaw("bgColor").boundTo("_bgColor");
	            this.getAttributeRaw("clearDepth").boundTo("_clearDepth");
	        }
	    }, {
	        key: "$mount",
	        value: function $mount() {
	            this.gl = this.companion.get("gl");
	        }
	    }, {
	        key: "$treeInitialized",
	        value: function $treeInitialized() {
	            this.node.getComponent(_LoopManagerComponent2.default).register(this.onloop.bind(this), 1000);
	            if (this.getAttribute("complementRenderer") && this.node.getChildrenByNodeName("renderer").length === 0) {
	                this.node.addChildByName("renderer", {});
	            }
	        }
	    }, {
	        key: "onloop",
	        value: function onloop(loopIndex) {
	            if (this.enabled) {
	                var c = this._bgColor;
	                this.gl.clearColor(c.R, c.G, c.B, c.A);
	                this.gl.clearDepth(this._clearDepth);
	                this.gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT | WebGLRenderingContext.DEPTH_BUFFER_BIT);
	                this.node.broadcastMessage(1, "renderViewport", { loopIndex: loopIndex });
	            }
	        }
	    }]);
	
	    return RendererManagerComponent;
	}(_Component3.default);
	
	exports.default = RendererManagerComponent;
	
	RendererManagerComponent.attributes = {
	    bgColor: {
	        default: new _Color2.default(0, 0, 0, 0),
	        converter: "Color4"
	    },
	    clearDepth: {
	        default: 1.0,
	        converter: "Number"
	    },
	    complementRenderer: {
	        default: true,
	        converter: "Boolean"
	    }
	};

/***/ },
/* 72 */
/***/ function(module, exports) {

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});exports.default=window.GrimoireJS.lib.math.Color4;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _MaterialContainerComponent = __webpack_require__(42);
	
	var _MaterialContainerComponent2 = _interopRequireDefault(_MaterialContainerComponent);
	
	var _FrameBuffer = __webpack_require__(74);
	
	var _FrameBuffer2 = _interopRequireDefault(_FrameBuffer);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var RenderQuadComponent = function (_Component) {
	    _inherits(RenderQuadComponent, _Component);
	
	    function RenderQuadComponent() {
	        _classCallCheck(this, RenderQuadComponent);
	
	        return _possibleConstructorReturn(this, (RenderQuadComponent.__proto__ || Object.getPrototypeOf(RenderQuadComponent)).apply(this, arguments));
	    }
	
	    _createClass(RenderQuadComponent, [{
	        key: "$awake",
	        value: function $awake() {
	            this.getAttributeRaw("targetBuffer").boundTo("_targetBuffer");
	            this.getAttributeRaw("clearColor").boundTo("_clearColor");
	            this.getAttributeRaw("clearColorEnabled").boundTo("_clearColorEnabled");
	            this.getAttributeRaw("clearDepthEnabled").boundTo("_clearDepthEnabled");
	            this.getAttributeRaw("clearDepth").boundTo("_clearDepth");
	        }
	    }, {
	        key: "$mount",
	        value: function $mount() {
	            this._gl = this.companion.get("gl");
	            this._canvas = this.companion.get("canvasElement");
	            var gr = this.companion.get("GeometryRegistory");
	            this._geom = gr.getGeometry("quad");
	            this._materialContainer = this.node.getComponent(_MaterialContainerComponent2.default);
	        }
	    }, {
	        key: "$bufferUpdated",
	        value: function $bufferUpdated(args) {
	            var out = this.getAttribute("out");
	            if (out !== "default") {
	                this._fbo = new _FrameBuffer2.default(this.companion.get("gl"));
	                this._fbo.update(args.buffers[out]);
	                this._fboSize = args.bufferSizes[out];
	            }
	            var depthBuffer = this.getAttribute("depthBuffer");
	            if (depthBuffer && this._fbo) {
	                this._fbo.update(args.buffers[depthBuffer]);
	            }
	        }
	    }, {
	        key: "$render",
	        value: function $render(args) {
	            if (!this._materialContainer.ready) {
	                return;
	            }
	            // bound render target
	            if (this._fbo) {
	                this._fbo.bind();
	                this._gl.viewport(0, 0, this._fboSize.width, this._fboSize.height);
	            } else {
	                this._gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null);
	                this._gl.viewport(args.viewport.Left, this._canvas.height - args.viewport.Bottom, args.viewport.Width, args.viewport.Height);
	            }
	            // clear buffer if needed
	            if (this._fbo && this._clearColorEnabled) {
	                this._gl.clearColor(this._clearColor.R, this._clearColor.G, this._clearColor.B, this._clearColor.A);
	                this._gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT);
	            }
	            if (this._clearDepthEnabled) {
	                this._gl.clearDepth(this._clearDepth);
	                this._gl.clear(WebGLRenderingContext.DEPTH_BUFFER_BIT);
	            }
	            // make rendering argument
	            var renderArgs = {
	                targetBuffer: this._targetBuffer,
	                geometry: this._geom,
	                attributeValues: {},
	                camera: null,
	                transform: null,
	                buffers: args.buffers,
	                viewport: args.viewport,
	                defaultTexture: this.companion.get("defaultTexture")
	            };
	            renderArgs.attributeValues = this._materialContainer.materialArgs;
	            // do render
	            this._materialContainer.material.draw(renderArgs);
	            this._gl.flush();
	        }
	    }]);
	
	    return RenderQuadComponent;
	}(_Component3.default);
	
	exports.default = RenderQuadComponent;
	
	RenderQuadComponent.attributes = {
	    out: {
	        default: "default",
	        converter: "String"
	    },
	    depthBuffer: {
	        default: null,
	        converter: "String"
	    },
	    targetBuffer: {
	        default: "default",
	        converter: "String"
	    },
	    clearColor: {
	        default: "#0000",
	        converter: "Color4"
	    },
	    clearColorEnabled: {
	        default: true,
	        converter: "Boolean"
	    },
	    clearDepthEnabled: {
	        default: true,
	        converter: "Boolean"
	    },
	    clearDepth: {
	        default: 1.0,
	        converter: "Number"
	    }
	};

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _RenderBuffer = __webpack_require__(68);
	
	var _RenderBuffer2 = _interopRequireDefault(_RenderBuffer);
	
	var _Texture2D = __webpack_require__(25);
	
	var _Texture2D2 = _interopRequireDefault(_Texture2D);
	
	var _ResourceBase2 = __webpack_require__(26);
	
	var _ResourceBase3 = _interopRequireDefault(_ResourceBase2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var FrameBuffer = function (_ResourceBase) {
	    _inherits(FrameBuffer, _ResourceBase);
	
	    function FrameBuffer(gl) {
	        _classCallCheck(this, FrameBuffer);
	
	        var _this = _possibleConstructorReturn(this, (FrameBuffer.__proto__ || Object.getPrototypeOf(FrameBuffer)).call(this, gl));
	
	        _this.fbo = gl.createFramebuffer();
	        return _this;
	    }
	
	    _createClass(FrameBuffer, [{
	        key: "update",
	        value: function update(boundTo, level, bindIndex) {
	            this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, this.fbo);
	            if (boundTo instanceof _Texture2D2.default) {
	                if (typeof bindIndex === "undefined") {
	                    bindIndex = 0;
	                }
	                if (typeof level === "undefined") {
	                    level = 0;
	                }
	                this.gl.framebufferTexture2D(WebGLRenderingContext.FRAMEBUFFER, WebGLRenderingContext.COLOR_ATTACHMENT0 + bindIndex, WebGLRenderingContext.TEXTURE_2D, boundTo.texture, level);
	                if (this.gl.checkFramebufferStatus(WebGLRenderingContext.FRAMEBUFFER) !== WebGLRenderingContext.FRAMEBUFFER_COMPLETE) {
	                    throw new Error("INCOMPLETE framebuffer");
	                }
	            } else if (boundTo instanceof _RenderBuffer2.default) {
	                var registerTarget = level;
	                if (typeof level === "undefined") {
	                    registerTarget = WebGLRenderingContext.DEPTH_ATTACHMENT;
	                }
	                this.gl.framebufferRenderbuffer(WebGLRenderingContext.FRAMEBUFFER, registerTarget, WebGLRenderingContext.RENDERBUFFER, boundTo.renderBuffer);
	            }
	            this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null);
	        }
	    }, {
	        key: "bind",
	        value: function bind() {
	            this.gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, this.fbo);
	        }
	    }, {
	        key: "destroy",
	        value: function destroy() {
	            _get(FrameBuffer.prototype.__proto__ || Object.getPrototypeOf(FrameBuffer.prototype), "destroy", this).call(this);
	            this.gl.deleteFramebuffer(this.fbo);
	        }
	    }]);
	
	    return FrameBuffer;
	}(_ResourceBase3.default);
	
	exports.default = FrameBuffer;

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	var _FrameBuffer = __webpack_require__(74);
	
	var _FrameBuffer2 = _interopRequireDefault(_FrameBuffer);
	
	var _MaterialContainerComponent = __webpack_require__(42);
	
	var _MaterialContainerComponent2 = _interopRequireDefault(_MaterialContainerComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var RenderSceneComponent = function (_Component) {
	    _inherits(RenderSceneComponent, _Component);
	
	    function RenderSceneComponent() {
	        _classCallCheck(this, RenderSceneComponent);
	
	        return _possibleConstructorReturn(this, (RenderSceneComponent.__proto__ || Object.getPrototypeOf(RenderSceneComponent)).apply(this, arguments));
	    }
	
	    _createClass(RenderSceneComponent, [{
	        key: "$awake",
	
	        // messages
	        value: function $awake() {
	            this.getAttributeRaw("layer").boundTo("_layer");
	            this.getAttributeRaw("clearColor").boundTo("_clearColor");
	            this.getAttributeRaw("clearColorEnabled").boundTo("_clearColorEnabled");
	            this.getAttributeRaw("clearDepthEnabled").boundTo("_clearDepthEnabled");
	            this.getAttributeRaw("clearDepth").boundTo("_clearDepth");
	            this.getAttributeRaw("camera").boundTo("_camera");
	        }
	    }, {
	        key: "$mount",
	        value: function $mount() {
	            this._gl = this.companion.get("gl");
	            this._canvas = this.companion.get("canvasElement");
	            this._materialContainer = this.node.getComponent(_MaterialContainerComponent2.default);
	        }
	    }, {
	        key: "$bufferUpdated",
	        value: function $bufferUpdated(args) {
	            var out = this.getAttribute("out");
	            if (out !== "default") {
	                this._fbo = new _FrameBuffer2.default(this.companion.get("gl"));
	                this._fbo.update(args.buffers[out]);
	                this._fboSize = args.bufferSizes[out];
	            }
	            var depthBuffer = this.getAttribute("depthBuffer");
	            if (depthBuffer && this._fbo) {
	                this._fbo.update(args.buffers[depthBuffer]);
	            }
	        }
	    }, {
	        key: "$render",
	        value: function $render(args) {
	            var camera = this._camera ? this._camera : args.camera;
	            if (!camera) {
	                return;
	            }
	            if (this._fbo) {
	                this._fbo.bind();
	                this._gl.viewport(0, 0, this._fboSize.width, this._fboSize.height);
	            } else {
	                this._gl.bindFramebuffer(WebGLRenderingContext.FRAMEBUFFER, null);
	                this._gl.viewport(args.viewport.Left, this._canvas.height - args.viewport.Bottom, args.viewport.Width, args.viewport.Height);
	            }
	            // clear buffer if needed
	            if (this._fbo && this._clearColorEnabled) {
	                this._gl.clearColor(this._clearColor.R, this._clearColor.G, this._clearColor.B, this._clearColor.A);
	                this._gl.clear(WebGLRenderingContext.COLOR_BUFFER_BIT);
	            }
	            if (this._clearDepthEnabled) {
	                this._gl.clearDepth(this._clearDepth);
	                this._gl.clear(WebGLRenderingContext.DEPTH_BUFFER_BIT);
	            }
	            args.camera.updateContainedScene(args.loopIndex);
	            var useMaterial = this._materialContainer.useMaterial;
	            args.camera.renderScene({
	                caller: this,
	                camera: camera,
	                buffers: args.buffers,
	                layer: this._layer,
	                viewport: args.viewport,
	                material: useMaterial ? this._materialContainer.material : undefined,
	                materialArgs: useMaterial ? this._materialContainer.material : undefined,
	                loopIndex: args.loopIndex
	            });
	        }
	    }]);
	
	    return RenderSceneComponent;
	}(_Component3.default);
	
	exports.default = RenderSceneComponent;
	
	RenderSceneComponent.attributes = {
	    layer: {
	        converter: "String",
	        default: "default"
	    },
	    depthBuffer: {
	        default: null,
	        converter: "String"
	    },
	    out: {
	        converter: "String",
	        default: "default"
	    },
	    clearColor: {
	        default: "#0000",
	        converter: "Color4"
	    },
	    clearColorEnabled: {
	        default: true,
	        converter: "Boolean"
	    },
	    clearDepthEnabled: {
	        default: true,
	        converter: "Boolean"
	    },
	    clearDepth: {
	        default: 1.0,
	        converter: "Number"
	    },
	    camera: {
	        default: null,
	        converter: "Component",
	        target: "Camera"
	    }
	};

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Texture2D = __webpack_require__(25);
	
	var _Texture2D2 = _interopRequireDefault(_Texture2D);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	var _TextureSizeCalculator = __webpack_require__(69);
	
	var _TextureSizeCalculator2 = _interopRequireDefault(_TextureSizeCalculator);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var TextureBufferComponent = function (_Component) {
	    _inherits(TextureBufferComponent, _Component);
	
	    function TextureBufferComponent() {
	        _classCallCheck(this, TextureBufferComponent);
	
	        return _possibleConstructorReturn(this, (TextureBufferComponent.__proto__ || Object.getPrototypeOf(TextureBufferComponent)).apply(this, arguments));
	    }
	
	    _createClass(TextureBufferComponent, [{
	        key: "$mount",
	        value: function $mount() {
	            this.buffer = new _Texture2D2.default(this.companion.get("gl"));
	        }
	    }, {
	        key: "$unmount",
	        value: function $unmount() {
	            this.buffer.destroy();
	            this.buffer = null;
	        }
	    }, {
	        key: "$resizeBuffer",
	        value: function $resizeBuffer(arg) {
	            var bufferName = this.getAttribute("name");
	            if (!bufferName) {
	                throw new Error("Attribute 'name' must be specified.");
	            }
	            var format = this.getAttribute("format");
	            var newSize = _TextureSizeCalculator2.default.getPow2Size(arg.width, arg.height);
	            this.buffer.update(0, newSize.width, newSize.height, 0, format, WebGLRenderingContext.UNSIGNED_BYTE, null);
	            arg.bufferSizes[bufferName] = { width: newSize.width, height: newSize.height };
	            arg.buffers[bufferName] = this.buffer;
	        }
	    }]);
	
	    return TextureBufferComponent;
	}(_Component3.default);
	
	exports.default = TextureBufferComponent;
	
	TextureBufferComponent.attributes = {
	    name: {
	        converter: "String",
	        default: null
	    },
	    format: {
	        converter: "Enum",
	        default: WebGLRenderingContext.RGBA,
	        table: {
	            RGBA: WebGLRenderingContext.RGBA,
	            RGB: WebGLRenderingContext.RGB,
	            ALPHA: WebGLRenderingContext.ALPHA,
	            LUMINANCE: WebGLRenderingContext.LUMINANCE,
	            LUMINANCE_ALPHA: WebGLRenderingContext.LUMINANCE_ALPHA,
	            SRGB_EXT: WebGLRenderingContext["SRGB_EXT"],
	            SRGB_ALPHA_EXT: WebGLRenderingContext["SRGB_ALPHA_EXT"],
	            DEPTH_COMPONENT: WebGLRenderingContext["DEPTH_COMPONENT"],
	            DEPTH_STENCIL: WebGLRenderingContext["DEPTH_STENCIL"]
	        }
	    }
	};

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Texture2D = __webpack_require__(25);
	
	var _Texture2D2 = _interopRequireDefault(_Texture2D);
	
	var _Component2 = __webpack_require__(15);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	var _ImageResolver = __webpack_require__(5);
	
	var _ImageResolver2 = _interopRequireDefault(_ImageResolver);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	
	var TextureComponent = function (_Component) {
	    _inherits(TextureComponent, _Component);
	
	    function TextureComponent() {
	        _classCallCheck(this, TextureComponent);
	
	        return _possibleConstructorReturn(this, (TextureComponent.__proto__ || Object.getPrototypeOf(TextureComponent)).apply(this, arguments));
	    }
	
	    _createClass(TextureComponent, [{
	        key: "$mount",
	        value: function $mount() {
	            var _this2 = this;
	
	            var src = this.getAttribute("src");
	            this.texture = new _Texture2D2.default(this.companion.get("gl"));
	            this.texture.magFilter = this.getAttribute("magFilter");
	            this.texture.minFilter = this.getAttribute("minFilter");
	            this.texture.wrapT = this.getAttribute("wrapT");
	            this.texture.wrapS = this.getAttribute("wrapS");
	            this.getAttributeRaw("magFilter").watch(function (v) {
	                return _this2.texture.magFilter = v;
	            });
	            this.getAttributeRaw("minFilter").watch(function (v) {
	                return _this2.texture.minFilter = v;
	            });
	            this.getAttributeRaw("wrapS").watch(function (v) {
	                return _this2.texture.wrapS = v;
	            });
	            this.getAttributeRaw("wrapT").watch(function (v) {
	                return _this2.texture.wrapT = v;
	            });
	            if (src) {
	                this._loadTask(src);
	            }
	        }
	    }, {
	        key: "_loadTask",
	        value: function _loadTask(src) {
	            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	                var img;
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                _context.next = 2;
	                                return _ImageResolver2.default.resolve(src);
	
	                            case 2:
	                                img = _context.sent;
	
	                                this.texture.update(img);
	
	                            case 4:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, this);
	            }));
	        }
	    }]);
	
	    return TextureComponent;
	}(_Component3.default);
	
	exports.default = TextureComponent;
	
	TextureComponent.attributes = {
	    src: {
	        converter: "String",
	        default: null
	    },
	    minFilter: {
	        converter: "Enum",
	        default: "LINEAR",
	        table: {
	            LINEAR: WebGLRenderingContext.LINEAR,
	            NEAREST: WebGLRenderingContext.NEAREST,
	            NEAREST_MIPMAP_NEAREST: WebGLRenderingContext.NEAREST_MIPMAP_NEAREST,
	            NEAREST_MIPMAP_LINEAR: WebGLRenderingContext.NEAREST_MIPMAP_LINEAR,
	            LINEAR_MIPMAP_NEAREST: WebGLRenderingContext.LINEAR_MIPMAP_NEAREST,
	            LINEAR_MIPMAP_LINEAR: WebGLRenderingContext.LINEAR_MIPMAP_LINEAR
	        }
	    },
	    magFilter: {
	        converter: "Enum",
	        default: "LINEAR",
	        table: {
	            LINEAR: WebGLRenderingContext.LINEAR,
	            NEAREST: WebGLRenderingContext.NEAREST
	        }
	    },
	    wrapS: {
	        converter: "Enum",
	        default: "REPEAT",
	        table: {
	            REPEAT: WebGLRenderingContext.REPEAT,
	            MIRRORED_REPEAT: WebGLRenderingContext.MIRRORED_REPEAT,
	            CLAMP_TO_EDGE: WebGLRenderingContext.CLAMP_TO_EDGE
	        }
	    },
	    wrapT: {
	        converter: "Enum",
	        default: "REPEAT",
	        table: {
	            REPEAT: WebGLRenderingContext.REPEAT,
	            MIRRORED_REPEAT: WebGLRenderingContext.MIRRORED_REPEAT,
	            CLAMP_TO_EDGE: WebGLRenderingContext.CLAMP_TO_EDGE
	        }
	    }
	};

/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _RotationParser = __webpack_require__(79);
	
	var _RotationParser2 = _interopRequireDefault(_RotationParser);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function Angle2DConverter(val) {
	    if (typeof val === "number") {
	        return val;
	    }
	    if (typeof val === "string") {
	        return _RotationParser2.default.parseAngle(val);
	    }
	    throw new Error("Passed argument \"" + val + "\" can't be parsed as angle.");
	}
	exports.default = Angle2DConverter;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Vector = __webpack_require__(9);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	var _Quaternion = __webpack_require__(20);
	
	var _Quaternion2 = _interopRequireDefault(_Quaternion);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Utility class to parse the arguments of attributes.
	 */
	var RotationParser = function () {
	    function RotationParser() {
	        _classCallCheck(this, RotationParser);
	    }
	
	    _createClass(RotationParser, null, [{
	        key: "parseAngle",
	
	        /**
	         * Parse angle strings.
	         * "p" means Pi. Ex) 3/4 p
	         * "d" means degree. if this unit was specified, the argument will be parsed as degree. Ex) 90d
	         * @param input the string to parse.
	         * @returns {number} parsed angle in radians.
	         */
	        value: function parseAngle(input) {
	            var regex = /^ *(-?[\de+-.]*) *(?:\/ *([\de+-.]*))? *(p|prad|deg|d|r|rad)? *$/gm;
	            var result = regex.exec(input);
	            if (result == null) {
	                throw new Error("faild parse Angle string:'" + input + "'");
	            }
	            var numerator = parseFloat(result[1]);
	            if (result[2]) {
	                numerator /= parseFloat(result[2]);
	            }
	            var unit = result[3];
	            if (unit == null) {
	                unit = "d";
	            }
	            if (unit === "r" || unit === "rad") {
	                return numerator;
	            }
	            if (unit === "p" || unit === "prad") {
	                return numerator * Math.PI;
	            }
	            return numerator / 180 * Math.PI;
	        }
	        /**
	         * Parse angle string in 3D.
	         * "p" means Pi. Ex) 3/4 p
	         * "d" means degree. if this unit was specified, the argument will be parsed as degree. Ex) 90d
	         * "eular(x,y,z)" means rotation in eular. This means Z-X-Y rotation like Unity.
	         * "axis(angle,x,y,z)" means rotation around specified axis. This means angle radians will be rotated around the axis (x,y,z).
	         * This angle can be specified with the character "p" or "d".
	         * "x(angle)","y(angle)" or "z(angle)" means rotation around unit axis.
	         * This angle can be specified with the character "p" or "d".
	         * @param input the string to be parsed as angle in 3D.
	         * @returns {Quaternion} parsed rotation in Quaternion.
	         */
	
	    }, {
	        key: "parseRotation3D",
	        value: function parseRotation3D(input) {
	            var reg1 = /^ *(x|y|z) *\(([^\(\)]+)\) *$/gm;
	            var reg2 = /^ *axis *\(([^\(\),]+),([^\(\),]+),([^\(\),]+),([^\(\),]+)\) *$/gm;
	            var reg3 = /^ *([^\(\),]+),([^\(\),]+),([^\(\),]+) *$/gm;
	            var result = reg1.exec(input);
	            if (result) {
	                if (result[1] === "x") {
	                    return _Quaternion2.default.angleAxis(RotationParser.parseAngle(result[2]), _Vector2.default.XUnit);
	                }
	                if (result[1] === "y") {
	                    return _Quaternion2.default.angleAxis(RotationParser.parseAngle(result[2]), _Vector2.default.YUnit);
	                }
	                if (result[1] === "z") {
	                    return _Quaternion2.default.angleAxis(RotationParser.parseAngle(result[2]), _Vector2.default.ZUnit);
	                }
	            }
	            var res2 = reg2.exec(input);
	            if (res2) {
	                var rotation = RotationParser.parseAngle(res2[1]);
	                var x = parseFloat(res2[2]);
	                var y = parseFloat(res2[3]);
	                var z = parseFloat(res2[4]);
	                return _Quaternion2.default.angleAxis(rotation, new _Vector2.default(x, y, z));
	            }
	            var res3 = reg3.exec(input);
	            if (res3) {
	                return _Quaternion2.default.euler(RotationParser.parseAngle(res3[1]), RotationParser.parseAngle(res3[2]), RotationParser.parseAngle(res3[3]));
	            }
	            throw new Error("Unknown format for rotation3D:'" + input + "'");
	        }
	    }]);
	
	    return RotationParser;
	}();
	
	exports.default = RotationParser;

/***/ },
/* 80 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	function BooleanConverter(val) {
	    if (typeof val === "boolean") {
	        return val;
	    } else if (typeof val === "string") {
	        switch (val) {
	            case "true":
	                return true;
	            case "false":
	                return false;
	            default:
	                throw new Error("Invalid string " + val + " for parsing as boolean");
	        }
	    }
	    throw new Error("Unsupported type to be parsed as boolean");
	}
	exports.default = BooleanConverter;

/***/ },
/* 81 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	function CanvasSizeConverter(val) {
	    if (val === "fit") {
	        return {
	            mode: "fit"
	        };
	    }
	    if (typeof val === "string") {
	        var matched = /aspect\(([\d+(?.\d*)?]+)\)/.exec(val);
	        if (matched) {
	            return {
	                mode: "aspect",
	                aspect: Number.parseFloat(matched[1])
	            };
	        }
	    }
	    return {
	        mode: "manual",
	        size: Number.parseFloat(val)
	    };
	}
	exports.default = CanvasSizeConverter;

/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Color = __webpack_require__(83);
	
	var _Color2 = _interopRequireDefault(_Color);
	
	var _Color3 = __webpack_require__(72);
	
	var _Color4 = _interopRequireDefault(_Color3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function Color3Converter(val) {
	    if (val instanceof _Color2.default) {
	        return val;
	    } else if (val instanceof _Color4.default) {
	        return new _Color2.default(val.R, val.G, val.B);
	    } else if (typeof val === "string") {
	        return _Color2.default.parse(val);
	    } else if (Array.isArray(val)) {
	        return new _Color2.default(val[0], val[1], val[2]);
	    } else {
	        throw new Error(val + " can not be parsed as Color4.");
	    }
	}
	exports.default = Color3Converter;

/***/ },
/* 83 */
/***/ function(module, exports) {

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});exports.default=window.GrimoireJS.lib.math.Color3;

/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Color = __webpack_require__(83);
	
	var _Color2 = _interopRequireDefault(_Color);
	
	var _Color3 = __webpack_require__(72);
	
	var _Color4 = _interopRequireDefault(_Color3);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function Color4Converter(val) {
	    if (val instanceof _Color4.default) {
	        return val;
	    } else if (val instanceof _Color2.default) {
	        return new _Color4.default(val.R, val.G, val.B, 1.0);
	    } else if (typeof val === "string") {
	        return _Color4.default.parse(val);
	    } else if (Array.isArray(val)) {
	        return new _Color4.default(val[0], val[1], val[2], val[3]);
	    } else {
	        throw new Error(val + " can not be parsed as Color4.");
	    }
	}
	exports.default = Color4Converter;

/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Component = __webpack_require__(15);
	
	var _Component2 = _interopRequireDefault(_Component);
	
	var _GomlNode = __webpack_require__(86);
	
	var _GomlNode2 = _interopRequireDefault(_GomlNode);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function ComponentConverter(val) {
	    if (!this.declaration["target"]) {
	        throw new Error("Component converter require to be specified target");
	    }
	    if (val === null) {
	        return null;
	    }
	    if (val instanceof _GomlNode2.default) {
	        return val.getComponent(this.declaration["target"]);
	    } else if (val instanceof _Component2.default) {
	        if (val.name === this.declaration["target"]) {
	            return val; // check component type?
	        } else {
	            throw new Error("Specified component must be " + this.declaration["target"]);
	        }
	    } else {
	        var n = this.tree(val).first();
	        if (n) {
	            return n.getComponent(this.declaration["target"]);
	        }
	        return null;
	    }
	}
	exports.default = ComponentConverter;

/***/ },
/* 86 */
/***/ function(module, exports) {

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});exports.default=window.GrimoireJS.Node.GomlNode;

/***/ },
/* 87 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	function EnumConverter(val) {
	    if (!this.declaration["table"]) {
	        throw new Error("Enum converter needs to be specified table in attribute dictionary");
	    }
	    if (typeof val === "number") {
	        return val;
	    }
	    if (typeof val === "string") {
	        var result = this.declaration["table"][val];
	        if (!result) {
	            throw new Error("Specified value is not exisiting in the relation table");
	        } else {
	            return result;
	        }
	    }
	}
	exports.default = EnumConverter;

/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Geometry = __webpack_require__(89);
	
	var _Geometry2 = _interopRequireDefault(_Geometry);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function GeometryConverter(val) {
	    if (typeof val === "string") {
	        return this.companion.get("GeometryRegistory").getGeometry(val);
	    } else if (val instanceof _Geometry2.default) {
	        return val;
	    }
	    throw new Error("Specified geometry \"" + val + "\" is not supported for converting into geometry.");
	}
	exports.default = GeometryConverter;

/***/ },
/* 89 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * The geometry class for managing buffer resource
	 */
	var Geometry = function () {
	    function Geometry(vertices, attribInfo, indices, aabb) {
	        _classCallCheck(this, Geometry);
	
	        this.vertices = vertices;
	        this.attribInfo = attribInfo;
	        this.indices = indices;
	        this.aabb = aabb;
	        // check all buffers requested by attribute variables are all contained in vertices
	        for (var attrKey in attribInfo) {
	            if (vertices[attribInfo[attrKey].bufferName] === void 0) {
	                throw new Error("The buffer request by " + attribInfo[attrKey].bufferName + " is not contained in geometry.");
	            }
	        }
	    }
	
	    _createClass(Geometry, [{
	        key: "drawByDefault",
	        value: function drawByDefault(indexName, attribNames, program) {
	            var _this = this;
	
	            var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Number.MAX_VALUE;
	            var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
	
	            attribNames.forEach(function (name) {
	                Geometry.bindBufferToAttribute(_this, program, name, name);
	            });
	            Geometry.drawWithCurrentVertexBuffer(this, program, indexName, count, offset);
	        }
	        /**
	         * bind a vertex buffer to specified attribute variable.
	         * @param  {Geometry} geometry      [description]
	         * @param  {Program}  program       [description]
	         * @param  {string}   attributeName [description]
	         * @param  {string}   bufferName    [description]
	         * @return {boolean}                [description]
	         */
	
	    }], [{
	        key: "bindBufferToAttribute",
	        value: function bindBufferToAttribute(geometry, program, attributeName, bufferName) {
	            var index = program.findAttributeLocation(attributeName);
	            if (index < 0) {
	                return false;
	            }
	            var attribInfo = geometry.attribInfo[bufferName];
	            if (!attribInfo) {
	                throw new Error("Specified buffer \"" + bufferName + " was not found on this geometry while attempt to bind \"" + attributeName + "\" of attribute variables.\n\n\t  All of the vertex buffer available on this geometry is " + Object.keys(geometry.attribInfo) + "\"");
	            }
	            var buffer = geometry.vertices[attribInfo.bufferName];
	            buffer.bind();
	            program.gl.vertexAttribPointer(index, attribInfo.size, attribInfo.type, false, attribInfo.stride, attribInfo.offset);
	            return true;
	        }
	    }, {
	        key: "drawWithCurrentVertexBuffer",
	        value: function drawWithCurrentVertexBuffer(geometry, program, indexName) {
	            var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : Number.MAX_VALUE;
	            var offset = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 0;
	
	            var targetIndex = geometry.indices[indexName];
	            if (targetIndex === void 0) {
	                throw new Error("Specified index buffer \"" + indexName + "\" was not found on this geometry.All of the index buffer available on this geometry is \"" + Object.keys(geometry.indices) + "\"");
	            }
	            targetIndex.index.bind();
	            program.gl.drawElements(targetIndex.topology, Math.min(targetIndex.count, count), targetIndex.type, Math.min(offset * targetIndex.byteSize + targetIndex.byteOffset, (targetIndex.count - 1) * targetIndex.byteSize));
	        }
	    }]);
	
	    return Geometry;
	}();
	
	exports.default = Geometry;
	
	Geometry._lastGeometry = new Map();

/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _MaterialComponent = __webpack_require__(35);
	
	var _MaterialComponent2 = _interopRequireDefault(_MaterialComponent);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function MaterialConverter(val) {
	    if (typeof val === "string") {
	        var regex = /\s*new\s*\(\s*([a-zA-Z\d\-]+)\s*\)/;
	        var regexResult = void 0;
	        if (regexResult = regex.exec(val)) {
	            this.component[this.declaration["componentBoundTo"]] = null;
	            return this.companion.get("MaterialFactory").instanciate(regexResult[1]);
	        } else {
	            var mc = this.tree(val).single().getComponent(_MaterialComponent2.default);
	            this.component[this.declaration["componentBoundTo"]] = mc;
	            return mc.materialPromise;
	        }
	    }
	    return null; // TODO ??
	}
	exports.default = MaterialConverter;

/***/ },
/* 91 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	function NumberArrayConverter(val) {
	    if (val instanceof Array) {
	        return val;
	    }
	    if (typeof val === "string") {
	        var splitted = val.split(",");
	        return splitted.map(function (s) {
	            return Number.parseFloat(s);
	        });
	    }
	}
	exports.default = NumberArrayConverter;

/***/ },
/* 92 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	function NumberConverter(val) {
	    if (typeof val === "number") {
	        return val;
	    } else if (typeof val === "string") {
	        return Number.parseFloat(val);
	    }
	    throw new Error("Unsupported input to convert into number!");
	}
	exports.default = NumberConverter;

/***/ },
/* 93 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	function ObjectConverter(val) {
	    return val;
	}
	exports.default = ObjectConverter;

/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _RotationParser = __webpack_require__(79);
	
	var _RotationParser2 = _interopRequireDefault(_RotationParser);
	
	var _Quaternion = __webpack_require__(20);
	
	var _Quaternion2 = _interopRequireDefault(_Quaternion);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function Rotation3Converter(val) {
	    if (val instanceof _Quaternion2.default) {
	        return val;
	    } else if (Array.isArray(val)) {
	        return new _Quaternion2.default([val[0], val[1], val[2], val[3]]);
	    }
	    return _RotationParser2.default.parseRotation3D(val);
	}
	exports.default = Rotation3Converter;

/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _TextureComponent = __webpack_require__(77);
	
	var _TextureComponent2 = _interopRequireDefault(_TextureComponent);
	
	var _TextureReference = __webpack_require__(96);
	
	var _TextureReference2 = _interopRequireDefault(_TextureReference);
	
	var _Texture2D = __webpack_require__(25);
	
	var _Texture2D2 = _interopRequireDefault(_Texture2D);
	
	var _ImageResolver = __webpack_require__(5);
	
	var _ImageResolver2 = _interopRequireDefault(_ImageResolver);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function updateVideo(tex, video) {
	    tex.update(video);
	    requestAnimationFrame(function () {
	        return updateVideo(tex, video);
	    });
	}
	function _parseQuery(query) {
	    var regex = /(query|backbuffer|video)\((.+)\)[^\)]*$/;
	    var regexResult = void 0;
	    if (regexResult = regex.exec(query)) {
	        return {
	            type: regexResult[1],
	            param: regexResult[2]
	        };
	    }
	    return null;
	}
	function generateVideoTag(src) {
	    var vTag = document.createElement("video");
	    vTag.src = src;
	    return vTag;
	}
	function fromVideoTexture(gl, val) {
	    var tex = new _Texture2D2.default(gl);
	    val.play();
	    tex.update(val);
	    updateVideo(tex, val);
	    return tex;
	}
	function TextureConverter(val) {
	    var _this = this;
	
	    if (val instanceof _Texture2D2.default) {
	        return new _TextureReference2.default(val);
	    }
	    if (typeof val === "string") {
	        var parseResult = _parseQuery(val);
	        if (parseResult) {
	            var _ret = function () {
	                var param = parseResult.param;
	
	                var _ret2 = function () {
	                    switch (parseResult.type) {
	                        case "backbuffer":
	                            return {
	                                v: {
	                                    v: new _TextureReference2.default(function (buffers) {
	                                        return buffers[param];
	                                    })
	                                }
	                            };
	                        case "video":
	                            return {
	                                v: {
	                                    v: new _TextureReference2.default(fromVideoTexture(_this.companion.get("gl"), generateVideoTag(param)))
	                                }
	                            };
	                        case "query":
	                            var obtainedTag = _this.tree(param);
	                            var texture = obtainedTag.first().getComponent(_TextureComponent2.default);
	                            return {
	                                v: {
	                                    v: new _TextureReference2.default(function () {
	                                        return texture.texture;
	                                    })
	                                }
	                            };
	                    }
	                }();
	
	                if ((typeof _ret2 === "undefined" ? "undefined" : _typeof(_ret2)) === "object") return _ret2.v;
	            }();
	
	            if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
	        } else {
	            var _ret3 = function () {
	                var tex = new _Texture2D2.default(_this.companion.get("gl"));
	                _ImageResolver2.default.resolve(val).then(function (t) {
	                    tex.update(t);
	                });
	                _this.companion.get("loader").register(tex.validPromise);
	                return {
	                    v: new _TextureReference2.default(tex)
	                };
	            }();
	
	            if ((typeof _ret3 === "undefined" ? "undefined" : _typeof(_ret3)) === "object") return _ret3.v;
	        }
	    }
	    if ((typeof val === "undefined" ? "undefined" : _typeof(val)) === "object") {
	        if (val instanceof HTMLImageElement) {
	            var _ret4 = function () {
	                var tex = new _Texture2D2.default(_this.companion.get("gl"));
	                if (val.complete && val.naturalWidth) {
	                    tex.update(val);
	                } else {
	                    val.onload = function () {
	                        tex.update(val);
	                    };
	                }
	                return {
	                    v: new _TextureReference2.default(tex)
	                };
	            }();
	
	            if ((typeof _ret4 === "undefined" ? "undefined" : _typeof(_ret4)) === "object") return _ret4.v;
	        } else if (val instanceof HTMLCanvasElement) {
	            var _tex = new _Texture2D2.default(this.companion.get("gl"));
	            _tex.update(val);
	            return new _TextureReference2.default(_tex);
	        } else if (val instanceof HTMLVideoElement) {
	            return new _TextureReference2.default(fromVideoTexture(this.companion.get("gl"), val));
	        }
	    }
	    return null;
	}
	exports.default = TextureConverter;

/***/ },
/* 96 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Proxy of texture reference
	 */
	var TextureReference = function () {
	    function TextureReference(rawResource) {
	        _classCallCheck(this, TextureReference);
	
	        this.rawResource = rawResource;
	        this._isFunctionalProxy = typeof rawResource === "function";
	    }
	
	    _createClass(TextureReference, [{
	        key: "get",
	        value: function get(buffers) {
	            if (!this._isFunctionalProxy) {
	                return this.rawResource;
	            } else {
	                return this.rawResource(buffers);
	            }
	        }
	    }]);
	
	    return TextureReference;
	}();
	
	exports.default = TextureReference;

/***/ },
/* 97 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Vector = __webpack_require__(53);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function Vector2Converter(val) {
	    if (val instanceof _Vector2.default) {
	        return val;
	    } else if (typeof val === "string") {
	        return _Vector2.default.parse(val);
	    } else if (typeof val === "number") {
	        return new _Vector2.default(val, val);
	    } else if (Array.isArray(val)) {
	        return new _Vector2.default(val[0], val[1]);
	    }
	}
	exports.default = Vector2Converter;

/***/ },
/* 98 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Vector = __webpack_require__(9);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function Vector3Converter(val) {
	    if (val instanceof _Vector2.default) {
	        return val;
	    } else if (typeof val === "string") {
	        return _Vector2.default.parse(val);
	    } else if (typeof val == "number") {
	        return new _Vector2.default(val, val, val);
	    } else if (Array.isArray(val)) {
	        return new _Vector2.default(val[0], val[1], val[2]);
	    }
	}
	exports.default = Vector3Converter;

/***/ },
/* 99 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _Vector = __webpack_require__(11);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function Vector4Converter(val) {
	    if (val instanceof _Vector2.default) {
	        return val;
	    } else if (typeof val === "string") {
	        return _Vector2.default.parse(val);
	    } else if (typeof val === "number") {
	        return new _Vector2.default(val, val, val, val);
	    } else if (Array.isArray(val)) {
	        return new _Vector2.default(val[0], val[1], val[2], val[3]);
	    }
	}
	exports.default = Vector4Converter;

/***/ },
/* 100 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _Rectangle = __webpack_require__(101);
	
	var _Rectangle2 = _interopRequireDefault(_Rectangle);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _toPixel(parentSize, rep) {
	    var regex = /(\d+)\s*%/;
	    var regexResult = void 0;
	    if (regexResult = regex.exec(rep)) {
	        var percentage = Number.parseFloat(regexResult[1]);
	        return Math.floor(parentSize * percentage * 0.01);
	    } else {
	        return Math.floor(Number.parseFloat(rep));
	    }
	}
	function ViewportConverter(val) {
	    if (val instanceof _Rectangle2.default) {
	        return function () {
	            return val;
	        };
	    }
	    if (typeof val === "string") {
	        if (val === "auto") {
	            return function (canvas) {
	                return new _Rectangle2.default(0, 0, canvas.width, canvas.height);
	            };
	        } else {
	            var _ret = function () {
	                var sizes = val.split(",");
	                if (sizes.length !== 4) {
	                    throw new Error("Invalid viewport size was specified.");
	                } else {
	                    return {
	                        v: function v(canvas) {
	                            return new _Rectangle2.default(_toPixel(canvas.width, sizes[0]), _toPixel(canvas.height, sizes[1]), _toPixel(canvas.width, sizes[2]), _toPixel(canvas.height, sizes[3]));
	                        }
	                    };
	                }
	            }();
	
	            if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
	        }
	    }
	    throw new Error(val + " could not be parsed");
	}
	exports.default = ViewportConverter;

/***/ },
/* 101 */
/***/ function(module, exports) {

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});exports.default=window.GrimoireJS.lib.math.Rectangle;

/***/ },
/* 102 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _AABB = __webpack_require__(103);
	
	var _AABB2 = _interopRequireDefault(_AABB);
	
	var _Vector = __webpack_require__(9);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	var _GeometryUtility = __webpack_require__(104);
	
	var _GeometryUtility2 = _interopRequireDefault(_GeometryUtility);
	
	var _GeometryFactory = __webpack_require__(31);
	
	var _GeometryFactory2 = _interopRequireDefault(_GeometryFactory);
	
	var _GeometryBuilder = __webpack_require__(105);
	
	var _GeometryBuilder2 = _interopRequireDefault(_GeometryBuilder);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var unitBox = new _AABB2.default();
	unitBox.expand(new _Vector2.default(-1, -1, -1));
	unitBox.expand(new _Vector2.default(1, 1, 1));
	
	var DefaultPrimitives = function () {
	    function DefaultPrimitives() {
	        _classCallCheck(this, DefaultPrimitives);
	    }
	
	    _createClass(DefaultPrimitives, null, [{
	        key: "register",
	        value: function register() {
	            DefaultPrimitives._registerTriangle();
	            DefaultPrimitives._registerQuad();
	            DefaultPrimitives._registerCube();
	            DefaultPrimitives._registerSphere();
	            DefaultPrimitives._registerCircle();
	            DefaultPrimitives._registerCylinder();
	            DefaultPrimitives._registerCone();
	            DefaultPrimitives._registerPlane();
	        }
	    }, {
	        key: "_registerTriangle",
	        value: function _registerTriangle() {
	            _GeometryFactory2.default.addType("triangle", {}, function (gl, attrs) {
	                return _GeometryBuilder2.default.build(gl, {
	                    indices: {
	                        default: {
	                            generator: regeneratorRuntime.mark(function generator() {
	                                return regeneratorRuntime.wrap(function generator$(_context) {
	                                    while (1) {
	                                        switch (_context.prev = _context.next) {
	                                            case 0:
	                                                return _context.delegateYield(_GeometryUtility2.default.triangleIndex(0), "t0", 1);
	
	                                            case 1:
	                                            case "end":
	                                                return _context.stop();
	                                        }
	                                    }
	                                }, generator, this);
	                            }),
	                            topology: WebGLRenderingContext.TRIANGLES
	                        },
	                        wireframe: {
	                            generator: regeneratorRuntime.mark(function generator() {
	                                return regeneratorRuntime.wrap(function generator$(_context2) {
	                                    while (1) {
	                                        switch (_context2.prev = _context2.next) {
	                                            case 0:
	                                                return _context2.delegateYield(_GeometryUtility2.default.linesFromTriangles(_GeometryUtility2.default.triangleIndex(0)), "t0", 1);
	
	                                            case 1:
	                                            case "end":
	                                                return _context2.stop();
	                                        }
	                                    }
	                                }, generator, this);
	                            }),
	                            topology: WebGLRenderingContext.LINES
	                        }
	                    },
	                    vertices: {
	                        main: {
	                            size: {
	                                position: 3,
	                                normal: 3,
	                                texCoord: 2
	                            },
	                            count: _GeometryUtility2.default.triangleSize(),
	                            getGenerators: function getGenerators() {
	                                return {
	                                    position: regeneratorRuntime.mark(function position() {
	                                        return regeneratorRuntime.wrap(function position$(_context3) {
	                                            while (1) {
	                                                switch (_context3.prev = _context3.next) {
	                                                    case 0:
	                                                        return _context3.delegateYield(_GeometryUtility2.default.trianglePosition(_Vector2.default.Zero, _Vector2.default.YUnit, _Vector2.default.XUnit), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context3.stop();
	                                                }
	                                            }
	                                        }, position, this);
	                                    }),
	                                    normal: regeneratorRuntime.mark(function normal() {
	                                        return regeneratorRuntime.wrap(function normal$(_context4) {
	                                            while (1) {
	                                                switch (_context4.prev = _context4.next) {
	                                                    case 0:
	                                                        return _context4.delegateYield(_GeometryUtility2.default.triangleNormal(_Vector2.default.ZUnit), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context4.stop();
	                                                }
	                                            }
	                                        }, normal, this);
	                                    }),
	                                    texCoord: regeneratorRuntime.mark(function texCoord() {
	                                        return regeneratorRuntime.wrap(function texCoord$(_context5) {
	                                            while (1) {
	                                                switch (_context5.prev = _context5.next) {
	                                                    case 0:
	                                                        return _context5.delegateYield(_GeometryUtility2.default.triangleTexCoord(), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context5.stop();
	                                                }
	                                            }
	                                        }, texCoord, this);
	                                    })
	                                };
	                            }
	                        }
	                    }
	                });
	            });
	        }
	    }, {
	        key: "_registerQuad",
	        value: function _registerQuad() {
	            _GeometryFactory2.default.addType("quad", {}, function (gl, attrs) {
	                return _GeometryBuilder2.default.build(gl, {
	                    indices: {
	                        default: {
	                            generator: regeneratorRuntime.mark(function generator() {
	                                return regeneratorRuntime.wrap(function generator$(_context6) {
	                                    while (1) {
	                                        switch (_context6.prev = _context6.next) {
	                                            case 0:
	                                                return _context6.delegateYield(_GeometryUtility2.default.quadIndex(0), "t0", 1);
	
	                                            case 1:
	                                            case "end":
	                                                return _context6.stop();
	                                        }
	                                    }
	                                }, generator, this);
	                            }),
	                            topology: WebGLRenderingContext.TRIANGLES
	                        },
	                        wireframe: {
	                            generator: regeneratorRuntime.mark(function generator() {
	                                return regeneratorRuntime.wrap(function generator$(_context7) {
	                                    while (1) {
	                                        switch (_context7.prev = _context7.next) {
	                                            case 0:
	                                                return _context7.delegateYield(_GeometryUtility2.default.linesFromTriangles(_GeometryUtility2.default.quadIndex(0)), "t0", 1);
	
	                                            case 1:
	                                            case "end":
	                                                return _context7.stop();
	                                        }
	                                    }
	                                }, generator, this);
	                            }),
	                            topology: WebGLRenderingContext.LINES
	                        }
	                    },
	                    vertices: {
	                        main: {
	                            size: {
	                                position: 3,
	                                normal: 3,
	                                texCoord: 2
	                            },
	                            count: _GeometryUtility2.default.quadSize(),
	                            getGenerators: function getGenerators() {
	                                return {
	                                    position: regeneratorRuntime.mark(function position() {
	                                        return regeneratorRuntime.wrap(function position$(_context8) {
	                                            while (1) {
	                                                switch (_context8.prev = _context8.next) {
	                                                    case 0:
	                                                        return _context8.delegateYield(_GeometryUtility2.default.quadPosition(_Vector2.default.Zero, _Vector2.default.YUnit, _Vector2.default.XUnit), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context8.stop();
	                                                }
	                                            }
	                                        }, position, this);
	                                    }),
	                                    normal: regeneratorRuntime.mark(function normal() {
	                                        return regeneratorRuntime.wrap(function normal$(_context9) {
	                                            while (1) {
	                                                switch (_context9.prev = _context9.next) {
	                                                    case 0:
	                                                        return _context9.delegateYield(_GeometryUtility2.default.quadNormal(_Vector2.default.ZUnit), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context9.stop();
	                                                }
	                                            }
	                                        }, normal, this);
	                                    }),
	                                    texCoord: regeneratorRuntime.mark(function texCoord() {
	                                        return regeneratorRuntime.wrap(function texCoord$(_context10) {
	                                            while (1) {
	                                                switch (_context10.prev = _context10.next) {
	                                                    case 0:
	                                                        return _context10.delegateYield(_GeometryUtility2.default.quadTexCoord(), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context10.stop();
	                                                }
	                                            }
	                                        }, texCoord, this);
	                                    })
	                                };
	                            }
	                        }
	                    }
	                });
	            });
	        }
	    }, {
	        key: "_registerCube",
	        value: function _registerCube() {
	            _GeometryFactory2.default.addType("cube", {}, function (gl, attrs) {
	                return _GeometryBuilder2.default.build(gl, {
	                    indices: {
	                        default: {
	                            generator: regeneratorRuntime.mark(function generator() {
	                                return regeneratorRuntime.wrap(function generator$(_context11) {
	                                    while (1) {
	                                        switch (_context11.prev = _context11.next) {
	                                            case 0:
	                                                return _context11.delegateYield(_GeometryUtility2.default.cubeIndex(0), "t0", 1);
	
	                                            case 1:
	                                            case "end":
	                                                return _context11.stop();
	                                        }
	                                    }
	                                }, generator, this);
	                            }),
	                            topology: WebGLRenderingContext.TRIANGLES
	                        },
	                        wireframe: {
	                            generator: regeneratorRuntime.mark(function generator() {
	                                return regeneratorRuntime.wrap(function generator$(_context12) {
	                                    while (1) {
	                                        switch (_context12.prev = _context12.next) {
	                                            case 0:
	                                                return _context12.delegateYield(_GeometryUtility2.default.linesFromTriangles(_GeometryUtility2.default.cubeIndex(0)), "t0", 1);
	
	                                            case 1:
	                                            case "end":
	                                                return _context12.stop();
	                                        }
	                                    }
	                                }, generator, this);
	                            }),
	                            topology: WebGLRenderingContext.LINES
	                        }
	                    },
	                    vertices: {
	                        main: {
	                            size: {
	                                position: 3,
	                                normal: 3,
	                                texCoord: 2
	                            },
	                            count: _GeometryUtility2.default.cubeSize(),
	                            getGenerators: function getGenerators() {
	                                return {
	                                    position: regeneratorRuntime.mark(function position() {
	                                        return regeneratorRuntime.wrap(function position$(_context13) {
	                                            while (1) {
	                                                switch (_context13.prev = _context13.next) {
	                                                    case 0:
	                                                        return _context13.delegateYield(_GeometryUtility2.default.cubePosition(_Vector2.default.Zero, _Vector2.default.YUnit, _Vector2.default.XUnit, _Vector2.default.ZUnit.negateThis()), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context13.stop();
	                                                }
	                                            }
	                                        }, position, this);
	                                    }),
	                                    normal: regeneratorRuntime.mark(function normal() {
	                                        return regeneratorRuntime.wrap(function normal$(_context14) {
	                                            while (1) {
	                                                switch (_context14.prev = _context14.next) {
	                                                    case 0:
	                                                        return _context14.delegateYield(_GeometryUtility2.default.cubeNormal(_Vector2.default.Zero, _Vector2.default.YUnit, _Vector2.default.XUnit, _Vector2.default.ZUnit.negateThis()), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context14.stop();
	                                                }
	                                            }
	                                        }, normal, this);
	                                    }),
	                                    texCoord: regeneratorRuntime.mark(function texCoord() {
	                                        return regeneratorRuntime.wrap(function texCoord$(_context15) {
	                                            while (1) {
	                                                switch (_context15.prev = _context15.next) {
	                                                    case 0:
	                                                        return _context15.delegateYield(_GeometryUtility2.default.cubeTexCoord(), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context15.stop();
	                                                }
	                                            }
	                                        }, texCoord, this);
	                                    })
	                                };
	                            }
	                        }
	                    },
	                    aabb: unitBox
	                });
	            });
	        }
	    }, {
	        key: "_registerSphere",
	        value: function _registerSphere() {
	            _GeometryFactory2.default.addType("sphere", {
	                divVertical: {
	                    converter: "Number",
	                    default: 100
	                },
	                divHorizontal: {
	                    converter: "Number",
	                    default: 100
	                }
	            }, function (gl, attrs) {
	                var dH = attrs["divHorizontal"];
	                var dV = attrs["divVertical"];
	                return _GeometryBuilder2.default.build(gl, {
	                    indices: {
	                        default: {
	                            generator: regeneratorRuntime.mark(function generator() {
	                                return regeneratorRuntime.wrap(function generator$(_context16) {
	                                    while (1) {
	                                        switch (_context16.prev = _context16.next) {
	                                            case 0:
	                                                return _context16.delegateYield(_GeometryUtility2.default.sphereIndex(0, dH, dV), "t0", 1);
	
	                                            case 1:
	                                            case "end":
	                                                return _context16.stop();
	                                        }
	                                    }
	                                }, generator, this);
	                            }),
	                            topology: WebGLRenderingContext.TRIANGLES
	                        },
	                        wireframe: {
	                            generator: regeneratorRuntime.mark(function generator() {
	                                return regeneratorRuntime.wrap(function generator$(_context17) {
	                                    while (1) {
	                                        switch (_context17.prev = _context17.next) {
	                                            case 0:
	                                                return _context17.delegateYield(_GeometryUtility2.default.linesFromTriangles(_GeometryUtility2.default.sphereIndex(0, dH, dV)), "t0", 1);
	
	                                            case 1:
	                                            case "end":
	                                                return _context17.stop();
	                                        }
	                                    }
	                                }, generator, this);
	                            }),
	                            topology: WebGLRenderingContext.LINES
	                        }
	                    },
	                    vertices: {
	                        main: {
	                            size: {
	                                position: 3,
	                                normal: 3,
	                                texCoord: 2
	                            },
	                            count: _GeometryUtility2.default.sphereSize(dH, dV),
	                            getGenerators: function getGenerators() {
	                                return {
	                                    position: regeneratorRuntime.mark(function position() {
	                                        return regeneratorRuntime.wrap(function position$(_context18) {
	                                            while (1) {
	                                                switch (_context18.prev = _context18.next) {
	                                                    case 0:
	                                                        return _context18.delegateYield(_GeometryUtility2.default.spherePosition(_Vector2.default.Zero, _Vector2.default.YUnit, _Vector2.default.XUnit, _Vector2.default.ZUnit.negateThis(), dH, dV), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context18.stop();
	                                                }
	                                            }
	                                        }, position, this);
	                                    }),
	                                    normal: regeneratorRuntime.mark(function normal() {
	                                        return regeneratorRuntime.wrap(function normal$(_context19) {
	                                            while (1) {
	                                                switch (_context19.prev = _context19.next) {
	                                                    case 0:
	                                                        return _context19.delegateYield(_GeometryUtility2.default.sphereNormal(_Vector2.default.YUnit, _Vector2.default.XUnit, _Vector2.default.ZUnit.negateThis(), dH, dV), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context19.stop();
	                                                }
	                                            }
	                                        }, normal, this);
	                                    }),
	                                    texCoord: regeneratorRuntime.mark(function texCoord() {
	                                        return regeneratorRuntime.wrap(function texCoord$(_context20) {
	                                            while (1) {
	                                                switch (_context20.prev = _context20.next) {
	                                                    case 0:
	                                                        return _context20.delegateYield(_GeometryUtility2.default.sphereTexCoord(dH, dV), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context20.stop();
	                                                }
	                                            }
	                                        }, texCoord, this);
	                                    })
	                                };
	                            }
	                        }
	                    },
	                    aabb: unitBox
	                });
	            });
	        }
	    }, {
	        key: "_registerCircle",
	        value: function _registerCircle() {
	            _GeometryFactory2.default.addType("circle", {
	                divide: {
	                    converter: "Number",
	                    default: 50
	                }
	            }, function (gl, attrs) {
	                var div = attrs["divide"];
	                return _GeometryBuilder2.default.build(gl, {
	                    indices: {
	                        default: {
	                            generator: regeneratorRuntime.mark(function generator() {
	                                return regeneratorRuntime.wrap(function generator$(_context21) {
	                                    while (1) {
	                                        switch (_context21.prev = _context21.next) {
	                                            case 0:
	                                                return _context21.delegateYield(_GeometryUtility2.default.ellipseIndex(0, div), "t0", 1);
	
	                                            case 1:
	                                            case "end":
	                                                return _context21.stop();
	                                        }
	                                    }
	                                }, generator, this);
	                            }),
	                            topology: WebGLRenderingContext.TRIANGLES
	                        },
	                        wireframe: {
	                            generator: regeneratorRuntime.mark(function generator() {
	                                return regeneratorRuntime.wrap(function generator$(_context22) {
	                                    while (1) {
	                                        switch (_context22.prev = _context22.next) {
	                                            case 0:
	                                                return _context22.delegateYield(_GeometryUtility2.default.linesFromTriangles(_GeometryUtility2.default.ellipseIndex(0, div)), "t0", 1);
	
	                                            case 1:
	                                            case "end":
	                                                return _context22.stop();
	                                        }
	                                    }
	                                }, generator, this);
	                            }),
	                            topology: WebGLRenderingContext.LINES
	                        }
	                    },
	                    vertices: {
	                        main: {
	                            size: {
	                                position: 3,
	                                normal: 3,
	                                texCoord: 2
	                            },
	                            count: _GeometryUtility2.default.ellipseSize(div),
	                            getGenerators: function getGenerators() {
	                                return {
	                                    position: regeneratorRuntime.mark(function position() {
	                                        return regeneratorRuntime.wrap(function position$(_context23) {
	                                            while (1) {
	                                                switch (_context23.prev = _context23.next) {
	                                                    case 0:
	                                                        return _context23.delegateYield(_GeometryUtility2.default.ellipsePosition(_Vector2.default.Zero, _Vector2.default.YUnit, _Vector2.default.XUnit, div), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context23.stop();
	                                                }
	                                            }
	                                        }, position, this);
	                                    }),
	                                    normal: regeneratorRuntime.mark(function normal() {
	                                        return regeneratorRuntime.wrap(function normal$(_context24) {
	                                            while (1) {
	                                                switch (_context24.prev = _context24.next) {
	                                                    case 0:
	                                                        return _context24.delegateYield(_GeometryUtility2.default.ellipseNormal(_Vector2.default.ZUnit, div), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context24.stop();
	                                                }
	                                            }
	                                        }, normal, this);
	                                    }),
	                                    texCoord: regeneratorRuntime.mark(function texCoord() {
	                                        return regeneratorRuntime.wrap(function texCoord$(_context25) {
	                                            while (1) {
	                                                switch (_context25.prev = _context25.next) {
	                                                    case 0:
	                                                        return _context25.delegateYield(_GeometryUtility2.default.ellipseTexCoord(div), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context25.stop();
	                                                }
	                                            }
	                                        }, texCoord, this);
	                                    })
	                                };
	                            }
	                        }
	                    }
	                });
	            });
	        }
	    }, {
	        key: "_registerCylinder",
	        value: function _registerCylinder() {
	            _GeometryFactory2.default.addType("cylinder", {
	                divide: {
	                    converter: "Number",
	                    default: 50
	                }
	            }, function (gl, attrs) {
	                var div = attrs["divide"];
	                return _GeometryBuilder2.default.build(gl, {
	                    indices: {
	                        default: {
	                            generator: regeneratorRuntime.mark(function generator() {
	                                return regeneratorRuntime.wrap(function generator$(_context26) {
	                                    while (1) {
	                                        switch (_context26.prev = _context26.next) {
	                                            case 0:
	                                                return _context26.delegateYield(_GeometryUtility2.default.cylinderIndex(0, div), "t0", 1);
	
	                                            case 1:
	                                            case "end":
	                                                return _context26.stop();
	                                        }
	                                    }
	                                }, generator, this);
	                            }),
	                            topology: WebGLRenderingContext.TRIANGLES
	                        },
	                        wireframe: {
	                            generator: regeneratorRuntime.mark(function generator() {
	                                return regeneratorRuntime.wrap(function generator$(_context27) {
	                                    while (1) {
	                                        switch (_context27.prev = _context27.next) {
	                                            case 0:
	                                                return _context27.delegateYield(_GeometryUtility2.default.linesFromTriangles(_GeometryUtility2.default.cylinderIndex(0, div)), "t0", 1);
	
	                                            case 1:
	                                            case "end":
	                                                return _context27.stop();
	                                        }
	                                    }
	                                }, generator, this);
	                            }),
	                            topology: WebGLRenderingContext.LINES
	                        }
	                    },
	                    vertices: {
	                        main: {
	                            size: {
	                                position: 3,
	                                normal: 3,
	                                texCoord: 2
	                            },
	                            count: _GeometryUtility2.default.cylinderSize(div),
	                            getGenerators: function getGenerators() {
	                                return {
	                                    position: regeneratorRuntime.mark(function position() {
	                                        return regeneratorRuntime.wrap(function position$(_context28) {
	                                            while (1) {
	                                                switch (_context28.prev = _context28.next) {
	                                                    case 0:
	                                                        return _context28.delegateYield(_GeometryUtility2.default.cylinderPosition(_Vector2.default.Zero, _Vector2.default.YUnit, _Vector2.default.XUnit, _Vector2.default.ZUnit.negateThis(), div), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context28.stop();
	                                                }
	                                            }
	                                        }, position, this);
	                                    }),
	                                    normal: regeneratorRuntime.mark(function normal() {
	                                        return regeneratorRuntime.wrap(function normal$(_context29) {
	                                            while (1) {
	                                                switch (_context29.prev = _context29.next) {
	                                                    case 0:
	                                                        return _context29.delegateYield(_GeometryUtility2.default.cylinderNormal(_Vector2.default.Zero, _Vector2.default.YUnit, _Vector2.default.XUnit, _Vector2.default.ZUnit.negateThis(), div), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context29.stop();
	                                                }
	                                            }
	                                        }, normal, this);
	                                    }),
	                                    texCoord: regeneratorRuntime.mark(function texCoord() {
	                                        return regeneratorRuntime.wrap(function texCoord$(_context30) {
	                                            while (1) {
	                                                switch (_context30.prev = _context30.next) {
	                                                    case 0:
	                                                        return _context30.delegateYield(_GeometryUtility2.default.cylinderTexCoord(div), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context30.stop();
	                                                }
	                                            }
	                                        }, texCoord, this);
	                                    })
	                                };
	                            }
	                        }
	                    },
	                    aabb: unitBox
	                });
	            });
	        }
	    }, {
	        key: "_registerCone",
	        value: function _registerCone() {
	            _GeometryFactory2.default.addType("cone", {
	                divide: {
	                    converter: "Number",
	                    default: 50
	                }
	            }, function (gl, attrs) {
	                var div = attrs["divide"];
	                return _GeometryBuilder2.default.build(gl, {
	                    indices: {
	                        default: {
	                            generator: regeneratorRuntime.mark(function generator() {
	                                return regeneratorRuntime.wrap(function generator$(_context31) {
	                                    while (1) {
	                                        switch (_context31.prev = _context31.next) {
	                                            case 0:
	                                                return _context31.delegateYield(_GeometryUtility2.default.coneIndex(0, div), "t0", 1);
	
	                                            case 1:
	                                            case "end":
	                                                return _context31.stop();
	                                        }
	                                    }
	                                }, generator, this);
	                            }),
	                            topology: WebGLRenderingContext.TRIANGLES
	                        },
	                        wireframe: {
	                            generator: regeneratorRuntime.mark(function generator() {
	                                return regeneratorRuntime.wrap(function generator$(_context32) {
	                                    while (1) {
	                                        switch (_context32.prev = _context32.next) {
	                                            case 0:
	                                                return _context32.delegateYield(_GeometryUtility2.default.linesFromTriangles(_GeometryUtility2.default.coneIndex(0, div)), "t0", 1);
	
	                                            case 1:
	                                            case "end":
	                                                return _context32.stop();
	                                        }
	                                    }
	                                }, generator, this);
	                            }),
	                            topology: WebGLRenderingContext.LINES
	                        }
	                    },
	                    vertices: {
	                        main: {
	                            size: {
	                                position: 3,
	                                normal: 3,
	                                texCoord: 2
	                            },
	                            count: _GeometryUtility2.default.coneSize(div),
	                            getGenerators: function getGenerators() {
	                                return {
	                                    position: regeneratorRuntime.mark(function position() {
	                                        return regeneratorRuntime.wrap(function position$(_context33) {
	                                            while (1) {
	                                                switch (_context33.prev = _context33.next) {
	                                                    case 0:
	                                                        return _context33.delegateYield(_GeometryUtility2.default.conePosition(_Vector2.default.Zero, _Vector2.default.YUnit, _Vector2.default.XUnit, _Vector2.default.ZUnit.negateThis(), div), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context33.stop();
	                                                }
	                                            }
	                                        }, position, this);
	                                    }),
	                                    normal: regeneratorRuntime.mark(function normal() {
	                                        return regeneratorRuntime.wrap(function normal$(_context34) {
	                                            while (1) {
	                                                switch (_context34.prev = _context34.next) {
	                                                    case 0:
	                                                        return _context34.delegateYield(_GeometryUtility2.default.coneNormal(_Vector2.default.Zero, _Vector2.default.YUnit, _Vector2.default.XUnit, _Vector2.default.ZUnit.negateThis(), div), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context34.stop();
	                                                }
	                                            }
	                                        }, normal, this);
	                                    }),
	                                    texCoord: regeneratorRuntime.mark(function texCoord() {
	                                        return regeneratorRuntime.wrap(function texCoord$(_context35) {
	                                            while (1) {
	                                                switch (_context35.prev = _context35.next) {
	                                                    case 0:
	                                                        return _context35.delegateYield(_GeometryUtility2.default.coneTexCoord(div), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context35.stop();
	                                                }
	                                            }
	                                        }, texCoord, this);
	                                    })
	                                };
	                            }
	                        }
	                    },
	                    aabb: unitBox
	                });
	            });
	        }
	    }, {
	        key: "_registerPlane",
	        value: function _registerPlane() {
	            _GeometryFactory2.default.addType("plane", {
	                divide: {
	                    converter: "Number",
	                    default: 10
	                }
	            }, function (gl, attrs) {
	                var div = attrs["divide"];
	                return _GeometryBuilder2.default.build(gl, {
	                    indices: {
	                        default: {
	                            generator: regeneratorRuntime.mark(function generator() {
	                                return regeneratorRuntime.wrap(function generator$(_context36) {
	                                    while (1) {
	                                        switch (_context36.prev = _context36.next) {
	                                            case 0:
	                                                return _context36.delegateYield(_GeometryUtility2.default.planeIndex(0, div), "t0", 1);
	
	                                            case 1:
	                                            case "end":
	                                                return _context36.stop();
	                                        }
	                                    }
	                                }, generator, this);
	                            }),
	                            topology: WebGLRenderingContext.TRIANGLES
	                        },
	                        wireframe: {
	                            generator: regeneratorRuntime.mark(function generator() {
	                                return regeneratorRuntime.wrap(function generator$(_context37) {
	                                    while (1) {
	                                        switch (_context37.prev = _context37.next) {
	                                            case 0:
	                                                return _context37.delegateYield(_GeometryUtility2.default.linesFromTriangles(_GeometryUtility2.default.planeIndex(0, div)), "t0", 1);
	
	                                            case 1:
	                                            case "end":
	                                                return _context37.stop();
	                                        }
	                                    }
	                                }, generator, this);
	                            }),
	                            topology: WebGLRenderingContext.LINES
	                        }
	                    },
	                    vertices: {
	                        main: {
	                            size: {
	                                position: 3,
	                                normal: 3,
	                                texCoord: 2
	                            },
	                            count: _GeometryUtility2.default.planeSize(div),
	                            getGenerators: function getGenerators() {
	                                return {
	                                    position: regeneratorRuntime.mark(function position() {
	                                        return regeneratorRuntime.wrap(function position$(_context38) {
	                                            while (1) {
	                                                switch (_context38.prev = _context38.next) {
	                                                    case 0:
	                                                        return _context38.delegateYield(_GeometryUtility2.default.planePosition(_Vector2.default.Zero, _Vector2.default.YUnit, _Vector2.default.XUnit, div), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context38.stop();
	                                                }
	                                            }
	                                        }, position, this);
	                                    }),
	                                    normal: regeneratorRuntime.mark(function normal() {
	                                        return regeneratorRuntime.wrap(function normal$(_context39) {
	                                            while (1) {
	                                                switch (_context39.prev = _context39.next) {
	                                                    case 0:
	                                                        return _context39.delegateYield(_GeometryUtility2.default.planeNormal(_Vector2.default.ZUnit, div), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context39.stop();
	                                                }
	                                            }
	                                        }, normal, this);
	                                    }),
	                                    texCoord: regeneratorRuntime.mark(function texCoord() {
	                                        return regeneratorRuntime.wrap(function texCoord$(_context40) {
	                                            while (1) {
	                                                switch (_context40.prev = _context40.next) {
	                                                    case 0:
	                                                        return _context40.delegateYield(_GeometryUtility2.default.planeTexCoord(div), "t0", 1);
	
	                                                    case 1:
	                                                    case "end":
	                                                        return _context40.stop();
	                                                }
	                                            }
	                                        }, texCoord, this);
	                                    })
	                                };
	                            }
	                        }
	                    }
	                });
	            });
	        }
	    }]);
	
	    return DefaultPrimitives;
	}();
	
	exports.default = DefaultPrimitives;

/***/ },
/* 103 */
/***/ function(module, exports) {

		Object.defineProperty(exports, "__esModule", {
		    value: true
		});exports.default=window.GrimoireJS.lib.math.AABB;

/***/ },
/* 104 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Vector = __webpack_require__(9);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var GeometryUtility = function () {
	    function GeometryUtility() {
	        _classCallCheck(this, GeometryUtility);
	    }
	
	    _createClass(GeometryUtility, null, [{
	        key: "linesFromTriangles",
	
	        /**
	         * Convert triangles topology to lines. Basically uses for making wireframes.
	         * @param  {IterableIterator<number>} indices [description]
	         * @return {IterableIterator<number>}          [description]
	         */
	        value: regeneratorRuntime.mark(function linesFromTriangles(indices) {
	            var ic, i, _iteratorNormalCompletion, _didIteratorError, _iteratorError, _iterator, _step, index, a, b, c;
	
	            return regeneratorRuntime.wrap(function linesFromTriangles$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            ic = new Array(3);
	                            i = 0;
	                            _iteratorNormalCompletion = true;
	                            _didIteratorError = false;
	                            _iteratorError = undefined;
	                            _context.prev = 5;
	                            _iterator = indices[Symbol.iterator]();
	
	                        case 7:
	                            if (_iteratorNormalCompletion = (_step = _iterator.next()).done) {
	                                _context.next = 17;
	                                break;
	                            }
	
	                            index = _step.value;
	
	                            ic[i % 3] = index;
	
	                            if (!(i % 3 === 2)) {
	                                _context.next = 13;
	                                break;
	                            }
	
	                            a = ic[0], b = ic[1], c = ic[2];
	                            return _context.delegateYield([a, b, b, c, c, a], "t0", 13);
	
	                        case 13:
	                            i++;
	
	                        case 14:
	                            _iteratorNormalCompletion = true;
	                            _context.next = 7;
	                            break;
	
	                        case 17:
	                            _context.next = 23;
	                            break;
	
	                        case 19:
	                            _context.prev = 19;
	                            _context.t1 = _context["catch"](5);
	                            _didIteratorError = true;
	                            _iteratorError = _context.t1;
	
	                        case 23:
	                            _context.prev = 23;
	                            _context.prev = 24;
	
	                            if (!_iteratorNormalCompletion && _iterator.return) {
	                                _iterator.return();
	                            }
	
	                        case 26:
	                            _context.prev = 26;
	
	                            if (!_didIteratorError) {
	                                _context.next = 29;
	                                break;
	                            }
	
	                            throw _iteratorError;
	
	                        case 29:
	                            return _context.finish(26);
	
	                        case 30:
	                            return _context.finish(23);
	
	                        case 31:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, linesFromTriangles, this, [[5, 19, 23, 31], [24,, 26, 30]]);
	        })
	        /**
	         * Generator for ellipse positions
	         * @param  {Vector3}                  center [the center position of ellipse]
	         * @param  {Vector3}                  up     [up vector for ellipse]
	         * @param  {Vector3}                  right  [right vector for ellipse]
	         * @param  {number}                   divide [how many triangles should consists in the ellipse]
	         * @return {IterableIterator<number>}        [Generated iterator for position]
	         */
	
	    }, {
	        key: "ellipsePosition",
	        value: regeneratorRuntime.mark(function ellipsePosition(center, up, right, divide) {
	            var step, i, theta, sin, cos;
	            return regeneratorRuntime.wrap(function ellipsePosition$(_context2) {
	                while (1) {
	                    switch (_context2.prev = _context2.next) {
	                        case 0:
	                            _context2.next = 2;
	                            return center.X;
	
	                        case 2:
	                            _context2.next = 4;
	                            return center.Y;
	
	                        case 4:
	                            _context2.next = 6;
	                            return center.Z;
	
	                        case 6:
	                            step = 2 * Math.PI / divide;
	                            i = 0;
	
	                        case 8:
	                            if (!(i < divide)) {
	                                _context2.next = 21;
	                                break;
	                            }
	
	                            theta = step * i;
	                            sin = Math.sin(Math.PI * 2 - theta);
	                            cos = Math.cos(Math.PI * 2 - theta);
	                            _context2.next = 14;
	                            return center.X + cos * up.X + sin * right.X;
	
	                        case 14:
	                            _context2.next = 16;
	                            return center.Y + cos * up.Y + sin * right.Y;
	
	                        case 16:
	                            _context2.next = 18;
	                            return center.Z + cos * up.Z + sin * right.Z;
	
	                        case 18:
	                            i++;
	                            _context2.next = 8;
	                            break;
	
	                        case 21:
	                        case "end":
	                            return _context2.stop();
	                    }
	                }
	            }, ellipsePosition, this);
	        })
	    }, {
	        key: "trianglePosition",
	        value: regeneratorRuntime.mark(function trianglePosition(center, up, right) {
	            var p0, p1, p2;
	            return regeneratorRuntime.wrap(function trianglePosition$(_context3) {
	                while (1) {
	                    switch (_context3.prev = _context3.next) {
	                        case 0:
	                            p0 = center.addWith(up);
	                            p1 = center.subtractWith(up).addWith(right);
	                            p2 = center.subtractWith(up).subtractWith(right);
	                            return _context3.delegateYield(p0.rawElements, "t0", 4);
	
	                        case 4:
	                            return _context3.delegateYield(p1.rawElements, "t1", 5);
	
	                        case 5:
	                            return _context3.delegateYield(p2.rawElements, "t2", 6);
	
	                        case 6:
	                        case "end":
	                            return _context3.stop();
	                    }
	                }
	            }, trianglePosition, this);
	        })
	    }, {
	        key: "cubePosition",
	        value: regeneratorRuntime.mark(function cubePosition(center, up, right, forward) {
	            return regeneratorRuntime.wrap(function cubePosition$(_context4) {
	                while (1) {
	                    switch (_context4.prev = _context4.next) {
	                        case 0:
	                            return _context4.delegateYield(GeometryUtility.quadPosition(center.subtractWith(forward), up, right), "t0", 1);
	
	                        case 1:
	                            return _context4.delegateYield(GeometryUtility.quadPosition(center.addWith(forward), up, right.negateThis()), "t1", 2);
	
	                        case 2:
	                            return _context4.delegateYield(GeometryUtility.quadPosition(center.addWith(up), forward, right), "t2", 3);
	
	                        case 3:
	                            return _context4.delegateYield(GeometryUtility.quadPosition(center.addWith(right), forward, up.negateThis()), "t3", 4);
	
	                        case 4:
	                            return _context4.delegateYield(GeometryUtility.quadPosition(center.subtractWith(up), forward, right.negateThis()), "t4", 5);
	
	                        case 5:
	                            return _context4.delegateYield(GeometryUtility.quadPosition(center.subtractWith(right), forward, up), "t5", 6);
	
	                        case 6:
	                        case "end":
	                            return _context4.stop();
	                    }
	                }
	            }, cubePosition, this);
	        })
	    }, {
	        key: "quadPosition",
	        value: regeneratorRuntime.mark(function quadPosition(center, up, right) {
	            var p0, p1, p2, p3;
	            return regeneratorRuntime.wrap(function quadPosition$(_context5) {
	                while (1) {
	                    switch (_context5.prev = _context5.next) {
	                        case 0:
	                            p0 = center.subtractWith(right).addWith(up);
	                            p1 = center.addWith(right).addWith(up);
	                            p2 = center.addWith(right).subtractWith(up);
	                            p3 = center.subtractWith(right).subtractWith(up);
	                            return _context5.delegateYield(p0.rawElements, "t0", 5);
	
	                        case 5:
	                            return _context5.delegateYield(p1.rawElements, "t1", 6);
	
	                        case 6:
	                            return _context5.delegateYield(p2.rawElements, "t2", 7);
	
	                        case 7:
	                            return _context5.delegateYield(p3.rawElements, "t3", 8);
	
	                        case 8:
	                        case "end":
	                            return _context5.stop();
	                    }
	                }
	            }, quadPosition, this);
	        })
	    }, {
	        key: "planePosition",
	        value: regeneratorRuntime.mark(function planePosition(center, up, right, divide) {
	            var x, y, i, j, _i, _j;
	
	            return regeneratorRuntime.wrap(function planePosition$(_context6) {
	                while (1) {
	                    switch (_context6.prev = _context6.next) {
	                        case 0:
	                            x = center.addWith(right).multiplyWith(2);
	                            y = center.subtractWith(up).multiplyWith(2);
	                            i = -divide / 2;
	
	                        case 3:
	                            if (!(i < divide / 2 + 1)) {
	                                _context6.next = 13;
	                                break;
	                            }
	
	                            j = -divide / 2;
	
	                        case 5:
	                            if (!(j < divide / 2 + 1)) {
	                                _context6.next = 10;
	                                break;
	                            }
	
	                            return _context6.delegateYield(x.multiplyWith(j / divide).addWith(y.multiplyWith(i / divide)).rawElements, "t0", 7);
	
	                        case 7:
	                            j++;
	                            _context6.next = 5;
	                            break;
	
	                        case 10:
	                            i++;
	                            _context6.next = 3;
	                            break;
	
	                        case 13:
	                            _i = -divide / 2;
	
	                        case 14:
	                            if (!(_i < divide / 2 + 1)) {
	                                _context6.next = 24;
	                                break;
	                            }
	
	                            _j = -divide / 2;
	
	                        case 16:
	                            if (!(_j < divide / 2 + 1)) {
	                                _context6.next = 21;
	                                break;
	                            }
	
	                            return _context6.delegateYield(x.multiplyWith(_j / divide).addWith(y.multiplyWith(_i / divide)).rawElements, "t1", 18);
	
	                        case 18:
	                            _j++;
	                            _context6.next = 16;
	                            break;
	
	                        case 21:
	                            _i++;
	                            _context6.next = 14;
	                            break;
	
	                        case 24:
	                        case "end":
	                            return _context6.stop();
	                    }
	                }
	            }, planePosition, this);
	        })
	    }, {
	        key: "cylinderPosition",
	        value: regeneratorRuntime.mark(function cylinderPosition(center, up, right, forward, divide) {
	            var step, d, d2, temp, i, theta, sin, cos, currentCenter, currentRight;
	            return regeneratorRuntime.wrap(function cylinderPosition$(_context7) {
	                while (1) {
	                    switch (_context7.prev = _context7.next) {
	                        case 0:
	                            return _context7.delegateYield(GeometryUtility.ellipsePosition(center.addWith(up), forward, right, divide), "t0", 1);
	
	                        case 1:
	                            return _context7.delegateYield(GeometryUtility.ellipsePosition(center.subtractWith(up), forward, _Vector2.default.negate(right), divide), "t1", 2);
	
	                        case 2:
	                            step = 2 * Math.PI / divide;
	                            d = Math.cos(step / 2);
	                            d2 = Math.sin(step / 2);
	                            temp = divide % 2 == 0 ? step / 2 : 0;
	                            i = 0;
	
	                        case 7:
	                            if (!(i < divide)) {
	                                _context7.next = 17;
	                                break;
	                            }
	
	                            theta = step / 2 + step * i;
	                            sin = Math.sin((Math.PI - step) / 2 - theta - temp);
	                            cos = Math.cos((Math.PI - step) / 2 - theta - temp);
	                            currentCenter = new _Vector2.default(d * cos, center.Y, d * sin);
	                            currentRight = new _Vector2.default(Math.cos(-step / 2 - theta - temp), center.Y, Math.sin(-step / 2 - theta - temp));
	                            return _context7.delegateYield(GeometryUtility.quadPosition(currentCenter, up, _Vector2.default.multiply(d2, currentRight)), "t2", 14);
	
	                        case 14:
	                            i++;
	                            _context7.next = 7;
	                            break;
	
	                        case 17:
	                        case "end":
	                            return _context7.stop();
	                    }
	                }
	            }, cylinderPosition, this);
	        })
	    }, {
	        key: "conePosition",
	        value: regeneratorRuntime.mark(function conePosition(center, up, right, forward, divide) {
	            var step, d, d2, temp, i, theta, sin, cos, currentCenter, currentRight;
	            return regeneratorRuntime.wrap(function conePosition$(_context8) {
	                while (1) {
	                    switch (_context8.prev = _context8.next) {
	                        case 0:
	                            return _context8.delegateYield(GeometryUtility.ellipsePosition(center.subtractWith(up), forward, _Vector2.default.negate(right), divide), "t0", 1);
	
	                        case 1:
	                            step = 2 * Math.PI / divide;
	                            d = Math.cos(step / 2) / 2;
	                            d2 = Math.sin(step / 2);
	                            temp = divide % 2 == 1 ? step / 2 : 0;
	                            i = 0;
	
	                        case 6:
	                            if (!(i < divide)) {
	                                _context8.next = 16;
	                                break;
	                            }
	
	                            theta = step * i;
	                            sin = Math.sin((Math.PI - step) / 2 - theta - temp);
	                            cos = Math.cos((Math.PI - step) / 2 - theta - temp);
	                            currentCenter = new _Vector2.default(d * cos, center.Y, d * sin);
	                            currentRight = new _Vector2.default(Math.cos(-step / 2 - theta - temp), center.Y, Math.sin(-step / 2 - theta - temp));
	                            return _context8.delegateYield(GeometryUtility.trianglePosition(currentCenter, up.subtractWith(currentCenter), _Vector2.default.multiply(d2, currentRight)), "t1", 13);
	
	                        case 13:
	                            i++;
	                            _context8.next = 6;
	                            break;
	
	                        case 16:
	                        case "end":
	                            return _context8.stop();
	                    }
	                }
	            }, conePosition, this);
	        })
	    }, {
	        key: "spherePosition",
	        value: regeneratorRuntime.mark(function spherePosition(center, up, right, forward, rowDiv, circleDiv) {
	            var ia, ja, j, phi, sinPhi, upVector, i, theta;
	            return regeneratorRuntime.wrap(function spherePosition$(_context9) {
	                while (1) {
	                    switch (_context9.prev = _context9.next) {
	                        case 0:
	                            return _context9.delegateYield(center.addWith(up).rawElements, "t0", 1);
	
	                        case 1:
	                            return _context9.delegateYield(center.subtractWith(up).rawElements, "t1", 2);
	
	                        case 2:
	                            ia = 2 * Math.PI / circleDiv;
	                            ja = Math.PI / (rowDiv + 1);
	                            j = 1;
	
	                        case 5:
	                            if (!(j <= rowDiv)) {
	                                _context9.next = 19;
	                                break;
	                            }
	
	                            phi = ja * j;
	                            sinPhi = Math.sin(phi);
	                            upVector = up.multiplyWith(Math.cos(phi));
	                            i = 0;
	
	                        case 10:
	                            if (!(i <= circleDiv)) {
	                                _context9.next = 16;
	                                break;
	                            }
	
	                            theta = ia * i;
	                            return _context9.delegateYield(right.multiplyWith(Math.cos(theta)).addWith(forward.multiplyWith(Math.sin(theta))).multiplyWith(sinPhi).addWith(upVector).rawElements, "t2", 13);
	
	                        case 13:
	                            i++;
	                            _context9.next = 10;
	                            break;
	
	                        case 16:
	                            j++;
	                            _context9.next = 5;
	                            break;
	
	                        case 19:
	                        case "end":
	                            return _context9.stop();
	                    }
	                }
	            }, spherePosition, this);
	        })
	    }, {
	        key: "quadNormal",
	        value: regeneratorRuntime.mark(function quadNormal(normal) {
	            return regeneratorRuntime.wrap(function quadNormal$(_context10) {
	                while (1) {
	                    switch (_context10.prev = _context10.next) {
	                        case 0:
	                            return _context10.delegateYield(normal.rawElements, "t0", 1);
	
	                        case 1:
	                            return _context10.delegateYield(normal.rawElements, "t1", 2);
	
	                        case 2:
	                            return _context10.delegateYield(normal.rawElements, "t2", 3);
	
	                        case 3:
	                            return _context10.delegateYield(normal.rawElements, "t3", 4);
	
	                        case 4:
	                        case "end":
	                            return _context10.stop();
	                    }
	                }
	            }, quadNormal, this);
	        })
	    }, {
	        key: "ellipseNormal",
	        value: regeneratorRuntime.mark(function ellipseNormal(normal, divide) {
	            var i;
	            return regeneratorRuntime.wrap(function ellipseNormal$(_context11) {
	                while (1) {
	                    switch (_context11.prev = _context11.next) {
	                        case 0:
	                            i = 0;
	
	                        case 1:
	                            if (!(i < divide + 1)) {
	                                _context11.next = 6;
	                                break;
	                            }
	
	                            return _context11.delegateYield(normal.rawElements, "t0", 3);
	
	                        case 3:
	                            i++;
	                            _context11.next = 1;
	                            break;
	
	                        case 6:
	                        case "end":
	                            return _context11.stop();
	                    }
	                }
	            }, ellipseNormal, this);
	        })
	    }, {
	        key: "triangleNormal",
	        value: regeneratorRuntime.mark(function triangleNormal(normal) {
	            return regeneratorRuntime.wrap(function triangleNormal$(_context12) {
	                while (1) {
	                    switch (_context12.prev = _context12.next) {
	                        case 0:
	                            return _context12.delegateYield(normal.rawElements, "t0", 1);
	
	                        case 1:
	                            return _context12.delegateYield(normal.rawElements, "t1", 2);
	
	                        case 2:
	                            return _context12.delegateYield(normal.rawElements, "t2", 3);
	
	                        case 3:
	                        case "end":
	                            return _context12.stop();
	                    }
	                }
	            }, triangleNormal, this);
	        })
	    }, {
	        key: "cubeNormal",
	        value: regeneratorRuntime.mark(function cubeNormal(center, up, right, forward) {
	            return regeneratorRuntime.wrap(function cubeNormal$(_context13) {
	                while (1) {
	                    switch (_context13.prev = _context13.next) {
	                        case 0:
	                            return _context13.delegateYield(GeometryUtility.quadNormal(forward.negateThis()), "t0", 1);
	
	                        case 1:
	                            return _context13.delegateYield(GeometryUtility.quadNormal(forward), "t1", 2);
	
	                        case 2:
	                            return _context13.delegateYield(GeometryUtility.quadNormal(up), "t2", 3);
	
	                        case 3:
	                            return _context13.delegateYield(GeometryUtility.quadNormal(right), "t3", 4);
	
	                        case 4:
	                            return _context13.delegateYield(GeometryUtility.quadNormal(up.negateThis()), "t4", 5);
	
	                        case 5:
	                            return _context13.delegateYield(GeometryUtility.quadNormal(right.negateThis()), "t5", 6);
	
	                        case 6:
	                        case "end":
	                            return _context13.stop();
	                    }
	                }
	            }, cubeNormal, this);
	        })
	    }, {
	        key: "cylinderNormal",
	        value: regeneratorRuntime.mark(function cylinderNormal(center, up, right, forward, divide) {
	            var step, lastRight, i, theta, sin, cos, currentRight;
	            return regeneratorRuntime.wrap(function cylinderNormal$(_context14) {
	                while (1) {
	                    switch (_context14.prev = _context14.next) {
	                        case 0:
	                            return _context14.delegateYield(GeometryUtility.ellipseNormal(up, divide), "t0", 1);
	
	                        case 1:
	                            return _context14.delegateYield(GeometryUtility.ellipseNormal(up.negateThis(), divide), "t1", 2);
	
	                        case 2:
	                            step = 2 * Math.PI / divide;
	                            lastRight = new _Vector2.default(Math.cos(-step / 2), center.Y, Math.sin(-step / 2));
	                            i = 0;
	
	                        case 5:
	                            if (!(i < divide)) {
	                                _context14.next = 18;
	                                break;
	                            }
	
	                            theta = step * (i + 1);
	                            sin = Math.sin(Math.PI / 2 - theta);
	                            cos = Math.cos(Math.PI / 2 - theta);
	                            currentRight = new _Vector2.default(Math.cos(-step / 2 - theta), center.Y, Math.sin(-step / 2 - theta));
	                            return _context14.delegateYield(_Vector2.default.cross(lastRight, up).rawElements, "t2", 11);
	
	                        case 11:
	                            return _context14.delegateYield(_Vector2.default.cross(currentRight, up).rawElements, "t3", 12);
	
	                        case 12:
	                            return _context14.delegateYield(_Vector2.default.cross(currentRight, up).rawElements, "t4", 13);
	
	                        case 13:
	                            return _context14.delegateYield(_Vector2.default.cross(lastRight, up).rawElements, "t5", 14);
	
	                        case 14:
	                            lastRight = currentRight;
	
	                        case 15:
	                            i++;
	                            _context14.next = 5;
	                            break;
	
	                        case 18:
	                        case "end":
	                            return _context14.stop();
	                    }
	                }
	            }, cylinderNormal, this);
	        })
	    }, {
	        key: "coneNormal",
	        value: regeneratorRuntime.mark(function coneNormal(center, up, right, forward, divide) {
	            var step, d, lastNormal, i, theta, sin, cos, currentCenter, currentRight;
	            return regeneratorRuntime.wrap(function coneNormal$(_context15) {
	                while (1) {
	                    switch (_context15.prev = _context15.next) {
	                        case 0:
	                            return _context15.delegateYield(GeometryUtility.ellipseNormal(up.negateThis(), divide), "t0", 1);
	
	                        case 1:
	                            step = Math.PI / divide;
	                            d = Math.cos(step / 2) / 2;
	                            lastNormal = _Vector2.default.cross(new _Vector2.default(Math.cos(step / 2), center.Y, Math.sin(step / 2)), up.subtractWith(new _Vector2.default(d * Math.cos((Math.PI + step) / 2), center.Y, d * Math.sin((Math.PI + step) / 2))));
	                            i = 0;
	
	                        case 5:
	                            if (!(i < divide * 2)) {
	                                _context15.next = 18;
	                                break;
	                            }
	
	                            theta = step * i;
	                            sin = Math.sin((Math.PI - step) / 2 - theta);
	                            cos = Math.cos((Math.PI - step) / 2 - theta);
	                            currentCenter = new _Vector2.default(d * cos, center.Y, d * sin);
	                            currentRight = new _Vector2.default(Math.cos(-step / 2 - theta), center.Y, Math.sin(-step / 2 - theta));
	                            return _context15.delegateYield(_Vector2.default.cross(currentRight, up.subtractWith(currentCenter)).rawElements, "t1", 12);
	
	                        case 12:
	                            if (!(i % 2 == 1)) {
	                                _context15.next = 15;
	                                break;
	                            }
	
	                            return _context15.delegateYield(lastNormal.rawElements, "t2", 14);
	
	                        case 14:
	                            lastNormal = _Vector2.default.cross(currentRight, up.subtractWith(currentCenter));
	
	                        case 15:
	                            i++;
	                            _context15.next = 5;
	                            break;
	
	                        case 18:
	                            return _context15.delegateYield(_Vector2.default.cross(new _Vector2.default(Math.cos(step / 2), center.Y, Math.sin(step / 2)), up.subtractWith(new _Vector2.default(d * Math.cos((Math.PI + step) / 2), center.Y, d * Math.sin((Math.PI + step) / 2)))).rawElements, "t3", 19);
	
	                        case 19:
	                        case "end":
	                            return _context15.stop();
	                    }
	                }
	            }, coneNormal, this);
	        })
	    }, {
	        key: "planeNormal",
	        value: regeneratorRuntime.mark(function planeNormal(normal, divide) {
	            var s, i, _i2;
	
	            return regeneratorRuntime.wrap(function planeNormal$(_context16) {
	                while (1) {
	                    switch (_context16.prev = _context16.next) {
	                        case 0:
	                            s = GeometryUtility.planeSize(divide) / 2;
	                            i = 0;
	
	                        case 2:
	                            if (!(i < s)) {
	                                _context16.next = 7;
	                                break;
	                            }
	
	                            return _context16.delegateYield(normal.rawElements, "t0", 4);
	
	                        case 4:
	                            i++;
	                            _context16.next = 2;
	                            break;
	
	                        case 7:
	                            _i2 = 0;
	
	                        case 8:
	                            if (!(_i2 < s)) {
	                                _context16.next = 13;
	                                break;
	                            }
	
	                            return _context16.delegateYield(normal.negateThis().rawElements, "t1", 10);
	
	                        case 10:
	                            _i2++;
	                            _context16.next = 8;
	                            break;
	
	                        case 13:
	                        case "end":
	                            return _context16.stop();
	                    }
	                }
	            }, planeNormal, this);
	        })
	    }, {
	        key: "sphereNormal",
	        value: regeneratorRuntime.mark(function sphereNormal(up, right, forward, rowDiv, circleDiv) {
	            return regeneratorRuntime.wrap(function sphereNormal$(_context17) {
	                while (1) {
	                    switch (_context17.prev = _context17.next) {
	                        case 0:
	                            return _context17.delegateYield(GeometryUtility.spherePosition(_Vector2.default.Zero, up, right, forward, rowDiv, circleDiv), "t0", 1);
	
	                        case 1:
	                        case "end":
	                            return _context17.stop();
	                    }
	                }
	            }, sphereNormal, this);
	        })
	    }, {
	        key: "sphereTexCoord",
	        value: regeneratorRuntime.mark(function sphereTexCoord(rowDiv, circleDiv) {
	            var ia, ja, j, phi, sinPhi, i, theta;
	            return regeneratorRuntime.wrap(function sphereTexCoord$(_context18) {
	                while (1) {
	                    switch (_context18.prev = _context18.next) {
	                        case 0:
	                            return _context18.delegateYield([0, 0, 0, 1], "t0", 1);
	
	                        case 1:
	                            ia = 2 * Math.PI / circleDiv;
	                            ja = Math.PI / (rowDiv + 1);
	                            j = 1;
	
	                        case 4:
	                            if (!(j <= rowDiv)) {
	                                _context18.next = 17;
	                                break;
	                            }
	
	                            phi = ja * j;
	                            sinPhi = Math.sin(phi);
	                            i = 0;
	
	                        case 8:
	                            if (!(i <= circleDiv)) {
	                                _context18.next = 14;
	                                break;
	                            }
	
	                            theta = ia * i;
	                            return _context18.delegateYield([theta / Math.PI / 2, phi / Math.PI], "t1", 11);
	
	                        case 11:
	                            i++;
	                            _context18.next = 8;
	                            break;
	
	                        case 14:
	                            j++;
	                            _context18.next = 4;
	                            break;
	
	                        case 17:
	                        case "end":
	                            return _context18.stop();
	                    }
	                }
	            }, sphereTexCoord, this);
	        })
	    }, {
	        key: "quadTexCoord",
	        value: regeneratorRuntime.mark(function quadTexCoord() {
	            return regeneratorRuntime.wrap(function quadTexCoord$(_context19) {
	                while (1) {
	                    switch (_context19.prev = _context19.next) {
	                        case 0:
	                            return _context19.delegateYield([0, 0], "t0", 1);
	
	                        case 1:
	                            return _context19.delegateYield([1, 0], "t1", 2);
	
	                        case 2:
	                            return _context19.delegateYield([1, 1], "t2", 3);
	
	                        case 3:
	                            return _context19.delegateYield([0, 1], "t3", 4);
	
	                        case 4:
	                        case "end":
	                            return _context19.stop();
	                    }
	                }
	            }, quadTexCoord, this);
	        })
	    }, {
	        key: "cubeTexCoord",
	        value: regeneratorRuntime.mark(function cubeTexCoord() {
	            var i;
	            return regeneratorRuntime.wrap(function cubeTexCoord$(_context20) {
	                while (1) {
	                    switch (_context20.prev = _context20.next) {
	                        case 0:
	                            i = 0;
	
	                        case 1:
	                            if (!(i < 6)) {
	                                _context20.next = 6;
	                                break;
	                            }
	
	                            return _context20.delegateYield(GeometryUtility.quadTexCoord(), "t0", 3);
	
	                        case 3:
	                            i++;
	                            _context20.next = 1;
	                            break;
	
	                        case 6:
	                        case "end":
	                            return _context20.stop();
	                    }
	                }
	            }, cubeTexCoord, this);
	        })
	    }, {
	        key: "triangleTexCoord",
	        value: regeneratorRuntime.mark(function triangleTexCoord() {
	            return regeneratorRuntime.wrap(function triangleTexCoord$(_context21) {
	                while (1) {
	                    switch (_context21.prev = _context21.next) {
	                        case 0:
	                            return _context21.delegateYield([0, 0], "t0", 1);
	
	                        case 1:
	                            return _context21.delegateYield([1, 0], "t1", 2);
	
	                        case 2:
	                            return _context21.delegateYield([0, 1], "t2", 3);
	
	                        case 3:
	                        case "end":
	                            return _context21.stop();
	                    }
	                }
	            }, triangleTexCoord, this);
	        })
	    }, {
	        key: "ellipseTexCoord",
	        value: regeneratorRuntime.mark(function ellipseTexCoord(divide) {
	            var step, i, theta;
	            return regeneratorRuntime.wrap(function ellipseTexCoord$(_context22) {
	                while (1) {
	                    switch (_context22.prev = _context22.next) {
	                        case 0:
	                            return _context22.delegateYield([0.5, 0.5], "t0", 1);
	
	                        case 1:
	                            step = 2 * Math.PI / divide;
	                            i = 0;
	
	                        case 3:
	                            if (!(i < divide)) {
	                                _context22.next = 9;
	                                break;
	                            }
	
	                            theta = step * i;
	                            return _context22.delegateYield([0.5 + Math.cos(theta + Math.PI) / 2, 0.5 + Math.sin(theta + Math.PI) / 2], "t1", 6);
	
	                        case 6:
	                            i++;
	                            _context22.next = 3;
	                            break;
	
	                        case 9:
	                        case "end":
	                            return _context22.stop();
	                    }
	                }
	            }, ellipseTexCoord, this);
	        })
	    }, {
	        key: "planeTexCoord",
	        value: regeneratorRuntime.mark(function planeTexCoord(divide) {
	            var i, j, _i3, _j2;
	
	            return regeneratorRuntime.wrap(function planeTexCoord$(_context23) {
	                while (1) {
	                    switch (_context23.prev = _context23.next) {
	                        case 0:
	                            i = 0;
	
	                        case 1:
	                            if (!(i < divide + 1)) {
	                                _context23.next = 11;
	                                break;
	                            }
	
	                            j = 0;
	
	                        case 3:
	                            if (!(j < divide + 1)) {
	                                _context23.next = 8;
	                                break;
	                            }
	
	                            return _context23.delegateYield([j / divide, i / divide], "t0", 5);
	
	                        case 5:
	                            j++;
	                            _context23.next = 3;
	                            break;
	
	                        case 8:
	                            i++;
	                            _context23.next = 1;
	                            break;
	
	                        case 11:
	                            _i3 = 0;
	
	                        case 12:
	                            if (!(_i3 < divide + 1)) {
	                                _context23.next = 22;
	                                break;
	                            }
	
	                            _j2 = 0;
	
	                        case 14:
	                            if (!(_j2 < divide + 1)) {
	                                _context23.next = 19;
	                                break;
	                            }
	
	                            return _context23.delegateYield([_j2 / divide, _i3 / divide], "t1", 16);
	
	                        case 16:
	                            _j2++;
	                            _context23.next = 14;
	                            break;
	
	                        case 19:
	                            _i3++;
	                            _context23.next = 12;
	                            break;
	
	                        case 22:
	                        case "end":
	                            return _context23.stop();
	                    }
	                }
	            }, planeTexCoord, this);
	        })
	    }, {
	        key: "cylinderTexCoord",
	        value: regeneratorRuntime.mark(function cylinderTexCoord(divide) {
	            var p, j;
	            return regeneratorRuntime.wrap(function cylinderTexCoord$(_context24) {
	                while (1) {
	                    switch (_context24.prev = _context24.next) {
	                        case 0:
	                            return _context24.delegateYield(GeometryUtility.ellipseTexCoord(divide), "t0", 1);
	
	                        case 1:
	                            return _context24.delegateYield(GeometryUtility.ellipseTexCoord(divide), "t1", 2);
	
	                        case 2:
	                            p = 1 / divide;
	                            j = 0;
	
	                        case 4:
	                            if (!(j < divide)) {
	                                _context24.next = 12;
	                                break;
	                            }
	
	                            return _context24.delegateYield([p * j, 0], "t2", 6);
	
	                        case 6:
	                            return _context24.delegateYield([p * (j + 1), 0], "t3", 7);
	
	                        case 7:
	                            return _context24.delegateYield([p * (j + 1), 1], "t4", 8);
	
	                        case 8:
	                            return _context24.delegateYield([p * j, 1], "t5", 9);
	
	                        case 9:
	                            j++;
	                            _context24.next = 4;
	                            break;
	
	                        case 12:
	                        case "end":
	                            return _context24.stop();
	                    }
	                }
	            }, cylinderTexCoord, this);
	        })
	    }, {
	        key: "coneTexCoord",
	        value: regeneratorRuntime.mark(function coneTexCoord(divide) {
	            var step, i, theta;
	            return regeneratorRuntime.wrap(function coneTexCoord$(_context25) {
	                while (1) {
	                    switch (_context25.prev = _context25.next) {
	                        case 0:
	                            return _context25.delegateYield(GeometryUtility.ellipseTexCoord(divide), "t0", 1);
	
	                        case 1:
	                            step = Math.PI / 2 / divide;
	                            i = 0;
	
	                        case 3:
	                            if (!(i < divide)) {
	                                _context25.next = 11;
	                                break;
	                            }
	
	                            theta = -step * i;
	                            return _context25.delegateYield([0, 0], "t1", 6);
	
	                        case 6:
	                            return _context25.delegateYield([Math.cos(theta - step), Math.sin(theta - step)], "t2", 7);
	
	                        case 7:
	                            return _context25.delegateYield([Math.cos(theta), Math.sin(theta)], "t3", 8);
	
	                        case 8:
	                            i++;
	                            _context25.next = 3;
	                            break;
	
	                        case 11:
	                        case "end":
	                            return _context25.stop();
	                    }
	                }
	            }, coneTexCoord, this);
	        })
	    }, {
	        key: "triangleIndex",
	        value: regeneratorRuntime.mark(function triangleIndex(offset) {
	            var o;
	            return regeneratorRuntime.wrap(function triangleIndex$(_context26) {
	                while (1) {
	                    switch (_context26.prev = _context26.next) {
	                        case 0:
	                            o = offset;
	                            return _context26.delegateYield([o, o + 2, o + 1], "t0", 2);
	
	                        case 2:
	                        case "end":
	                            return _context26.stop();
	                    }
	                }
	            }, triangleIndex, this);
	        })
	    }, {
	        key: "quadIndex",
	        value: regeneratorRuntime.mark(function quadIndex(offset) {
	            var o;
	            return regeneratorRuntime.wrap(function quadIndex$(_context27) {
	                while (1) {
	                    switch (_context27.prev = _context27.next) {
	                        case 0:
	                            o = offset;
	                            return _context27.delegateYield([o, o + 2, o + 1, o, o + 3, o + 2], "t0", 2);
	
	                        case 2:
	                        case "end":
	                            return _context27.stop();
	                    }
	                }
	            }, quadIndex, this);
	        })
	    }, {
	        key: "cubeIndex",
	        value: regeneratorRuntime.mark(function cubeIndex(offset) {
	            var s, i;
	            return regeneratorRuntime.wrap(function cubeIndex$(_context28) {
	                while (1) {
	                    switch (_context28.prev = _context28.next) {
	                        case 0:
	                            s = GeometryUtility.quadSize();
	                            i = 0;
	
	                        case 2:
	                            if (!(i < 6)) {
	                                _context28.next = 7;
	                                break;
	                            }
	
	                            return _context28.delegateYield(GeometryUtility.quadIndex(offset + s * i), "t0", 4);
	
	                        case 4:
	                            i++;
	                            _context28.next = 2;
	                            break;
	
	                        case 7:
	                        case "end":
	                            return _context28.stop();
	                    }
	                }
	            }, cubeIndex, this);
	        })
	    }, {
	        key: "sphereIndex",
	        value: regeneratorRuntime.mark(function sphereIndex(offset, rowDiv, circleDiv) {
	            var getIndex, top, bottom, i, j, _i4, _i5;
	
	            return regeneratorRuntime.wrap(function sphereIndex$(_context29) {
	                while (1) {
	                    switch (_context29.prev = _context29.next) {
	                        case 0:
	                            getIndex = function getIndex(i, j) {
	                                return offset + (circleDiv + 1) * j + 2 + i;
	                            };
	
	                            top = offset;
	                            bottom = offset + 1;
	                            // upper side
	
	                            i = 0;
	
	                        case 4:
	                            if (!(i < circleDiv)) {
	                                _context29.next = 14;
	                                break;
	                            }
	
	                            _context29.next = 7;
	                            return top;
	
	                        case 7:
	                            _context29.next = 9;
	                            return getIndex(i, 0);
	
	                        case 9:
	                            _context29.next = 11;
	                            return getIndex(i + 1, 0);
	
	                        case 11:
	                            i++;
	                            _context29.next = 4;
	                            break;
	
	                        case 14:
	                            j = 0;
	
	                        case 15:
	                            if (!(j < rowDiv - 1)) {
	                                _context29.next = 36;
	                                break;
	                            }
	
	                            _i4 = 0;
	
	                        case 17:
	                            if (!(_i4 < circleDiv)) {
	                                _context29.next = 33;
	                                break;
	                            }
	
	                            _context29.next = 20;
	                            return getIndex(_i4, j);
	
	                        case 20:
	                            _context29.next = 22;
	                            return getIndex(_i4, j + 1);
	
	                        case 22:
	                            _context29.next = 24;
	                            return getIndex(_i4 + 1, j);
	
	                        case 24:
	                            _context29.next = 26;
	                            return getIndex(_i4, j + 1);
	
	                        case 26:
	                            _context29.next = 28;
	                            return getIndex(_i4 + 1, j + 1);
	
	                        case 28:
	                            _context29.next = 30;
	                            return getIndex(_i4 + 1, j);
	
	                        case 30:
	                            _i4++;
	                            _context29.next = 17;
	                            break;
	
	                        case 33:
	                            j++;
	                            _context29.next = 15;
	                            break;
	
	                        case 36:
	                            _i5 = 0;
	
	                        case 37:
	                            if (!(_i5 < circleDiv)) {
	                                _context29.next = 47;
	                                break;
	                            }
	
	                            _context29.next = 40;
	                            return bottom;
	
	                        case 40:
	                            _context29.next = 42;
	                            return getIndex(_i5 + 1, rowDiv - 1);
	
	                        case 42:
	                            _context29.next = 44;
	                            return getIndex(_i5, rowDiv - 1);
	
	                        case 44:
	                            _i5++;
	                            _context29.next = 37;
	                            break;
	
	                        case 47:
	                        case "end":
	                            return _context29.stop();
	                    }
	                }
	            }, sphereIndex, this);
	        })
	    }, {
	        key: "cylinderIndex",
	        value: regeneratorRuntime.mark(function cylinderIndex(offset, divide) {
	            var s, t, i;
	            return regeneratorRuntime.wrap(function cylinderIndex$(_context30) {
	                while (1) {
	                    switch (_context30.prev = _context30.next) {
	                        case 0:
	                            s = GeometryUtility.ellipseSize(divide);
	                            t = GeometryUtility.quadSize();
	                            return _context30.delegateYield(GeometryUtility.ellipseIndex(offset, divide), "t0", 3);
	
	                        case 3:
	                            return _context30.delegateYield(GeometryUtility.ellipseIndex(offset + s, divide), "t1", 4);
	
	                        case 4:
	                            i = 0;
	
	                        case 5:
	                            if (!(i < divide)) {
	                                _context30.next = 10;
	                                break;
	                            }
	
	                            return _context30.delegateYield(GeometryUtility.quadIndex(offset + s * 2 + t * i), "t2", 7);
	
	                        case 7:
	                            i++;
	                            _context30.next = 5;
	                            break;
	
	                        case 10:
	                        case "end":
	                            return _context30.stop();
	                    }
	                }
	            }, cylinderIndex, this);
	        })
	    }, {
	        key: "coneIndex",
	        value: regeneratorRuntime.mark(function coneIndex(offset, divide) {
	            var s, t, i;
	            return regeneratorRuntime.wrap(function coneIndex$(_context31) {
	                while (1) {
	                    switch (_context31.prev = _context31.next) {
	                        case 0:
	                            s = GeometryUtility.ellipseSize(divide);
	                            t = GeometryUtility.triangleSize();
	                            return _context31.delegateYield(GeometryUtility.ellipseIndex(offset, divide), "t0", 3);
	
	                        case 3:
	                            i = 0;
	
	                        case 4:
	                            if (!(i < divide)) {
	                                _context31.next = 9;
	                                break;
	                            }
	
	                            return _context31.delegateYield(GeometryUtility.triangleIndex(offset + s + i * t), "t1", 6);
	
	                        case 6:
	                            i++;
	                            _context31.next = 4;
	                            break;
	
	                        case 9:
	                        case "end":
	                            return _context31.stop();
	                    }
	                }
	            }, coneIndex, this);
	        })
	    }, {
	        key: "planeIndex",
	        value: regeneratorRuntime.mark(function planeIndex(offset, divide) {
	            var o, s, j, i, _j3, _i6;
	
	            return regeneratorRuntime.wrap(function planeIndex$(_context32) {
	                while (1) {
	                    switch (_context32.prev = _context32.next) {
	                        case 0:
	                            o = offset;
	                            s = GeometryUtility.planeSize(divide) / 2;
	                            j = 0;
	
	                        case 3:
	                            if (!(j < divide)) {
	                                _context32.next = 15;
	                                break;
	                            }
	
	                            i = 0;
	
	                        case 5:
	                            if (!(i < divide)) {
	                                _context32.next = 12;
	                                break;
	                            }
	
	                            o = offset + i + j * (divide + 1);
	                            return _context32.delegateYield([o, o + divide + 2, o + 1], "t0", 8);
	
	                        case 8:
	                            return _context32.delegateYield([o, o + divide + 1, o + divide + 2], "t1", 9);
	
	                        case 9:
	                            i++;
	                            _context32.next = 5;
	                            break;
	
	                        case 12:
	                            j++;
	                            _context32.next = 3;
	                            break;
	
	                        case 15:
	                            _j3 = 0;
	
	                        case 16:
	                            if (!(_j3 < divide)) {
	                                _context32.next = 28;
	                                break;
	                            }
	
	                            _i6 = 0;
	
	                        case 18:
	                            if (!(_i6 < divide)) {
	                                _context32.next = 25;
	                                break;
	                            }
	
	                            o = offset + _i6 + _j3 * (divide + 1) + s;
	                            return _context32.delegateYield([o, o + 1, o + divide + 2], "t2", 21);
	
	                        case 21:
	                            return _context32.delegateYield([o, o + divide + 2, o + divide + 1], "t3", 22);
	
	                        case 22:
	                            _i6++;
	                            _context32.next = 18;
	                            break;
	
	                        case 25:
	                            _j3++;
	                            _context32.next = 16;
	                            break;
	
	                        case 28:
	                        case "end":
	                            return _context32.stop();
	                    }
	                }
	            }, planeIndex, this);
	        })
	    }, {
	        key: "ellipseIndex",
	        value: regeneratorRuntime.mark(function ellipseIndex(offset, divide) {
	            var i;
	            return regeneratorRuntime.wrap(function ellipseIndex$(_context33) {
	                while (1) {
	                    switch (_context33.prev = _context33.next) {
	                        case 0:
	                            i = 0;
	
	                        case 1:
	                            if (!(i < divide - 1)) {
	                                _context33.next = 6;
	                                break;
	                            }
	
	                            return _context33.delegateYield([offset, offset + 1 + i, offset + 2 + i], "t0", 3);
	
	                        case 3:
	                            i++;
	                            _context33.next = 1;
	                            break;
	
	                        case 6:
	                            return _context33.delegateYield([offset, offset + divide, offset + 1], "t1", 7);
	
	                        case 7:
	                        case "end":
	                            return _context33.stop();
	                    }
	                }
	            }, ellipseIndex, this);
	        })
	    }, {
	        key: "quadSize",
	        value: function quadSize() {
	            return 4;
	        }
	    }, {
	        key: "triangleSize",
	        value: function triangleSize() {
	            return 3;
	        }
	    }, {
	        key: "cubeSize",
	        value: function cubeSize() {
	            return 6 * GeometryUtility.quadSize();
	        }
	    }, {
	        key: "sphereSize",
	        value: function sphereSize(rowDiv, circleDiv) {
	            return 2 + rowDiv * (circleDiv + 1);
	        }
	    }, {
	        key: "cylinderSize",
	        value: function cylinderSize(divide) {
	            return GeometryUtility.ellipseSize(divide) * 2 + divide * GeometryUtility.quadSize();
	        }
	    }, {
	        key: "coneSize",
	        value: function coneSize(divide) {
	            return GeometryUtility.ellipseSize(divide) + divide * GeometryUtility.triangleSize();
	        }
	    }, {
	        key: "planeSize",
	        value: function planeSize(divide) {
	            return (divide + 1) * (divide + 1) * 2;
	        }
	    }, {
	        key: "ellipseSize",
	        value: function ellipseSize(divide) {
	            return divide + 1;
	        }
	    }]);
	
	    return GeometryUtility;
	}();
	
	exports.default = GeometryUtility;

/***/ },
/* 105 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Vector = __webpack_require__(9);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	var _AABB = __webpack_require__(103);
	
	var _AABB2 = _interopRequireDefault(_AABB);
	
	var _Buffer = __webpack_require__(106);
	
	var _Buffer2 = _interopRequireDefault(_Buffer);
	
	var _Geometry = __webpack_require__(89);
	
	var _Geometry2 = _interopRequireDefault(_Geometry);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Helper class to instanciate Geometry easily.
	 */
	var GeometryBuilder = function () {
	    function GeometryBuilder() {
	        _classCallCheck(this, GeometryBuilder);
	    }
	
	    _createClass(GeometryBuilder, null, [{
	        key: "build",
	        value: function build(gl, info) {
	            if (info["verticies"] | info["indicies"]) {
	                throw new Error("Misspelled API was fixed already. use vertices and indices");
	            }
	            var buffers = {};
	            var attribs = {};
	            var aabb = info.aabb;
	            var needConstructAABB = !aabb;
	            if (needConstructAABB) {
	                aabb = new _AABB2.default();
	            }
	            for (var bufferKey in info.vertices) {
	                var byteWidth = 4;
	                var buffer = info.vertices[bufferKey];
	                var sizeSum = 0;
	                for (var attribKey in buffer.size) {
	                    if (attribs[attribKey]) {
	                        throw new Error("Attribute variable name was dupelicated");
	                    }
	                    var size = buffer.size[attribKey];
	                    attribs[attribKey] = {
	                        size: size,
	                        offset: sizeSum * byteWidth,
	                        bufferName: bufferKey,
	                        type: buffer.type ? buffer.type : WebGLRenderingContext.FLOAT,
	                        stride: 0
	                    };
	                    sizeSum += size;
	                }
	                for (var _attribKey in buffer.size) {
	                    attribs[_attribKey].stride = sizeSum * byteWidth;
	                }
	                // generate source array of vertex buffer
	                var bufferSource = new Array(sizeSum * buffer.count);
	                var bufferGenerator = buffer.getGenerators();
	                var generators = [];
	                var positionGeneratorIndex = 0;
	                var sizes = [];
	                var beforeEach = bufferGenerator.beforeEach ? bufferGenerator.beforeEach() : undefined;
	                for (var _attribKey2 in buffer.size) {
	                    if (_attribKey2 === "beforeEach") {
	                        continue;
	                    }
	                    var generator = bufferGenerator[_attribKey2];
	                    generators.push(generator());
	                    sizes.push(buffer.size[_attribKey2]);
	                    if (_attribKey2 === "position") {
	                        positionGeneratorIndex = generators.length - 1;
	                    }
	                }
	                var i = 0;
	                for (var vertCount = 0; vertCount < buffer.count; vertCount++) {
	                    if (beforeEach && beforeEach.next().done) {
	                        throw new Error("before each was ended before reaching count.");
	                    }
	                    for (var genIndex = 0; genIndex < generators.length; genIndex++) {
	                        var _generator = generators[genIndex];
	                        for (var sizeIndex = 0; sizeIndex < sizes[genIndex]; sizeIndex++) {
	                            var genResult = _generator.next();
	                            if (genResult.done) {
	                                throw new Error("Generator function finished before reaching specified count");
	                            }
	                            bufferSource[i] = genResult.value;
	                            i++;
	                        }
	                        if (needConstructAABB && genIndex === positionGeneratorIndex) {
	                            aabb.expand(new _Vector2.default(bufferSource[i - 3], bufferSource[i - 2], bufferSource[i - 1]));
	                        }
	                    }
	                }
	                // instanciate buffers
	                buffers[bufferKey] = new _Buffer2.default(gl, WebGLRenderingContext.ARRAY_BUFFER, buffer.usage ? buffer.usage : WebGLRenderingContext.STATIC_DRAW);
	                buffers[bufferKey].update(new Float32Array(bufferSource));
	            }
	            return new _Geometry2.default(buffers, attribs, this._generateIndices(gl, info.indices), aabb);
	        }
	    }, {
	        key: "_generateIndices",
	        value: function _generateIndices(gl, indexGenerator) {
	            var indexMap = {};
	            for (var indexName in indexGenerator) {
	                var indices = [];
	                var generatorInfo = indexGenerator[indexName];
	                var _iteratorNormalCompletion = true;
	                var _didIteratorError = false;
	                var _iteratorError = undefined;
	
	                try {
	                    for (var _iterator = generatorInfo.generator()[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                        var variable = _step.value;
	
	                        indices.push(variable);
	                    }
	                } catch (err) {
	                    _didIteratorError = true;
	                    _iteratorError = err;
	                } finally {
	                    try {
	                        if (!_iteratorNormalCompletion && _iterator.return) {
	                            _iterator.return();
	                        }
	                    } finally {
	                        if (_didIteratorError) {
	                            throw _iteratorError;
	                        }
	                    }
	                }
	
	                var bufferType = this._getIndexType(indices.length);
	                var buffer = new _Buffer2.default(gl, WebGLRenderingContext.ELEMENT_ARRAY_BUFFER, WebGLRenderingContext.STATIC_DRAW);
	                buffer.update(new bufferType.ctor(indices));
	                indexMap[indexName] = {
	                    count: indices.length,
	                    index: buffer,
	                    type: bufferType.format,
	                    byteSize: bufferType.byteSize,
	                    byteOffset: 0,
	                    topology: generatorInfo.topology ? generatorInfo.topology : WebGLRenderingContext.TRIANGLES
	                };
	            }
	            return indexMap;
	        }
	        /**
	         * Determine which index type should be used
	         * @param  {number} length [description]
	         * @return {[type]}        [description]
	         */
	
	    }, {
	        key: "_getIndexType",
	        value: function _getIndexType(length) {
	            var format = WebGLRenderingContext.UNSIGNED_INT;
	            var arrayConstructor = Uint32Array;
	            var byteSize = 4;
	            if (length < 256) {
	                format = WebGLRenderingContext.UNSIGNED_BYTE;
	                arrayConstructor = Uint8Array;
	                byteSize = 1;
	            } else if (length < 65535) {
	                format = WebGLRenderingContext.UNSIGNED_SHORT;
	                arrayConstructor = Uint16Array;
	                byteSize = 2;
	            } else if (length >= 4294967296) {
	                throw new Error("Too many index of geometry!");
	            }
	            return {
	                format: format,
	                ctor: arrayConstructor,
	                byteSize: byteSize
	            };
	        }
	    }]);
	
	    return GeometryBuilder;
	}();
	
	exports.default = GeometryBuilder;

/***/ },
/* 106 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if ("value" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };
	
	var _ResourceBase2 = __webpack_require__(26);
	
	var _ResourceBase3 = _interopRequireDefault(_ResourceBase2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var Buffer = function (_ResourceBase) {
	    _inherits(Buffer, _ResourceBase);
	
	    function Buffer(gl) {
	        var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : WebGLRenderingContext.ARRAY_BUFFER;
	        var usage = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : WebGLRenderingContext.ELEMENT_ARRAY_BUFFER;
	
	        _classCallCheck(this, Buffer);
	
	        var _this = _possibleConstructorReturn(this, (Buffer.__proto__ || Object.getPrototypeOf(Buffer)).call(this, gl));
	
	        _this.target = target;
	        _this.usage = usage;
	        _this.buffer = gl.createBuffer();
	        return _this;
	    }
	
	    _createClass(Buffer, [{
	        key: "update",
	        value: function update(length, subBuffer) {
	            this.bind();
	            if (subBuffer) {
	                if (!this.valid) {
	                    this.gl.bufferData(this.target, length + subBuffer.byteLength, this.usage);
	                }
	                this.gl.bufferSubData(this.target, length, subBuffer);
	            } else {
	                if (typeof length === "number") {
	                    this.gl.bufferData(this.target, length, this.usage);
	                } else {
	                    this.gl.bufferData(this.target, length, this.usage);
	                }
	            }
	            this.valid = true;
	        }
	    }, {
	        key: "bind",
	        value: function bind() {
	            this.gl.bindBuffer(this.target, this.buffer);
	        }
	    }, {
	        key: "destroy",
	        value: function destroy() {
	            _get(Buffer.prototype.__proto__ || Object.getPrototypeOf(Buffer.prototype), "destroy", this).call(this);
	            this.gl.deleteBuffer(this.buffer);
	        }
	    }]);
	
	    return Buffer;
	}(_ResourceBase3.default);
	
	exports.default = Buffer;

/***/ },
/* 107 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _MaterialFactory = __webpack_require__(45);
	
	var _MaterialFactory2 = _interopRequireDefault(_MaterialFactory);
	
	var _Unlit = __webpack_require__(108);
	
	var _Unlit2 = _interopRequireDefault(_Unlit);
	
	var _UnlitColor = __webpack_require__(109);
	
	var _UnlitColor2 = _interopRequireDefault(_UnlitColor);
	
	var _UnlitTextured = __webpack_require__(110);
	
	var _UnlitTextured2 = _interopRequireDefault(_UnlitTextured);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var DefaultMaterial = function () {
	    function DefaultMaterial() {
	        _classCallCheck(this, DefaultMaterial);
	    }
	
	    _createClass(DefaultMaterial, null, [{
	        key: "register",
	        value: function register() {
	            _MaterialFactory2.default.addSORTMaterial("unlit", _Unlit2.default);
	            _MaterialFactory2.default.addSORTMaterial("unlit-texture", _UnlitTextured2.default);
	            _MaterialFactory2.default.addSORTMaterial("unlit-color", _UnlitColor2.default);
	        }
	    }]);
	
	    return DefaultMaterial;
	}();
	
	exports.default = DefaultMaterial;

/***/ },
/* 108 */
/***/ function(module, exports) {

	module.exports = "@Pass\n@BlendFunc(SRC_ALPHA,ONE_MINUS_SRC_ALPHA)\nFS_PREC(mediump,float)\nvarying vec2 vTexCoord;\n#ifdef VS\nattribute vec3 position;\nattribute vec2 texCoord;\nuniform mat4 _matPVM;\nvoid main()\n{\n  gl_Position = _matPVM * vec4(position,1.0);\n  vTexCoord = texCoord;\n}\n#endif\n#ifdef FS\n@{type:\"color\",default:\"white\"}\nuniform vec4 color;\n@{usedFlag:\"_textureUsed\"}\nuniform sampler2D texture;\nuniform bool _textureUsed;\nvoid main(void)\n{\n  if(_textureUsed){\n    gl_FragColor = color * texture2D(texture,vTexCoord);\n  }else{\n    gl_FragColor = color;\n }\n}\n#endif\n"

/***/ },
/* 109 */
/***/ function(module, exports) {

	module.exports = "@Pass\nFS_PREC(mediump,float)\nvarying vec2 vTexCoord;\n#ifdef VS\nattribute vec3 position;\nattribute vec2 texCoord;\nuniform mat4 _matPVM;\nvoid main()\n{\n  gl_Position = _matPVM * vec4(position,1.0);\n  vTexCoord = texCoord;\n}\n#endif\n#ifdef FS\n@{type:\"color\",default:\"white\"}\nuniform vec4 color;\nvoid main(void)\n{\n    gl_FragColor = color;\n}\n#endif\n"

/***/ },
/* 110 */
/***/ function(module, exports) {

	module.exports = "@Pass\nFS_PREC(mediump,float)\nvarying vec2 vTexCoord;\n#ifdef VS\nattribute vec3 position;\nattribute vec2 texCoord;\nuniform mat4 _matPVM;\nvoid main()\n{\n  gl_Position = _matPVM * vec4(position,1.0);\n  vTexCoord = texCoord;\n}\n#endif\n#ifdef FS\nuniform sampler2D texture;\nvoid main(void)\n{\n  gl_FragColor = texture2D(texture,vTexCoord);\n}\n#endif\n"

/***/ },
/* 111 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _DefaultMaterial = __webpack_require__(107);
	
	var _DefaultMaterial2 = _interopRequireDefault(_DefaultMaterial);
	
	var _DefaultPrimitives = __webpack_require__(102);
	
	var _DefaultPrimitives2 = _interopRequireDefault(_DefaultPrimitives);
	
	var _grimoirejs = __webpack_require__(14);
	
	var _grimoirejs2 = _interopRequireDefault(_grimoirejs);
	
	var _AssetLoadingManagerComponent = __webpack_require__(13);
	
	var _AssetLoadingManagerComponent2 = _interopRequireDefault(_AssetLoadingManagerComponent);
	
	var _CameraComponent = __webpack_require__(17);
	
	var _CameraComponent2 = _interopRequireDefault(_CameraComponent);
	
	var _CanvasInitializerComponent = __webpack_require__(23);
	
	var _CanvasInitializerComponent2 = _interopRequireDefault(_CanvasInitializerComponent);
	
	var _FullscreenComponent = __webpack_require__(29);
	
	var _FullscreenComponent2 = _interopRequireDefault(_FullscreenComponent);
	
	var _GeometryComponent = __webpack_require__(30);
	
	var _GeometryComponent2 = _interopRequireDefault(_GeometryComponent);
	
	var _GeometryRegistoryComponent = __webpack_require__(32);
	
	var _GeometryRegistoryComponent2 = _interopRequireDefault(_GeometryRegistoryComponent);
	
	var _HTMLBinderComponent = __webpack_require__(33);
	
	var _HTMLBinderComponent2 = _interopRequireDefault(_HTMLBinderComponent);
	
	var _LoopManagerComponent = __webpack_require__(34);
	
	var _LoopManagerComponent2 = _interopRequireDefault(_LoopManagerComponent);
	
	var _MaterialComponent = __webpack_require__(35);
	
	var _MaterialComponent2 = _interopRequireDefault(_MaterialComponent);
	
	var _MaterialContainerComponent = __webpack_require__(42);
	
	var _MaterialContainerComponent2 = _interopRequireDefault(_MaterialContainerComponent);
	
	var _MaterialImporterComponent = __webpack_require__(44);
	
	var _MaterialImporterComponent2 = _interopRequireDefault(_MaterialImporterComponent);
	
	var _MaterialManagerComponent = __webpack_require__(64);
	
	var _MaterialManagerComponent2 = _interopRequireDefault(_MaterialManagerComponent);
	
	var _MeshRendererComponent = __webpack_require__(65);
	
	var _MeshRendererComponent2 = _interopRequireDefault(_MeshRendererComponent);
	
	var _MouseCameraControlComponent = __webpack_require__(66);
	
	var _MouseCameraControlComponent2 = _interopRequireDefault(_MouseCameraControlComponent);
	
	var _RenderBufferComponent = __webpack_require__(67);
	
	var _RenderBufferComponent2 = _interopRequireDefault(_RenderBufferComponent);
	
	var _RendererComponent = __webpack_require__(70);
	
	var _RendererComponent2 = _interopRequireDefault(_RendererComponent);
	
	var _RendererManagerComponent = __webpack_require__(71);
	
	var _RendererManagerComponent2 = _interopRequireDefault(_RendererManagerComponent);
	
	var _RenderQuadComponent = __webpack_require__(73);
	
	var _RenderQuadComponent2 = _interopRequireDefault(_RenderQuadComponent);
	
	var _RenderSceneComponent = __webpack_require__(75);
	
	var _RenderSceneComponent2 = _interopRequireDefault(_RenderSceneComponent);
	
	var _SceneComponent = __webpack_require__(21);
	
	var _SceneComponent2 = _interopRequireDefault(_SceneComponent);
	
	var _TextureBufferComponent = __webpack_require__(76);
	
	var _TextureBufferComponent2 = _interopRequireDefault(_TextureBufferComponent);
	
	var _TextureComponent = __webpack_require__(77);
	
	var _TextureComponent2 = _interopRequireDefault(_TextureComponent);
	
	var _TransformComponent = __webpack_require__(19);
	
	var _TransformComponent2 = _interopRequireDefault(_TransformComponent);
	
	var _Angle2DConverter = __webpack_require__(78);
	
	var _Angle2DConverter2 = _interopRequireDefault(_Angle2DConverter);
	
	var _BooleanConverter = __webpack_require__(80);
	
	var _BooleanConverter2 = _interopRequireDefault(_BooleanConverter);
	
	var _CanvasSizeConverter = __webpack_require__(81);
	
	var _CanvasSizeConverter2 = _interopRequireDefault(_CanvasSizeConverter);
	
	var _Color3Converter = __webpack_require__(82);
	
	var _Color3Converter2 = _interopRequireDefault(_Color3Converter);
	
	var _Color4Converter = __webpack_require__(84);
	
	var _Color4Converter2 = _interopRequireDefault(_Color4Converter);
	
	var _ComponentConverter = __webpack_require__(85);
	
	var _ComponentConverter2 = _interopRequireDefault(_ComponentConverter);
	
	var _EnumConverter = __webpack_require__(87);
	
	var _EnumConverter2 = _interopRequireDefault(_EnumConverter);
	
	var _GeometryConverter = __webpack_require__(88);
	
	var _GeometryConverter2 = _interopRequireDefault(_GeometryConverter);
	
	var _MaterialConverter = __webpack_require__(90);
	
	var _MaterialConverter2 = _interopRequireDefault(_MaterialConverter);
	
	var _TextureConverter = __webpack_require__(95);
	
	var _TextureConverter2 = _interopRequireDefault(_TextureConverter);
	
	var _NumberArrayConverter = __webpack_require__(91);
	
	var _NumberArrayConverter2 = _interopRequireDefault(_NumberArrayConverter);
	
	var _NumberConverter = __webpack_require__(92);
	
	var _NumberConverter2 = _interopRequireDefault(_NumberConverter);
	
	var _ObjectConverter = __webpack_require__(93);
	
	var _ObjectConverter2 = _interopRequireDefault(_ObjectConverter);
	
	var _Rotation3Converter = __webpack_require__(94);
	
	var _Rotation3Converter2 = _interopRequireDefault(_Rotation3Converter);
	
	var _Vector2Converter = __webpack_require__(97);
	
	var _Vector2Converter2 = _interopRequireDefault(_Vector2Converter);
	
	var _Vector3Converter = __webpack_require__(98);
	
	var _Vector3Converter2 = _interopRequireDefault(_Vector3Converter);
	
	var _Vector4Converter = __webpack_require__(99);
	
	var _Vector4Converter2 = _interopRequireDefault(_Vector4Converter);
	
	var _ViewportConverter = __webpack_require__(100);
	
	var _ViewportConverter2 = _interopRequireDefault(_ViewportConverter);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator["throw"](value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	//
	// DO NOT REMOVE THE LINE BELOW.
	//
	
	exports.default = function () {
	    _grimoirejs2.default.register(function () {
	        return __awaiter(undefined, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	            var _$ns;
	
	            return regeneratorRuntime.wrap(function _callee$(_context) {
	                while (1) {
	                    switch (_context.prev = _context.next) {
	                        case 0:
	                            _$ns = _grimoirejs2.default.ns("HTTP://GRIMOIRE.GL/NS/DEFAULT");
	
	                            _grimoirejs2.default.registerComponent(_$ns("AssetLoadingManager"), _AssetLoadingManagerComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("Camera"), _CameraComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("CanvasInitializer"), _CanvasInitializerComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("Fullscreen"), _FullscreenComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("Geometry"), _GeometryComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("GeometryRegistory"), _GeometryRegistoryComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("HTMLBinder"), _HTMLBinderComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("LoopManager"), _LoopManagerComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("Material"), _MaterialComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("MaterialContainer"), _MaterialContainerComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("MaterialImporter"), _MaterialImporterComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("MaterialManager"), _MaterialManagerComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("MeshRenderer"), _MeshRendererComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("MouseCameraControl"), _MouseCameraControlComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("RenderBuffer"), _RenderBufferComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("Renderer"), _RendererComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("RendererManager"), _RendererManagerComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("RenderQuad"), _RenderQuadComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("RenderScene"), _RenderSceneComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("Scene"), _SceneComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("TextureBuffer"), _TextureBufferComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("Texture"), _TextureComponent2.default);
	                            _grimoirejs2.default.registerComponent(_$ns("Transform"), _TransformComponent2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Angle2D"), _Angle2DConverter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Boolean"), _BooleanConverter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("CanvasSize"), _CanvasSizeConverter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Color3"), _Color3Converter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Color4"), _Color4Converter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Component"), _ComponentConverter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Enum"), _EnumConverter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Geometry"), _GeometryConverter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Material"), _MaterialConverter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Texture"), _TextureConverter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("NumberArray"), _NumberArrayConverter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Number"), _NumberConverter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Object"), _ObjectConverter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Rotation3"), _Rotation3Converter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Texture2D"), _TextureConverter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Vector2"), _Vector2Converter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Vector3"), _Vector3Converter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Vector4"), _Vector4Converter2.default);
	                            _grimoirejs2.default.registerConverter(_$ns("Viewport"), _ViewportConverter2.default);
	                            _grimoirejs2.default.registerNode("goml", ["CanvasInitializer", "LoopManager", "AssetLoadingManager", "GeometryRegistory", "MaterialManager", "RendererManager", "Fullscreen"]);
	                            _grimoirejs2.default.registerNode("renderer", ["Renderer"]);
	                            _grimoirejs2.default.registerNode("scene", ["Scene"]);
	                            _grimoirejs2.default.registerNode("camera", ["Camera"], { position: "0,0,10" }, "object");
	                            _grimoirejs2.default.registerNode("empty", []);
	                            _grimoirejs2.default.registerNode("object", ["Transform"]);
	                            _grimoirejs2.default.registerNode("geometry", ["Geometry"]);
	                            _grimoirejs2.default.registerNode("texture", ["Texture"]);
	                            _grimoirejs2.default.registerNode("mesh", ["MaterialContainer", "MeshRenderer"], {}, "object");
	                            _grimoirejs2.default.registerNode("material", ["Material"]);
	                            _grimoirejs2.default.registerNode("import-material", ["MaterialImporter"]);
	                            _grimoirejs2.default.registerNode("texture-buffer", ["TextureBuffer"]);
	                            _grimoirejs2.default.registerNode("render-buffer", ["RenderBuffer"]);
	                            _grimoirejs2.default.registerNode("render-scene", ["MaterialContainer", "RenderScene"], {
	                                material: null
	                            });
	                            _grimoirejs2.default.registerNode("render-quad", ["MaterialContainer", "RenderQuad"], {
	                                material: null
	                            });
	                            _DefaultPrimitives2.default.register();
	                            _DefaultMaterial2.default.register();
	
	                        case 60:
	                        case "end":
	                            return _context.stop();
	                    }
	                }
	            }, _callee, this);
	        }));
	    });
	};

/***/ }
/******/ ])
});
;

},{}],6:[function(require,module,exports){
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math;
},{}],7:[function(require,module,exports){
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _AABB = __webpack_require__(1);
	
	var _AABB2 = _interopRequireDefault(_AABB);
	
	var _Color = __webpack_require__(14);
	
	var _Color2 = _interopRequireDefault(_Color);
	
	var _Color3 = __webpack_require__(15);
	
	var _Color4 = _interopRequireDefault(_Color3);
	
	var _Colors = __webpack_require__(17);
	
	var _Colors2 = _interopRequireDefault(_Colors);
	
	var _GLM = __webpack_require__(18);
	
	var _GLM2 = _interopRequireDefault(_GLM);
	
	var _Matrix = __webpack_require__(19);
	
	var _Matrix2 = _interopRequireDefault(_Matrix);
	
	var _MatrixBase = __webpack_require__(20);
	
	var _MatrixBase2 = _interopRequireDefault(_MatrixBase);
	
	var _Quaternion = __webpack_require__(21);
	
	var _Quaternion2 = _interopRequireDefault(_Quaternion);
	
	var _Rectangle = __webpack_require__(22);
	
	var _Rectangle2 = _interopRequireDefault(_Rectangle);
	
	var _Vector = __webpack_require__(23);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	var _Vector3 = __webpack_require__(2);
	
	var _Vector4 = _interopRequireDefault(_Vector3);
	
	var _Vector5 = __webpack_require__(16);
	
	var _Vector6 = _interopRequireDefault(_Vector5);
	
	var _VectorBase = __webpack_require__(3);
	
	var _VectorBase2 = _interopRequireDefault(_VectorBase);
	
	var _main = __webpack_require__(24);
	
	var _main2 = _interopRequireDefault(_main);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var __EXPOSE__ = {
	    "AABB": _AABB2.default,
	    "Color3": _Color2.default,
	    "Color4": _Color4.default,
	    "Colors": _Colors2.default,
	    "GLM": _GLM2.default,
	    "Matrix": _Matrix2.default,
	    "MatrixBase": _MatrixBase2.default,
	    "Quaternion": _Quaternion2.default,
	    "Rectangle": _Rectangle2.default,
	    "Vector2": _Vector2.default,
	    "Vector3": _Vector4.default,
	    "Vector4": _Vector6.default,
	    "VectorBase": _VectorBase2.default
	};
	var __BASE__ = (0, _main2.default)();
	Object.assign(__BASE__ || {}, __EXPOSE__);
	window["GrimoireJS"].lib.math = __EXPOSE__;
	exports.default = __BASE__;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); ///<reference path="./gl-matrix.d.ts"/>
	
	
	var _Vector = __webpack_require__(2);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Axis-Aligned Bounding Box implementation
	 */
	var AABB = function () {
	    function AABB(initialPoints) {
	        var _this = this;
	
	        _classCallCheck(this, AABB);
	
	        if (initialPoints) {
	            initialPoints.forEach(function (f) {
	                return _this.expand(f);
	            });
	        }
	    }
	    /**
	     * Width of this AABB
	     */
	
	
	    _createClass(AABB, [{
	        key: "expand",
	
	        /**
	         * Calculate new bounding box with considering the new point is included.
	         * @param  {Vector3} newPoint the point that will be considered that it should be in this bounding box.
	         */
	        value: function expand(newPoint) {
	            if (this.pointLBF == null) {
	                // assume this is first time to be used this AABB instance
	                this.pointLBF = _Vector2.default.copy(newPoint);
	                this.pointRTN = _Vector2.default.copy(newPoint);
	            }
	            this.pointLBF = _Vector2.default.min(newPoint, this.pointLBF);
	            this.pointRTN = _Vector2.default.max(newPoint, this.pointRTN);
	            this._center = null;
	            return this;
	        }
	        /**
	         * Clean up this AABB with initial value.
	         */
	
	    }, {
	        key: "clear",
	        value: function clear() {
	            this.pointLBF = null;
	            this.pointRTN = null;
	            this._center = null;
	        }
	    }, {
	        key: "Width",
	        get: function get() {
	            return Math.abs(this.pointLBF.X - this.pointRTN.X);
	        }
	        /**
	         * Height of this AABB
	         */
	
	    }, {
	        key: "Height",
	        get: function get() {
	            return Math.abs(this.pointLBF.Y - this.pointRTN.Y);
	        }
	        /**
	         * Distance of this AABB
	         */
	
	    }, {
	        key: "Distance",
	        get: function get() {
	            return Math.abs(this.pointLBF.Z - this.pointRTN.Z);
	        }
	    }, {
	        key: "Center",
	        get: function get() {
	            return this._center ? this._center : this._center = _Vector2.default.add(this.pointLBF, this.pointRTN).multiplyWith(0.5);
	        }
	    }]);
	
	    return AABB;
	}();
	
	exports.default = AABB;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _VectorBase2 = __webpack_require__(3);
	
	var _VectorBase3 = _interopRequireDefault(_VectorBase2);
	
	var _glMatrix = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="./gl-matrix.d.ts"/>
	
	
	var Vector3 = function (_VectorBase) {
	    _inherits(Vector3, _VectorBase);
	
	    _createClass(Vector3, null, [{
	        key: "copy",
	        value: function copy(source) {
	            return new Vector3(source.X, source.Y, source.Z);
	        }
	    }, {
	        key: "dot",
	        value: function dot(v1, v2) {
	            return _glMatrix.vec3.dot(v1.rawElements, v2.rawElements);
	        }
	    }, {
	        key: "add",
	        value: function add(v1, v2) {
	            var newVec = _glMatrix.vec3.create();
	            return new Vector3(_glMatrix.vec3.add(newVec, v1.rawElements, v2.rawElements));
	        }
	    }, {
	        key: "subtract",
	        value: function subtract(v1, v2) {
	            var newVec = _glMatrix.vec3.create();
	            return new Vector3(_glMatrix.vec3.sub(newVec, v1.rawElements, v2.rawElements));
	        }
	    }, {
	        key: "multiply",
	        value: function multiply(s, v) {
	            var newVec = _glMatrix.vec3.create();
	            return new Vector3(_glMatrix.vec3.scale(newVec, v.rawElements, s));
	        }
	    }, {
	        key: "negate",
	        value: function negate(v1) {
	            return Vector3.multiply(-1, v1);
	        }
	    }, {
	        key: "equals",
	        value: function equals(v1, v2) {
	            return _VectorBase3.default.__elementEquals(v1, v2);
	        }
	    }, {
	        key: "nearlyEquals",
	        value: function nearlyEquals(v1, v2) {
	            return _VectorBase3.default.__nearlyElementEquals(v1, v2);
	        }
	    }, {
	        key: "normalize",
	        value: function normalize(v1) {
	            var newVec = _glMatrix.vec3.create();
	            return new Vector3(_glMatrix.vec3.normalize(newVec, v1.rawElements));
	        }
	    }, {
	        key: "cross",
	        value: function cross(v1, v2) {
	            var newVec = _glMatrix.vec3.create();
	            return new Vector3(_glMatrix.vec3.cross(newVec, v1.rawElements, v2.rawElements));
	        }
	    }, {
	        key: "min",
	        value: function min(v1, v2) {
	            return new Vector3(_VectorBase3.default.__fromGenerationFunction(v1, v2, function (i, _v1, _v2) {
	                return Math.min(_v1.rawElements[i], _v2.rawElements[i]);
	            }));
	        }
	    }, {
	        key: "max",
	        value: function max(v1, v2) {
	            return new Vector3(_VectorBase3.default.__fromGenerationFunction(v1, v2, function (i, _v1, _v2) {
	                return Math.max(_v1.rawElements[i], _v2.rawElements[i]);
	            }));
	        }
	    }, {
	        key: "angle",
	        value: function angle(v1, v2) {
	            return Math.acos(Vector3.dot(v1.normalized, v2.normalized));
	        }
	    }, {
	        key: "parse",
	        value: function parse(str) {
	            var parseResult = _VectorBase3.default.__parse(str);
	            var elements = parseResult.elements;
	            if (!elements || elements.length !== 1 && elements.length !== 3) {
	                return undefined;
	            }
	            var result = void 0;
	            if (elements.length === 1) {
	                result = new Vector3(elements[0], elements[0], elements[0]);
	            } else {
	                result = new Vector3(elements[0], elements[1], elements[2]);
	            }
	            if (parseResult.needNormalize) {
	                result = result.normalizeThis();
	            }
	            if (parseResult.coefficient) {
	                result = result.multiplyWith(parseResult.coefficient);
	            }
	            if (parseResult.needNegate) {
	                result = result.negateThis();
	            }
	            return result;
	        }
	    }, {
	        key: "XUnit",
	        get: function get() {
	            return new Vector3(1, 0, 0);
	        }
	    }, {
	        key: "YUnit",
	        get: function get() {
	            return new Vector3(0, 1, 0);
	        }
	    }, {
	        key: "ZUnit",
	        get: function get() {
	            return new Vector3(0, 0, 1);
	        }
	    }, {
	        key: "Zero",
	        get: function get() {
	            return new Vector3(0, 0, 0);
	        }
	    }, {
	        key: "One",
	        get: function get() {
	            return new Vector3(1, 1, 1);
	        }
	    }]);
	
	    function Vector3(x, y, z) {
	        _classCallCheck(this, Vector3);
	
	        var _this = _possibleConstructorReturn(this, (Vector3.__proto__ || Object.getPrototypeOf(Vector3)).call(this));
	
	        if (typeof y === "undefined") {
	            _this.rawElements = x;
	            return _possibleConstructorReturn(_this);
	        }
	        _this.rawElements = [x, y, z];
	        return _this;
	    }
	
	    _createClass(Vector3, [{
	        key: "normalizeThis",
	        value: function normalizeThis() {
	            return Vector3.normalize(this);
	        }
	    }, {
	        key: "dotWith",
	        value: function dotWith(v) {
	            return Vector3.dot(this, v);
	        }
	    }, {
	        key: "addWith",
	        value: function addWith(v) {
	            return Vector3.add(this, v);
	        }
	    }, {
	        key: "subtractWith",
	        value: function subtractWith(v) {
	            return Vector3.subtract(this, v);
	        }
	    }, {
	        key: "multiplyWith",
	        value: function multiplyWith(s) {
	            return Vector3.multiply(s, this);
	        }
	    }, {
	        key: "negateThis",
	        value: function negateThis() {
	            return Vector3.negate(this);
	        }
	    }, {
	        key: "equalWith",
	        value: function equalWith(v) {
	            return Vector3.equals(this, v);
	        }
	    }, {
	        key: "nearlyEqualWith",
	        value: function nearlyEqualWith(v) {
	            return Vector3.nearlyEquals(this, v);
	        }
	    }, {
	        key: "crossWith",
	        value: function crossWith(v) {
	            return Vector3.cross(this, v);
	        }
	    }, {
	        key: "toString",
	        value: function toString() {
	            return "(" + this.X + ", " + this.Y + ", " + this.Z + ")";
	        }
	    }, {
	        key: "toDisplayString",
	        value: function toDisplayString() {
	            return "Vector3" + this.toString();
	        }
	    }, {
	        key: "normalized",
	        get: function get() {
	            return this.multiplyWith(1 / this.magnitude);
	        }
	    }, {
	        key: "X",
	        get: function get() {
	            return this.rawElements[0];
	        },
	        set: function set(x) {
	            this.rawElements[0] = +x;
	        }
	    }, {
	        key: "Y",
	        get: function get() {
	            return this.rawElements[1];
	        },
	        set: function set(y) {
	            this.rawElements[1] = +y;
	        }
	    }, {
	        key: "Z",
	        get: function get() {
	            return this.rawElements[2];
	        },
	        set: function set(z) {
	            this.rawElements[2] = +z;
	        }
	    }, {
	        key: "ElementCount",
	        get: function get() {
	            return 3;
	        }
	    }]);
	
	    return Vector3;
	}(_VectorBase3.default);
	
	exports.default = Vector3;

/***/ },
/* 3 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	///<reference path="./gl-matrix.d.ts"/>
	var VectorBase = function () {
	    function VectorBase() {
	        _classCallCheck(this, VectorBase);
	
	        this._magnitudeSquaredCache = -1;
	        this._magnitudeCache = -1;
	    }
	
	    _createClass(VectorBase, [{
	        key: "magnitude",
	        get: function get() {
	            if (this._magnitudeCache < 0) {
	                this._magnitudeCache = Math.sqrt(this.sqrMagnitude);
	            }
	            return this._magnitudeCache;
	        }
	    }, {
	        key: "ElementCount",
	        get: function get() {
	            return 0;
	        }
	    }, {
	        key: "sqrMagnitude",
	        get: function get() {
	            if (this._magnitudeSquaredCache < 0) {
	                var sum = 0;
	                var r = this.rawElements;
	                for (var i = 0; i < this.ElementCount; i++) {
	                    sum += r[i] * r[i];
	                }
	                this._magnitudeSquaredCache = sum;
	            }
	            return this._magnitudeSquaredCache;
	        }
	    }], [{
	        key: "__elementEquals",
	        value: function __elementEquals(v1, v2) {
	            if (v1.ElementCount !== v2.ElementCount) {
	                return false;
	            }
	            for (var i = 0; i < v1.ElementCount; i++) {
	                if (v1.rawElements[i] !== v2.rawElements[i]) {
	                    return false;
	                }
	            }
	            return true;
	        }
	    }, {
	        key: "__nearlyElementEquals",
	        value: function __nearlyElementEquals(v1, v2) {
	            if (v1.ElementCount !== v2.ElementCount) {
	                return false;
	            }
	            var error = 0.01;
	            for (var i = 0; i < v1.ElementCount; i++) {
	                if (Math.abs(v1.rawElements[i] - v2.rawElements[i]) > error) {
	                    return false;
	                }
	            }
	            return true;
	        }
	    }, {
	        key: "__fromGenerationFunction",
	        value: function __fromGenerationFunction(v1, v2, gen) {
	            var f = new Float32Array(v1.ElementCount);
	            for (var i = 0; i < f.length; i++) {
	                f[i] = gen(i, v1, v2);
	            }
	            return f;
	        }
	    }, {
	        key: "__parse",
	        value: function __parse(str) {
	            var checkRegex = /(-?)([\d,Ee\+\-\.]+)?(n)?\(([-\d,Ee\+\.\s]+)\)/g;
	            var matches = checkRegex.exec(str);
	            if (matches) {
	                if (!matches[4]) {
	                    throw new Error("The specified string '" + str + "' is not containing braced vector.");
	                }
	                return {
	                    needNormalize: matches[3] === "n",
	                    needNegate: matches[1] === "-",
	                    coefficient: parseFloat(matches[2]),
	                    elements: VectorBase._parseRawVector(matches[4])
	                };
	            } else {
	                // Assume this is simplified format.
	                return {
	                    needNormalize: false,
	                    needNegate: false,
	                    elements: VectorBase._parseRawVector(str),
	                    coefficient: undefined
	                };
	            }
	        }
	    }, {
	        key: "_parseRawVector",
	        value: function _parseRawVector(str) {
	            var splitted = str.split(",");
	            var result = new Array(splitted.length);
	            for (var i = 0; i < splitted.length; i++) {
	                result[i] = parseFloat(splitted[i]);
	                if (isNaN(result[i])) {
	                    throw new Error("Unexpected vector string " + str);
	                }
	            }
	            return result;
	        }
	    }]);
	
	    return VectorBase;
	}();
	
	exports.default = VectorBase;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @fileoverview gl-matrix - High performance matrix and vector operations
	 * @author Brandon Jones
	 * @author Colin MacKenzie IV
	 * @version 2.3.2
	 */
	
	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	// END HEADER
	
	exports.glMatrix = __webpack_require__(5);
	exports.mat2 = __webpack_require__(6);
	exports.mat2d = __webpack_require__(7);
	exports.mat3 = __webpack_require__(8);
	exports.mat4 = __webpack_require__(9);
	exports.quat = __webpack_require__(10);
	exports.vec2 = __webpack_require__(13);
	exports.vec3 = __webpack_require__(11);
	exports.vec4 = __webpack_require__(12);

/***/ },
/* 5 */
/***/ function(module, exports) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	/**
	 * @class Common utilities
	 * @name glMatrix
	 */
	var glMatrix = {};
	
	// Configuration Constants
	glMatrix.EPSILON = 0.000001;
	glMatrix.ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;
	glMatrix.RANDOM = Math.random;
	glMatrix.ENABLE_SIMD = false;
	
	// Capability detection
	const global = new Function('return this')();
	glMatrix.SIMD_AVAILABLE = (glMatrix.ARRAY_TYPE === global.Float32Array) && ('SIMD' in global);
	glMatrix.USE_SIMD = glMatrix.ENABLE_SIMD && glMatrix.SIMD_AVAILABLE;
	
	/**
	 * Sets the type of array used when creating new vectors and matrices
	 *
	 * @param {Type} type Array type, such as Float32Array or Array
	 */
	glMatrix.setMatrixArrayType = function(type) {
	    glMatrix.ARRAY_TYPE = type;
	}
	
	var degree = Math.PI / 180;
	
	/**
	* Convert Degree To Radian
	*
	* @param {Number} a Angle in Degrees
	*/
	glMatrix.toRadian = function(a){
	     return a * degree;
	}
	
	/**
	 * Tests whether or not the arguments have approximately the same value, within an absolute
	 * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less 
	 * than or equal to 1.0, and a relative tolerance is used for larger values)
	 * 
	 * @param {Number} a The first number to test.
	 * @param {Number} b The second number to test.
	 * @returns {Boolean} True if the numbers are approximately equal, false otherwise.
	 */
	glMatrix.equals = function(a, b) {
		return Math.abs(a - b) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));
	}
	
	module.exports = glMatrix;


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	var glMatrix = __webpack_require__(5);
	
	/**
	 * @class 2x2 Matrix
	 * @name mat2
	 */
	var mat2 = {};
	
	/**
	 * Creates a new identity mat2
	 *
	 * @returns {mat2} a new 2x2 matrix
	 */
	mat2.create = function() {
	    var out = new glMatrix.ARRAY_TYPE(4);
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    return out;
	};
	
	/**
	 * Creates a new mat2 initialized with values from an existing matrix
	 *
	 * @param {mat2} a matrix to clone
	 * @returns {mat2} a new 2x2 matrix
	 */
	mat2.clone = function(a) {
	    var out = new glMatrix.ARRAY_TYPE(4);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    return out;
	};
	
	/**
	 * Copy the values from one mat2 to another
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the source matrix
	 * @returns {mat2} out
	 */
	mat2.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    return out;
	};
	
	/**
	 * Set a mat2 to the identity matrix
	 *
	 * @param {mat2} out the receiving matrix
	 * @returns {mat2} out
	 */
	mat2.identity = function(out) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    return out;
	};
	
	/**
	 * Create a new mat2 with the given values
	 *
	 * @param {Number} m00 Component in column 0, row 0 position (index 0)
	 * @param {Number} m01 Component in column 0, row 1 position (index 1)
	 * @param {Number} m10 Component in column 1, row 0 position (index 2)
	 * @param {Number} m11 Component in column 1, row 1 position (index 3)
	 * @returns {mat2} out A new 2x2 matrix
	 */
	mat2.fromValues = function(m00, m01, m10, m11) {
	    var out = new glMatrix.ARRAY_TYPE(4);
	    out[0] = m00;
	    out[1] = m01;
	    out[2] = m10;
	    out[3] = m11;
	    return out;
	};
	
	/**
	 * Set the components of a mat2 to the given values
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {Number} m00 Component in column 0, row 0 position (index 0)
	 * @param {Number} m01 Component in column 0, row 1 position (index 1)
	 * @param {Number} m10 Component in column 1, row 0 position (index 2)
	 * @param {Number} m11 Component in column 1, row 1 position (index 3)
	 * @returns {mat2} out
	 */
	mat2.set = function(out, m00, m01, m10, m11) {
	    out[0] = m00;
	    out[1] = m01;
	    out[2] = m10;
	    out[3] = m11;
	    return out;
	};
	
	
	/**
	 * Transpose the values of a mat2
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the source matrix
	 * @returns {mat2} out
	 */
	mat2.transpose = function(out, a) {
	    // If we are transposing ourselves we can skip a few steps but have to cache some values
	    if (out === a) {
	        var a1 = a[1];
	        out[1] = a[2];
	        out[2] = a1;
	    } else {
	        out[0] = a[0];
	        out[1] = a[2];
	        out[2] = a[1];
	        out[3] = a[3];
	    }
	    
	    return out;
	};
	
	/**
	 * Inverts a mat2
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the source matrix
	 * @returns {mat2} out
	 */
	mat2.invert = function(out, a) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
	
	        // Calculate the determinant
	        det = a0 * a3 - a2 * a1;
	
	    if (!det) {
	        return null;
	    }
	    det = 1.0 / det;
	    
	    out[0] =  a3 * det;
	    out[1] = -a1 * det;
	    out[2] = -a2 * det;
	    out[3] =  a0 * det;
	
	    return out;
	};
	
	/**
	 * Calculates the adjugate of a mat2
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the source matrix
	 * @returns {mat2} out
	 */
	mat2.adjoint = function(out, a) {
	    // Caching this value is nessecary if out == a
	    var a0 = a[0];
	    out[0] =  a[3];
	    out[1] = -a[1];
	    out[2] = -a[2];
	    out[3] =  a0;
	
	    return out;
	};
	
	/**
	 * Calculates the determinant of a mat2
	 *
	 * @param {mat2} a the source matrix
	 * @returns {Number} determinant of a
	 */
	mat2.determinant = function (a) {
	    return a[0] * a[3] - a[2] * a[1];
	};
	
	/**
	 * Multiplies two mat2's
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the first operand
	 * @param {mat2} b the second operand
	 * @returns {mat2} out
	 */
	mat2.multiply = function (out, a, b) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
	    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
	    out[0] = a0 * b0 + a2 * b1;
	    out[1] = a1 * b0 + a3 * b1;
	    out[2] = a0 * b2 + a2 * b3;
	    out[3] = a1 * b2 + a3 * b3;
	    return out;
	};
	
	/**
	 * Alias for {@link mat2.multiply}
	 * @function
	 */
	mat2.mul = mat2.multiply;
	
	/**
	 * Rotates a mat2 by the given angle
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat2} out
	 */
	mat2.rotate = function (out, a, rad) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
	        s = Math.sin(rad),
	        c = Math.cos(rad);
	    out[0] = a0 *  c + a2 * s;
	    out[1] = a1 *  c + a3 * s;
	    out[2] = a0 * -s + a2 * c;
	    out[3] = a1 * -s + a3 * c;
	    return out;
	};
	
	/**
	 * Scales the mat2 by the dimensions in the given vec2
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the matrix to rotate
	 * @param {vec2} v the vec2 to scale the matrix by
	 * @returns {mat2} out
	 **/
	mat2.scale = function(out, a, v) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
	        v0 = v[0], v1 = v[1];
	    out[0] = a0 * v0;
	    out[1] = a1 * v0;
	    out[2] = a2 * v1;
	    out[3] = a3 * v1;
	    return out;
	};
	
	/**
	 * Creates a matrix from a given angle
	 * This is equivalent to (but much faster than):
	 *
	 *     mat2.identity(dest);
	 *     mat2.rotate(dest, dest, rad);
	 *
	 * @param {mat2} out mat2 receiving operation result
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat2} out
	 */
	mat2.fromRotation = function(out, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad);
	    out[0] = c;
	    out[1] = s;
	    out[2] = -s;
	    out[3] = c;
	    return out;
	}
	
	/**
	 * Creates a matrix from a vector scaling
	 * This is equivalent to (but much faster than):
	 *
	 *     mat2.identity(dest);
	 *     mat2.scale(dest, dest, vec);
	 *
	 * @param {mat2} out mat2 receiving operation result
	 * @param {vec2} v Scaling vector
	 * @returns {mat2} out
	 */
	mat2.fromScaling = function(out, v) {
	    out[0] = v[0];
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = v[1];
	    return out;
	}
	
	/**
	 * Returns a string representation of a mat2
	 *
	 * @param {mat2} a matrix to represent as a string
	 * @returns {String} string representation of the matrix
	 */
	mat2.str = function (a) {
	    return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
	};
	
	/**
	 * Returns Frobenius norm of a mat2
	 *
	 * @param {mat2} a the matrix to calculate Frobenius norm of
	 * @returns {Number} Frobenius norm
	 */
	mat2.frob = function (a) {
	    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))
	};
	
	/**
	 * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix
	 * @param {mat2} L the lower triangular matrix 
	 * @param {mat2} D the diagonal matrix 
	 * @param {mat2} U the upper triangular matrix 
	 * @param {mat2} a the input matrix to factorize
	 */
	
	mat2.LDU = function (L, D, U, a) { 
	    L[2] = a[2]/a[0]; 
	    U[0] = a[0]; 
	    U[1] = a[1]; 
	    U[3] = a[3] - L[2] * U[1]; 
	    return [L, D, U];       
	}; 
	
	/**
	 * Adds two mat2's
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the first operand
	 * @param {mat2} b the second operand
	 * @returns {mat2} out
	 */
	mat2.add = function(out, a, b) {
	    out[0] = a[0] + b[0];
	    out[1] = a[1] + b[1];
	    out[2] = a[2] + b[2];
	    out[3] = a[3] + b[3];
	    return out;
	};
	
	/**
	 * Subtracts matrix b from matrix a
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the first operand
	 * @param {mat2} b the second operand
	 * @returns {mat2} out
	 */
	mat2.subtract = function(out, a, b) {
	    out[0] = a[0] - b[0];
	    out[1] = a[1] - b[1];
	    out[2] = a[2] - b[2];
	    out[3] = a[3] - b[3];
	    return out;
	};
	
	/**
	 * Alias for {@link mat2.subtract}
	 * @function
	 */
	mat2.sub = mat2.subtract;
	
	/**
	 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
	 *
	 * @param {mat2} a The first matrix.
	 * @param {mat2} b The second matrix.
	 * @returns {Boolean} True if the matrices are equal, false otherwise.
	 */
	mat2.exactEquals = function (a, b) {
	    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
	};
	
	/**
	 * Returns whether or not the matrices have approximately the same elements in the same position.
	 *
	 * @param {mat2} a The first matrix.
	 * @param {mat2} b The second matrix.
	 * @returns {Boolean} True if the matrices are equal, false otherwise.
	 */
	mat2.equals = function (a, b) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
	    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
	    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
	            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
	            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
	            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));
	};
	
	/**
	 * Multiply each element of the matrix by a scalar.
	 *
	 * @param {mat2} out the receiving matrix
	 * @param {mat2} a the matrix to scale
	 * @param {Number} b amount to scale the matrix's elements by
	 * @returns {mat2} out
	 */
	mat2.multiplyScalar = function(out, a, b) {
	    out[0] = a[0] * b;
	    out[1] = a[1] * b;
	    out[2] = a[2] * b;
	    out[3] = a[3] * b;
	    return out;
	};
	
	/**
	 * Adds two mat2's after multiplying each element of the second operand by a scalar value.
	 *
	 * @param {mat2} out the receiving vector
	 * @param {mat2} a the first operand
	 * @param {mat2} b the second operand
	 * @param {Number} scale the amount to scale b's elements by before adding
	 * @returns {mat2} out
	 */
	mat2.multiplyScalarAndAdd = function(out, a, b, scale) {
	    out[0] = a[0] + (b[0] * scale);
	    out[1] = a[1] + (b[1] * scale);
	    out[2] = a[2] + (b[2] * scale);
	    out[3] = a[3] + (b[3] * scale);
	    return out;
	};
	
	module.exports = mat2;


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	var glMatrix = __webpack_require__(5);
	
	/**
	 * @class 2x3 Matrix
	 * @name mat2d
	 * 
	 * @description 
	 * A mat2d contains six elements defined as:
	 * <pre>
	 * [a, c, tx,
	 *  b, d, ty]
	 * </pre>
	 * This is a short form for the 3x3 matrix:
	 * <pre>
	 * [a, c, tx,
	 *  b, d, ty,
	 *  0, 0, 1]
	 * </pre>
	 * The last row is ignored so the array is shorter and operations are faster.
	 */
	var mat2d = {};
	
	/**
	 * Creates a new identity mat2d
	 *
	 * @returns {mat2d} a new 2x3 matrix
	 */
	mat2d.create = function() {
	    var out = new glMatrix.ARRAY_TYPE(6);
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    out[4] = 0;
	    out[5] = 0;
	    return out;
	};
	
	/**
	 * Creates a new mat2d initialized with values from an existing matrix
	 *
	 * @param {mat2d} a matrix to clone
	 * @returns {mat2d} a new 2x3 matrix
	 */
	mat2d.clone = function(a) {
	    var out = new glMatrix.ARRAY_TYPE(6);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    return out;
	};
	
	/**
	 * Copy the values from one mat2d to another
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the source matrix
	 * @returns {mat2d} out
	 */
	mat2d.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    return out;
	};
	
	/**
	 * Set a mat2d to the identity matrix
	 *
	 * @param {mat2d} out the receiving matrix
	 * @returns {mat2d} out
	 */
	mat2d.identity = function(out) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    out[4] = 0;
	    out[5] = 0;
	    return out;
	};
	
	/**
	 * Create a new mat2d with the given values
	 *
	 * @param {Number} a Component A (index 0)
	 * @param {Number} b Component B (index 1)
	 * @param {Number} c Component C (index 2)
	 * @param {Number} d Component D (index 3)
	 * @param {Number} tx Component TX (index 4)
	 * @param {Number} ty Component TY (index 5)
	 * @returns {mat2d} A new mat2d
	 */
	mat2d.fromValues = function(a, b, c, d, tx, ty) {
	    var out = new glMatrix.ARRAY_TYPE(6);
	    out[0] = a;
	    out[1] = b;
	    out[2] = c;
	    out[3] = d;
	    out[4] = tx;
	    out[5] = ty;
	    return out;
	};
	
	/**
	 * Set the components of a mat2d to the given values
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {Number} a Component A (index 0)
	 * @param {Number} b Component B (index 1)
	 * @param {Number} c Component C (index 2)
	 * @param {Number} d Component D (index 3)
	 * @param {Number} tx Component TX (index 4)
	 * @param {Number} ty Component TY (index 5)
	 * @returns {mat2d} out
	 */
	mat2d.set = function(out, a, b, c, d, tx, ty) {
	    out[0] = a;
	    out[1] = b;
	    out[2] = c;
	    out[3] = d;
	    out[4] = tx;
	    out[5] = ty;
	    return out;
	};
	
	/**
	 * Inverts a mat2d
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the source matrix
	 * @returns {mat2d} out
	 */
	mat2d.invert = function(out, a) {
	    var aa = a[0], ab = a[1], ac = a[2], ad = a[3],
	        atx = a[4], aty = a[5];
	
	    var det = aa * ad - ab * ac;
	    if(!det){
	        return null;
	    }
	    det = 1.0 / det;
	
	    out[0] = ad * det;
	    out[1] = -ab * det;
	    out[2] = -ac * det;
	    out[3] = aa * det;
	    out[4] = (ac * aty - ad * atx) * det;
	    out[5] = (ab * atx - aa * aty) * det;
	    return out;
	};
	
	/**
	 * Calculates the determinant of a mat2d
	 *
	 * @param {mat2d} a the source matrix
	 * @returns {Number} determinant of a
	 */
	mat2d.determinant = function (a) {
	    return a[0] * a[3] - a[1] * a[2];
	};
	
	/**
	 * Multiplies two mat2d's
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the first operand
	 * @param {mat2d} b the second operand
	 * @returns {mat2d} out
	 */
	mat2d.multiply = function (out, a, b) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
	        b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
	    out[0] = a0 * b0 + a2 * b1;
	    out[1] = a1 * b0 + a3 * b1;
	    out[2] = a0 * b2 + a2 * b3;
	    out[3] = a1 * b2 + a3 * b3;
	    out[4] = a0 * b4 + a2 * b5 + a4;
	    out[5] = a1 * b4 + a3 * b5 + a5;
	    return out;
	};
	
	/**
	 * Alias for {@link mat2d.multiply}
	 * @function
	 */
	mat2d.mul = mat2d.multiply;
	
	/**
	 * Rotates a mat2d by the given angle
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat2d} out
	 */
	mat2d.rotate = function (out, a, rad) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
	        s = Math.sin(rad),
	        c = Math.cos(rad);
	    out[0] = a0 *  c + a2 * s;
	    out[1] = a1 *  c + a3 * s;
	    out[2] = a0 * -s + a2 * c;
	    out[3] = a1 * -s + a3 * c;
	    out[4] = a4;
	    out[5] = a5;
	    return out;
	};
	
	/**
	 * Scales the mat2d by the dimensions in the given vec2
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the matrix to translate
	 * @param {vec2} v the vec2 to scale the matrix by
	 * @returns {mat2d} out
	 **/
	mat2d.scale = function(out, a, v) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
	        v0 = v[0], v1 = v[1];
	    out[0] = a0 * v0;
	    out[1] = a1 * v0;
	    out[2] = a2 * v1;
	    out[3] = a3 * v1;
	    out[4] = a4;
	    out[5] = a5;
	    return out;
	};
	
	/**
	 * Translates the mat2d by the dimensions in the given vec2
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the matrix to translate
	 * @param {vec2} v the vec2 to translate the matrix by
	 * @returns {mat2d} out
	 **/
	mat2d.translate = function(out, a, v) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5],
	        v0 = v[0], v1 = v[1];
	    out[0] = a0;
	    out[1] = a1;
	    out[2] = a2;
	    out[3] = a3;
	    out[4] = a0 * v0 + a2 * v1 + a4;
	    out[5] = a1 * v0 + a3 * v1 + a5;
	    return out;
	};
	
	/**
	 * Creates a matrix from a given angle
	 * This is equivalent to (but much faster than):
	 *
	 *     mat2d.identity(dest);
	 *     mat2d.rotate(dest, dest, rad);
	 *
	 * @param {mat2d} out mat2d receiving operation result
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat2d} out
	 */
	mat2d.fromRotation = function(out, rad) {
	    var s = Math.sin(rad), c = Math.cos(rad);
	    out[0] = c;
	    out[1] = s;
	    out[2] = -s;
	    out[3] = c;
	    out[4] = 0;
	    out[5] = 0;
	    return out;
	}
	
	/**
	 * Creates a matrix from a vector scaling
	 * This is equivalent to (but much faster than):
	 *
	 *     mat2d.identity(dest);
	 *     mat2d.scale(dest, dest, vec);
	 *
	 * @param {mat2d} out mat2d receiving operation result
	 * @param {vec2} v Scaling vector
	 * @returns {mat2d} out
	 */
	mat2d.fromScaling = function(out, v) {
	    out[0] = v[0];
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = v[1];
	    out[4] = 0;
	    out[5] = 0;
	    return out;
	}
	
	/**
	 * Creates a matrix from a vector translation
	 * This is equivalent to (but much faster than):
	 *
	 *     mat2d.identity(dest);
	 *     mat2d.translate(dest, dest, vec);
	 *
	 * @param {mat2d} out mat2d receiving operation result
	 * @param {vec2} v Translation vector
	 * @returns {mat2d} out
	 */
	mat2d.fromTranslation = function(out, v) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    out[4] = v[0];
	    out[5] = v[1];
	    return out;
	}
	
	/**
	 * Returns a string representation of a mat2d
	 *
	 * @param {mat2d} a matrix to represent as a string
	 * @returns {String} string representation of the matrix
	 */
	mat2d.str = function (a) {
	    return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + 
	                    a[3] + ', ' + a[4] + ', ' + a[5] + ')';
	};
	
	/**
	 * Returns Frobenius norm of a mat2d
	 *
	 * @param {mat2d} a the matrix to calculate Frobenius norm of
	 * @returns {Number} Frobenius norm
	 */
	mat2d.frob = function (a) { 
	    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))
	}; 
	
	/**
	 * Adds two mat2d's
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the first operand
	 * @param {mat2d} b the second operand
	 * @returns {mat2d} out
	 */
	mat2d.add = function(out, a, b) {
	    out[0] = a[0] + b[0];
	    out[1] = a[1] + b[1];
	    out[2] = a[2] + b[2];
	    out[3] = a[3] + b[3];
	    out[4] = a[4] + b[4];
	    out[5] = a[5] + b[5];
	    return out;
	};
	
	/**
	 * Subtracts matrix b from matrix a
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the first operand
	 * @param {mat2d} b the second operand
	 * @returns {mat2d} out
	 */
	mat2d.subtract = function(out, a, b) {
	    out[0] = a[0] - b[0];
	    out[1] = a[1] - b[1];
	    out[2] = a[2] - b[2];
	    out[3] = a[3] - b[3];
	    out[4] = a[4] - b[4];
	    out[5] = a[5] - b[5];
	    return out;
	};
	
	/**
	 * Alias for {@link mat2d.subtract}
	 * @function
	 */
	mat2d.sub = mat2d.subtract;
	
	/**
	 * Multiply each element of the matrix by a scalar.
	 *
	 * @param {mat2d} out the receiving matrix
	 * @param {mat2d} a the matrix to scale
	 * @param {Number} b amount to scale the matrix's elements by
	 * @returns {mat2d} out
	 */
	mat2d.multiplyScalar = function(out, a, b) {
	    out[0] = a[0] * b;
	    out[1] = a[1] * b;
	    out[2] = a[2] * b;
	    out[3] = a[3] * b;
	    out[4] = a[4] * b;
	    out[5] = a[5] * b;
	    return out;
	};
	
	/**
	 * Adds two mat2d's after multiplying each element of the second operand by a scalar value.
	 *
	 * @param {mat2d} out the receiving vector
	 * @param {mat2d} a the first operand
	 * @param {mat2d} b the second operand
	 * @param {Number} scale the amount to scale b's elements by before adding
	 * @returns {mat2d} out
	 */
	mat2d.multiplyScalarAndAdd = function(out, a, b, scale) {
	    out[0] = a[0] + (b[0] * scale);
	    out[1] = a[1] + (b[1] * scale);
	    out[2] = a[2] + (b[2] * scale);
	    out[3] = a[3] + (b[3] * scale);
	    out[4] = a[4] + (b[4] * scale);
	    out[5] = a[5] + (b[5] * scale);
	    return out;
	};
	
	/**
	 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
	 *
	 * @param {mat2d} a The first matrix.
	 * @param {mat2d} b The second matrix.
	 * @returns {Boolean} True if the matrices are equal, false otherwise.
	 */
	mat2d.exactEquals = function (a, b) {
	    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];
	};
	
	/**
	 * Returns whether or not the matrices have approximately the same elements in the same position.
	 *
	 * @param {mat2d} a The first matrix.
	 * @param {mat2d} b The second matrix.
	 * @returns {Boolean} True if the matrices are equal, false otherwise.
	 */
	mat2d.equals = function (a, b) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];
	    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];
	    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
	            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
	            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
	            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
	            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
	            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)));
	};
	
	module.exports = mat2d;


/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	var glMatrix = __webpack_require__(5);
	
	/**
	 * @class 3x3 Matrix
	 * @name mat3
	 */
	var mat3 = {};
	
	/**
	 * Creates a new identity mat3
	 *
	 * @returns {mat3} a new 3x3 matrix
	 */
	mat3.create = function() {
	    var out = new glMatrix.ARRAY_TYPE(9);
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 1;
	    out[5] = 0;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 1;
	    return out;
	};
	
	/**
	 * Copies the upper-left 3x3 values into the given mat3.
	 *
	 * @param {mat3} out the receiving 3x3 matrix
	 * @param {mat4} a   the source 4x4 matrix
	 * @returns {mat3} out
	 */
	mat3.fromMat4 = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[4];
	    out[4] = a[5];
	    out[5] = a[6];
	    out[6] = a[8];
	    out[7] = a[9];
	    out[8] = a[10];
	    return out;
	};
	
	/**
	 * Creates a new mat3 initialized with values from an existing matrix
	 *
	 * @param {mat3} a matrix to clone
	 * @returns {mat3} a new 3x3 matrix
	 */
	mat3.clone = function(a) {
	    var out = new glMatrix.ARRAY_TYPE(9);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    out[6] = a[6];
	    out[7] = a[7];
	    out[8] = a[8];
	    return out;
	};
	
	/**
	 * Copy the values from one mat3 to another
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the source matrix
	 * @returns {mat3} out
	 */
	mat3.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    out[6] = a[6];
	    out[7] = a[7];
	    out[8] = a[8];
	    return out;
	};
	
	/**
	 * Create a new mat3 with the given values
	 *
	 * @param {Number} m00 Component in column 0, row 0 position (index 0)
	 * @param {Number} m01 Component in column 0, row 1 position (index 1)
	 * @param {Number} m02 Component in column 0, row 2 position (index 2)
	 * @param {Number} m10 Component in column 1, row 0 position (index 3)
	 * @param {Number} m11 Component in column 1, row 1 position (index 4)
	 * @param {Number} m12 Component in column 1, row 2 position (index 5)
	 * @param {Number} m20 Component in column 2, row 0 position (index 6)
	 * @param {Number} m21 Component in column 2, row 1 position (index 7)
	 * @param {Number} m22 Component in column 2, row 2 position (index 8)
	 * @returns {mat3} A new mat3
	 */
	mat3.fromValues = function(m00, m01, m02, m10, m11, m12, m20, m21, m22) {
	    var out = new glMatrix.ARRAY_TYPE(9);
	    out[0] = m00;
	    out[1] = m01;
	    out[2] = m02;
	    out[3] = m10;
	    out[4] = m11;
	    out[5] = m12;
	    out[6] = m20;
	    out[7] = m21;
	    out[8] = m22;
	    return out;
	};
	
	/**
	 * Set the components of a mat3 to the given values
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {Number} m00 Component in column 0, row 0 position (index 0)
	 * @param {Number} m01 Component in column 0, row 1 position (index 1)
	 * @param {Number} m02 Component in column 0, row 2 position (index 2)
	 * @param {Number} m10 Component in column 1, row 0 position (index 3)
	 * @param {Number} m11 Component in column 1, row 1 position (index 4)
	 * @param {Number} m12 Component in column 1, row 2 position (index 5)
	 * @param {Number} m20 Component in column 2, row 0 position (index 6)
	 * @param {Number} m21 Component in column 2, row 1 position (index 7)
	 * @param {Number} m22 Component in column 2, row 2 position (index 8)
	 * @returns {mat3} out
	 */
	mat3.set = function(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {
	    out[0] = m00;
	    out[1] = m01;
	    out[2] = m02;
	    out[3] = m10;
	    out[4] = m11;
	    out[5] = m12;
	    out[6] = m20;
	    out[7] = m21;
	    out[8] = m22;
	    return out;
	};
	
	/**
	 * Set a mat3 to the identity matrix
	 *
	 * @param {mat3} out the receiving matrix
	 * @returns {mat3} out
	 */
	mat3.identity = function(out) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 1;
	    out[5] = 0;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 1;
	    return out;
	};
	
	/**
	 * Transpose the values of a mat3
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the source matrix
	 * @returns {mat3} out
	 */
	mat3.transpose = function(out, a) {
	    // If we are transposing ourselves we can skip a few steps but have to cache some values
	    if (out === a) {
	        var a01 = a[1], a02 = a[2], a12 = a[5];
	        out[1] = a[3];
	        out[2] = a[6];
	        out[3] = a01;
	        out[5] = a[7];
	        out[6] = a02;
	        out[7] = a12;
	    } else {
	        out[0] = a[0];
	        out[1] = a[3];
	        out[2] = a[6];
	        out[3] = a[1];
	        out[4] = a[4];
	        out[5] = a[7];
	        out[6] = a[2];
	        out[7] = a[5];
	        out[8] = a[8];
	    }
	
	    return out;
	};
	
	/**
	 * Inverts a mat3
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the source matrix
	 * @returns {mat3} out
	 */
	mat3.invert = function(out, a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8],
	
	        b01 = a22 * a11 - a12 * a21,
	        b11 = -a22 * a10 + a12 * a20,
	        b21 = a21 * a10 - a11 * a20,
	
	        // Calculate the determinant
	        det = a00 * b01 + a01 * b11 + a02 * b21;
	
	    if (!det) {
	        return null;
	    }
	    det = 1.0 / det;
	
	    out[0] = b01 * det;
	    out[1] = (-a22 * a01 + a02 * a21) * det;
	    out[2] = (a12 * a01 - a02 * a11) * det;
	    out[3] = b11 * det;
	    out[4] = (a22 * a00 - a02 * a20) * det;
	    out[5] = (-a12 * a00 + a02 * a10) * det;
	    out[6] = b21 * det;
	    out[7] = (-a21 * a00 + a01 * a20) * det;
	    out[8] = (a11 * a00 - a01 * a10) * det;
	    return out;
	};
	
	/**
	 * Calculates the adjugate of a mat3
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the source matrix
	 * @returns {mat3} out
	 */
	mat3.adjoint = function(out, a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8];
	
	    out[0] = (a11 * a22 - a12 * a21);
	    out[1] = (a02 * a21 - a01 * a22);
	    out[2] = (a01 * a12 - a02 * a11);
	    out[3] = (a12 * a20 - a10 * a22);
	    out[4] = (a00 * a22 - a02 * a20);
	    out[5] = (a02 * a10 - a00 * a12);
	    out[6] = (a10 * a21 - a11 * a20);
	    out[7] = (a01 * a20 - a00 * a21);
	    out[8] = (a00 * a11 - a01 * a10);
	    return out;
	};
	
	/**
	 * Calculates the determinant of a mat3
	 *
	 * @param {mat3} a the source matrix
	 * @returns {Number} determinant of a
	 */
	mat3.determinant = function (a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8];
	
	    return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);
	};
	
	/**
	 * Multiplies two mat3's
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the first operand
	 * @param {mat3} b the second operand
	 * @returns {mat3} out
	 */
	mat3.multiply = function (out, a, b) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8],
	
	        b00 = b[0], b01 = b[1], b02 = b[2],
	        b10 = b[3], b11 = b[4], b12 = b[5],
	        b20 = b[6], b21 = b[7], b22 = b[8];
	
	    out[0] = b00 * a00 + b01 * a10 + b02 * a20;
	    out[1] = b00 * a01 + b01 * a11 + b02 * a21;
	    out[2] = b00 * a02 + b01 * a12 + b02 * a22;
	
	    out[3] = b10 * a00 + b11 * a10 + b12 * a20;
	    out[4] = b10 * a01 + b11 * a11 + b12 * a21;
	    out[5] = b10 * a02 + b11 * a12 + b12 * a22;
	
	    out[6] = b20 * a00 + b21 * a10 + b22 * a20;
	    out[7] = b20 * a01 + b21 * a11 + b22 * a21;
	    out[8] = b20 * a02 + b21 * a12 + b22 * a22;
	    return out;
	};
	
	/**
	 * Alias for {@link mat3.multiply}
	 * @function
	 */
	mat3.mul = mat3.multiply;
	
	/**
	 * Translate a mat3 by the given vector
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the matrix to translate
	 * @param {vec2} v vector to translate by
	 * @returns {mat3} out
	 */
	mat3.translate = function(out, a, v) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8],
	        x = v[0], y = v[1];
	
	    out[0] = a00;
	    out[1] = a01;
	    out[2] = a02;
	
	    out[3] = a10;
	    out[4] = a11;
	    out[5] = a12;
	
	    out[6] = x * a00 + y * a10 + a20;
	    out[7] = x * a01 + y * a11 + a21;
	    out[8] = x * a02 + y * a12 + a22;
	    return out;
	};
	
	/**
	 * Rotates a mat3 by the given angle
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat3} out
	 */
	mat3.rotate = function (out, a, rad) {
	    var a00 = a[0], a01 = a[1], a02 = a[2],
	        a10 = a[3], a11 = a[4], a12 = a[5],
	        a20 = a[6], a21 = a[7], a22 = a[8],
	
	        s = Math.sin(rad),
	        c = Math.cos(rad);
	
	    out[0] = c * a00 + s * a10;
	    out[1] = c * a01 + s * a11;
	    out[2] = c * a02 + s * a12;
	
	    out[3] = c * a10 - s * a00;
	    out[4] = c * a11 - s * a01;
	    out[5] = c * a12 - s * a02;
	
	    out[6] = a20;
	    out[7] = a21;
	    out[8] = a22;
	    return out;
	};
	
	/**
	 * Scales the mat3 by the dimensions in the given vec2
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the matrix to rotate
	 * @param {vec2} v the vec2 to scale the matrix by
	 * @returns {mat3} out
	 **/
	mat3.scale = function(out, a, v) {
	    var x = v[0], y = v[1];
	
	    out[0] = x * a[0];
	    out[1] = x * a[1];
	    out[2] = x * a[2];
	
	    out[3] = y * a[3];
	    out[4] = y * a[4];
	    out[5] = y * a[5];
	
	    out[6] = a[6];
	    out[7] = a[7];
	    out[8] = a[8];
	    return out;
	};
	
	/**
	 * Creates a matrix from a vector translation
	 * This is equivalent to (but much faster than):
	 *
	 *     mat3.identity(dest);
	 *     mat3.translate(dest, dest, vec);
	 *
	 * @param {mat3} out mat3 receiving operation result
	 * @param {vec2} v Translation vector
	 * @returns {mat3} out
	 */
	mat3.fromTranslation = function(out, v) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 1;
	    out[5] = 0;
	    out[6] = v[0];
	    out[7] = v[1];
	    out[8] = 1;
	    return out;
	}
	
	/**
	 * Creates a matrix from a given angle
	 * This is equivalent to (but much faster than):
	 *
	 *     mat3.identity(dest);
	 *     mat3.rotate(dest, dest, rad);
	 *
	 * @param {mat3} out mat3 receiving operation result
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat3} out
	 */
	mat3.fromRotation = function(out, rad) {
	    var s = Math.sin(rad), c = Math.cos(rad);
	
	    out[0] = c;
	    out[1] = s;
	    out[2] = 0;
	
	    out[3] = -s;
	    out[4] = c;
	    out[5] = 0;
	
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 1;
	    return out;
	}
	
	/**
	 * Creates a matrix from a vector scaling
	 * This is equivalent to (but much faster than):
	 *
	 *     mat3.identity(dest);
	 *     mat3.scale(dest, dest, vec);
	 *
	 * @param {mat3} out mat3 receiving operation result
	 * @param {vec2} v Scaling vector
	 * @returns {mat3} out
	 */
	mat3.fromScaling = function(out, v) {
	    out[0] = v[0];
	    out[1] = 0;
	    out[2] = 0;
	
	    out[3] = 0;
	    out[4] = v[1];
	    out[5] = 0;
	
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 1;
	    return out;
	}
	
	/**
	 * Copies the values from a mat2d into a mat3
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat2d} a the matrix to copy
	 * @returns {mat3} out
	 **/
	mat3.fromMat2d = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = 0;
	
	    out[3] = a[2];
	    out[4] = a[3];
	    out[5] = 0;
	
	    out[6] = a[4];
	    out[7] = a[5];
	    out[8] = 1;
	    return out;
	};
	
	/**
	* Calculates a 3x3 matrix from the given quaternion
	*
	* @param {mat3} out mat3 receiving operation result
	* @param {quat} q Quaternion to create matrix from
	*
	* @returns {mat3} out
	*/
	mat3.fromQuat = function (out, q) {
	    var x = q[0], y = q[1], z = q[2], w = q[3],
	        x2 = x + x,
	        y2 = y + y,
	        z2 = z + z,
	
	        xx = x * x2,
	        yx = y * x2,
	        yy = y * y2,
	        zx = z * x2,
	        zy = z * y2,
	        zz = z * z2,
	        wx = w * x2,
	        wy = w * y2,
	        wz = w * z2;
	
	    out[0] = 1 - yy - zz;
	    out[3] = yx - wz;
	    out[6] = zx + wy;
	
	    out[1] = yx + wz;
	    out[4] = 1 - xx - zz;
	    out[7] = zy - wx;
	
	    out[2] = zx - wy;
	    out[5] = zy + wx;
	    out[8] = 1 - xx - yy;
	
	    return out;
	};
	
	/**
	* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix
	*
	* @param {mat3} out mat3 receiving operation result
	* @param {mat4} a Mat4 to derive the normal matrix from
	*
	* @returns {mat3} out
	*/
	mat3.normalFromMat4 = function (out, a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
	        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
	        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
	        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],
	
	        b00 = a00 * a11 - a01 * a10,
	        b01 = a00 * a12 - a02 * a10,
	        b02 = a00 * a13 - a03 * a10,
	        b03 = a01 * a12 - a02 * a11,
	        b04 = a01 * a13 - a03 * a11,
	        b05 = a02 * a13 - a03 * a12,
	        b06 = a20 * a31 - a21 * a30,
	        b07 = a20 * a32 - a22 * a30,
	        b08 = a20 * a33 - a23 * a30,
	        b09 = a21 * a32 - a22 * a31,
	        b10 = a21 * a33 - a23 * a31,
	        b11 = a22 * a33 - a23 * a32,
	
	        // Calculate the determinant
	        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
	
	    if (!det) {
	        return null;
	    }
	    det = 1.0 / det;
	
	    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
	    out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
	    out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
	
	    out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
	    out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
	    out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
	
	    out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
	    out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
	    out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
	
	    return out;
	};
	
	/**
	 * Returns a string representation of a mat3
	 *
	 * @param {mat3} a matrix to represent as a string
	 * @returns {String} string representation of the matrix
	 */
	mat3.str = function (a) {
	    return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +
	                    a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +
	                    a[6] + ', ' + a[7] + ', ' + a[8] + ')';
	};
	
	/**
	 * Returns Frobenius norm of a mat3
	 *
	 * @param {mat3} a the matrix to calculate Frobenius norm of
	 * @returns {Number} Frobenius norm
	 */
	mat3.frob = function (a) {
	    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))
	};
	
	/**
	 * Adds two mat3's
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the first operand
	 * @param {mat3} b the second operand
	 * @returns {mat3} out
	 */
	mat3.add = function(out, a, b) {
	    out[0] = a[0] + b[0];
	    out[1] = a[1] + b[1];
	    out[2] = a[2] + b[2];
	    out[3] = a[3] + b[3];
	    out[4] = a[4] + b[4];
	    out[5] = a[5] + b[5];
	    out[6] = a[6] + b[6];
	    out[7] = a[7] + b[7];
	    out[8] = a[8] + b[8];
	    return out;
	};
	
	/**
	 * Subtracts matrix b from matrix a
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the first operand
	 * @param {mat3} b the second operand
	 * @returns {mat3} out
	 */
	mat3.subtract = function(out, a, b) {
	    out[0] = a[0] - b[0];
	    out[1] = a[1] - b[1];
	    out[2] = a[2] - b[2];
	    out[3] = a[3] - b[3];
	    out[4] = a[4] - b[4];
	    out[5] = a[5] - b[5];
	    out[6] = a[6] - b[6];
	    out[7] = a[7] - b[7];
	    out[8] = a[8] - b[8];
	    return out;
	};
	
	/**
	 * Alias for {@link mat3.subtract}
	 * @function
	 */
	mat3.sub = mat3.subtract;
	
	/**
	 * Multiply each element of the matrix by a scalar.
	 *
	 * @param {mat3} out the receiving matrix
	 * @param {mat3} a the matrix to scale
	 * @param {Number} b amount to scale the matrix's elements by
	 * @returns {mat3} out
	 */
	mat3.multiplyScalar = function(out, a, b) {
	    out[0] = a[0] * b;
	    out[1] = a[1] * b;
	    out[2] = a[2] * b;
	    out[3] = a[3] * b;
	    out[4] = a[4] * b;
	    out[5] = a[5] * b;
	    out[6] = a[6] * b;
	    out[7] = a[7] * b;
	    out[8] = a[8] * b;
	    return out;
	};
	
	/**
	 * Adds two mat3's after multiplying each element of the second operand by a scalar value.
	 *
	 * @param {mat3} out the receiving vector
	 * @param {mat3} a the first operand
	 * @param {mat3} b the second operand
	 * @param {Number} scale the amount to scale b's elements by before adding
	 * @returns {mat3} out
	 */
	mat3.multiplyScalarAndAdd = function(out, a, b, scale) {
	    out[0] = a[0] + (b[0] * scale);
	    out[1] = a[1] + (b[1] * scale);
	    out[2] = a[2] + (b[2] * scale);
	    out[3] = a[3] + (b[3] * scale);
	    out[4] = a[4] + (b[4] * scale);
	    out[5] = a[5] + (b[5] * scale);
	    out[6] = a[6] + (b[6] * scale);
	    out[7] = a[7] + (b[7] * scale);
	    out[8] = a[8] + (b[8] * scale);
	    return out;
	};
	
	/**
	 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
	 *
	 * @param {mat3} a The first matrix.
	 * @param {mat3} b The second matrix.
	 * @returns {Boolean} True if the matrices are equal, false otherwise.
	 */
	mat3.exactEquals = function (a, b) {
	    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&
	           a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&
	           a[6] === b[6] && a[7] === b[7] && a[8] === b[8];
	};
	
	/**
	 * Returns whether or not the matrices have approximately the same elements in the same position.
	 *
	 * @param {mat3} a The first matrix.
	 * @param {mat3} b The second matrix.
	 * @returns {Boolean} True if the matrices are equal, false otherwise.
	 */
	mat3.equals = function (a, b) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];
	    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];
	    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
	            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
	            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
	            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
	            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
	            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
	            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
	            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
	            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)));
	};
	
	
	module.exports = mat3;


/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	var glMatrix = __webpack_require__(5);
	
	/**
	 * @class 4x4 Matrix
	 * @name mat4
	 */
	var mat4 = {
	  scalar: {},
	  SIMD: {}
	};
	
	/**
	 * Creates a new identity mat4
	 *
	 * @returns {mat4} a new 4x4 matrix
	 */
	mat4.create = function() {
	    var out = new glMatrix.ARRAY_TYPE(16);
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = 1;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = 1;
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	};
	
	/**
	 * Creates a new mat4 initialized with values from an existing matrix
	 *
	 * @param {mat4} a matrix to clone
	 * @returns {mat4} a new 4x4 matrix
	 */
	mat4.clone = function(a) {
	    var out = new glMatrix.ARRAY_TYPE(16);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    out[6] = a[6];
	    out[7] = a[7];
	    out[8] = a[8];
	    out[9] = a[9];
	    out[10] = a[10];
	    out[11] = a[11];
	    out[12] = a[12];
	    out[13] = a[13];
	    out[14] = a[14];
	    out[15] = a[15];
	    return out;
	};
	
	/**
	 * Copy the values from one mat4 to another
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    out[4] = a[4];
	    out[5] = a[5];
	    out[6] = a[6];
	    out[7] = a[7];
	    out[8] = a[8];
	    out[9] = a[9];
	    out[10] = a[10];
	    out[11] = a[11];
	    out[12] = a[12];
	    out[13] = a[13];
	    out[14] = a[14];
	    out[15] = a[15];
	    return out;
	};
	
	/**
	 * Create a new mat4 with the given values
	 *
	 * @param {Number} m00 Component in column 0, row 0 position (index 0)
	 * @param {Number} m01 Component in column 0, row 1 position (index 1)
	 * @param {Number} m02 Component in column 0, row 2 position (index 2)
	 * @param {Number} m03 Component in column 0, row 3 position (index 3)
	 * @param {Number} m10 Component in column 1, row 0 position (index 4)
	 * @param {Number} m11 Component in column 1, row 1 position (index 5)
	 * @param {Number} m12 Component in column 1, row 2 position (index 6)
	 * @param {Number} m13 Component in column 1, row 3 position (index 7)
	 * @param {Number} m20 Component in column 2, row 0 position (index 8)
	 * @param {Number} m21 Component in column 2, row 1 position (index 9)
	 * @param {Number} m22 Component in column 2, row 2 position (index 10)
	 * @param {Number} m23 Component in column 2, row 3 position (index 11)
	 * @param {Number} m30 Component in column 3, row 0 position (index 12)
	 * @param {Number} m31 Component in column 3, row 1 position (index 13)
	 * @param {Number} m32 Component in column 3, row 2 position (index 14)
	 * @param {Number} m33 Component in column 3, row 3 position (index 15)
	 * @returns {mat4} A new mat4
	 */
	mat4.fromValues = function(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
	    var out = new glMatrix.ARRAY_TYPE(16);
	    out[0] = m00;
	    out[1] = m01;
	    out[2] = m02;
	    out[3] = m03;
	    out[4] = m10;
	    out[5] = m11;
	    out[6] = m12;
	    out[7] = m13;
	    out[8] = m20;
	    out[9] = m21;
	    out[10] = m22;
	    out[11] = m23;
	    out[12] = m30;
	    out[13] = m31;
	    out[14] = m32;
	    out[15] = m33;
	    return out;
	};
	
	/**
	 * Set the components of a mat4 to the given values
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {Number} m00 Component in column 0, row 0 position (index 0)
	 * @param {Number} m01 Component in column 0, row 1 position (index 1)
	 * @param {Number} m02 Component in column 0, row 2 position (index 2)
	 * @param {Number} m03 Component in column 0, row 3 position (index 3)
	 * @param {Number} m10 Component in column 1, row 0 position (index 4)
	 * @param {Number} m11 Component in column 1, row 1 position (index 5)
	 * @param {Number} m12 Component in column 1, row 2 position (index 6)
	 * @param {Number} m13 Component in column 1, row 3 position (index 7)
	 * @param {Number} m20 Component in column 2, row 0 position (index 8)
	 * @param {Number} m21 Component in column 2, row 1 position (index 9)
	 * @param {Number} m22 Component in column 2, row 2 position (index 10)
	 * @param {Number} m23 Component in column 2, row 3 position (index 11)
	 * @param {Number} m30 Component in column 3, row 0 position (index 12)
	 * @param {Number} m31 Component in column 3, row 1 position (index 13)
	 * @param {Number} m32 Component in column 3, row 2 position (index 14)
	 * @param {Number} m33 Component in column 3, row 3 position (index 15)
	 * @returns {mat4} out
	 */
	mat4.set = function(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
	    out[0] = m00;
	    out[1] = m01;
	    out[2] = m02;
	    out[3] = m03;
	    out[4] = m10;
	    out[5] = m11;
	    out[6] = m12;
	    out[7] = m13;
	    out[8] = m20;
	    out[9] = m21;
	    out[10] = m22;
	    out[11] = m23;
	    out[12] = m30;
	    out[13] = m31;
	    out[14] = m32;
	    out[15] = m33;
	    return out;
	};
	
	
	/**
	 * Set a mat4 to the identity matrix
	 *
	 * @param {mat4} out the receiving matrix
	 * @returns {mat4} out
	 */
	mat4.identity = function(out) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = 1;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = 1;
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	};
	
	/**
	 * Transpose the values of a mat4 not using SIMD
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.scalar.transpose = function(out, a) {
	    // If we are transposing ourselves we can skip a few steps but have to cache some values
	    if (out === a) {
	        var a01 = a[1], a02 = a[2], a03 = a[3],
	            a12 = a[6], a13 = a[7],
	            a23 = a[11];
	
	        out[1] = a[4];
	        out[2] = a[8];
	        out[3] = a[12];
	        out[4] = a01;
	        out[6] = a[9];
	        out[7] = a[13];
	        out[8] = a02;
	        out[9] = a12;
	        out[11] = a[14];
	        out[12] = a03;
	        out[13] = a13;
	        out[14] = a23;
	    } else {
	        out[0] = a[0];
	        out[1] = a[4];
	        out[2] = a[8];
	        out[3] = a[12];
	        out[4] = a[1];
	        out[5] = a[5];
	        out[6] = a[9];
	        out[7] = a[13];
	        out[8] = a[2];
	        out[9] = a[6];
	        out[10] = a[10];
	        out[11] = a[14];
	        out[12] = a[3];
	        out[13] = a[7];
	        out[14] = a[11];
	        out[15] = a[15];
	    }
	
	    return out;
	};
	
	/**
	 * Transpose the values of a mat4 using SIMD
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.SIMD.transpose = function(out, a) {
	    var a0, a1, a2, a3,
	        tmp01, tmp23,
	        out0, out1, out2, out3;
	
	    a0 = SIMD.Float32x4.load(a, 0);
	    a1 = SIMD.Float32x4.load(a, 4);
	    a2 = SIMD.Float32x4.load(a, 8);
	    a3 = SIMD.Float32x4.load(a, 12);
	
	    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
	    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
	    out0  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);
	    out1  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);
	    SIMD.Float32x4.store(out, 0,  out0);
	    SIMD.Float32x4.store(out, 4,  out1);
	
	    tmp01 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
	    tmp23 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
	    out2  = SIMD.Float32x4.shuffle(tmp01, tmp23, 0, 2, 4, 6);
	    out3  = SIMD.Float32x4.shuffle(tmp01, tmp23, 1, 3, 5, 7);
	    SIMD.Float32x4.store(out, 8,  out2);
	    SIMD.Float32x4.store(out, 12, out3);
	
	    return out;
	};
	
	/**
	 * Transpse a mat4 using SIMD if available and enabled
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.transpose = glMatrix.USE_SIMD ? mat4.SIMD.transpose : mat4.scalar.transpose;
	
	/**
	 * Inverts a mat4 not using SIMD
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.scalar.invert = function(out, a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
	        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
	        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
	        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],
	
	        b00 = a00 * a11 - a01 * a10,
	        b01 = a00 * a12 - a02 * a10,
	        b02 = a00 * a13 - a03 * a10,
	        b03 = a01 * a12 - a02 * a11,
	        b04 = a01 * a13 - a03 * a11,
	        b05 = a02 * a13 - a03 * a12,
	        b06 = a20 * a31 - a21 * a30,
	        b07 = a20 * a32 - a22 * a30,
	        b08 = a20 * a33 - a23 * a30,
	        b09 = a21 * a32 - a22 * a31,
	        b10 = a21 * a33 - a23 * a31,
	        b11 = a22 * a33 - a23 * a32,
	
	        // Calculate the determinant
	        det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
	
	    if (!det) {
	        return null;
	    }
	    det = 1.0 / det;
	
	    out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;
	    out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;
	    out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;
	    out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;
	    out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;
	    out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;
	    out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;
	    out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;
	    out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;
	    out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;
	    out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;
	    out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;
	    out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;
	    out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;
	    out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;
	    out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;
	
	    return out;
	};
	
	/**
	 * Inverts a mat4 using SIMD
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.SIMD.invert = function(out, a) {
	  var row0, row1, row2, row3,
	      tmp1,
	      minor0, minor1, minor2, minor3,
	      det,
	      a0 = SIMD.Float32x4.load(a, 0),
	      a1 = SIMD.Float32x4.load(a, 4),
	      a2 = SIMD.Float32x4.load(a, 8),
	      a3 = SIMD.Float32x4.load(a, 12);
	
	  // Compute matrix adjugate
	  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
	  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
	  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);
	  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);
	  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
	  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
	  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);
	  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);
	
	  tmp1   = SIMD.Float32x4.mul(row2, row3);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
	  minor0 = SIMD.Float32x4.mul(row1, tmp1);
	  minor1 = SIMD.Float32x4.mul(row0, tmp1);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
	  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);
	  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);
	  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);
	
	  tmp1   = SIMD.Float32x4.mul(row1, row2);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
	  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);
	  minor3 = SIMD.Float32x4.mul(row0, tmp1);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
	  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));
	  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);
	  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);
	
	  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
	  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);
	  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);
	  minor2 = SIMD.Float32x4.mul(row0, tmp1);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
	  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));
	  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);
	  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);
	
	  tmp1   = SIMD.Float32x4.mul(row0, row1);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
	  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);
	  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
	  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);
	  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));
	
	  tmp1   = SIMD.Float32x4.mul(row0, row3);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
	  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));
	  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
	  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);
	  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));
	
	  tmp1   = SIMD.Float32x4.mul(row0, row2);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
	  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);
	  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
	  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));
	  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);
	
	  // Compute matrix determinant
	  det   = SIMD.Float32x4.mul(row0, minor0);
	  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 2, 3, 0, 1), det);
	  det   = SIMD.Float32x4.add(SIMD.Float32x4.swizzle(det, 1, 0, 3, 2), det);
	  tmp1  = SIMD.Float32x4.reciprocalApproximation(det);
	  det   = SIMD.Float32x4.sub(
	               SIMD.Float32x4.add(tmp1, tmp1),
	               SIMD.Float32x4.mul(det, SIMD.Float32x4.mul(tmp1, tmp1)));
	  det   = SIMD.Float32x4.swizzle(det, 0, 0, 0, 0);
	  if (!det) {
	      return null;
	  }
	
	  // Compute matrix inverse
	  SIMD.Float32x4.store(out, 0,  SIMD.Float32x4.mul(det, minor0));
	  SIMD.Float32x4.store(out, 4,  SIMD.Float32x4.mul(det, minor1));
	  SIMD.Float32x4.store(out, 8,  SIMD.Float32x4.mul(det, minor2));
	  SIMD.Float32x4.store(out, 12, SIMD.Float32x4.mul(det, minor3));
	  return out;
	}
	
	/**
	 * Inverts a mat4 using SIMD if available and enabled
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.invert = glMatrix.USE_SIMD ? mat4.SIMD.invert : mat4.scalar.invert;
	
	/**
	 * Calculates the adjugate of a mat4 not using SIMD
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.scalar.adjoint = function(out, a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
	        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
	        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
	        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
	
	    out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));
	    out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));
	    out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));
	    out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));
	    out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));
	    out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));
	    out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));
	    out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));
	    out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));
	    out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));
	    out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));
	    out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));
	    out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));
	    out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));
	    out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));
	    out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));
	    return out;
	};
	
	/**
	 * Calculates the adjugate of a mat4 using SIMD
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	mat4.SIMD.adjoint = function(out, a) {
	  var a0, a1, a2, a3;
	  var row0, row1, row2, row3;
	  var tmp1;
	  var minor0, minor1, minor2, minor3;
	
	  a0 = SIMD.Float32x4.load(a, 0);
	  a1 = SIMD.Float32x4.load(a, 4);
	  a2 = SIMD.Float32x4.load(a, 8);
	  a3 = SIMD.Float32x4.load(a, 12);
	
	  // Transpose the source matrix.  Sort of.  Not a true transpose operation
	  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 0, 1, 4, 5);
	  row1 = SIMD.Float32x4.shuffle(a2, a3, 0, 1, 4, 5);
	  row0 = SIMD.Float32x4.shuffle(tmp1, row1, 0, 2, 4, 6);
	  row1 = SIMD.Float32x4.shuffle(row1, tmp1, 1, 3, 5, 7);
	
	  tmp1 = SIMD.Float32x4.shuffle(a0, a1, 2, 3, 6, 7);
	  row3 = SIMD.Float32x4.shuffle(a2, a3, 2, 3, 6, 7);
	  row2 = SIMD.Float32x4.shuffle(tmp1, row3, 0, 2, 4, 6);
	  row3 = SIMD.Float32x4.shuffle(row3, tmp1, 1, 3, 5, 7);
	
	  tmp1   = SIMD.Float32x4.mul(row2, row3);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
	  minor0 = SIMD.Float32x4.mul(row1, tmp1);
	  minor1 = SIMD.Float32x4.mul(row0, tmp1);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
	  minor0 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row1, tmp1), minor0);
	  minor1 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor1);
	  minor1 = SIMD.Float32x4.swizzle(minor1, 2, 3, 0, 1);
	
	  tmp1   = SIMD.Float32x4.mul(row1, row2);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
	  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor0);
	  minor3 = SIMD.Float32x4.mul(row0, tmp1);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
	  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row3, tmp1));
	  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor3);
	  minor3 = SIMD.Float32x4.swizzle(minor3, 2, 3, 0, 1);
	
	  tmp1   = SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(row1, 2, 3, 0, 1), row3);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
	  row2   = SIMD.Float32x4.swizzle(row2, 2, 3, 0, 1);
	  minor0 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor0);
	  minor2 = SIMD.Float32x4.mul(row0, tmp1);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
	  minor0 = SIMD.Float32x4.sub(minor0, SIMD.Float32x4.mul(row2, tmp1));
	  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row0, tmp1), minor2);
	  minor2 = SIMD.Float32x4.swizzle(minor2, 2, 3, 0, 1);
	
	  tmp1   = SIMD.Float32x4.mul(row0, row1);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
	  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor2);
	  minor3 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row2, tmp1), minor3);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
	  minor2 = SIMD.Float32x4.sub(SIMD.Float32x4.mul(row3, tmp1), minor2);
	  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row2, tmp1));
	
	  tmp1   = SIMD.Float32x4.mul(row0, row3);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
	  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row2, tmp1));
	  minor2 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor2);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
	  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row2, tmp1), minor1);
	  minor2 = SIMD.Float32x4.sub(minor2, SIMD.Float32x4.mul(row1, tmp1));
	
	  tmp1   = SIMD.Float32x4.mul(row0, row2);
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 1, 0, 3, 2);
	  minor1 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row3, tmp1), minor1);
	  minor3 = SIMD.Float32x4.sub(minor3, SIMD.Float32x4.mul(row1, tmp1));
	  tmp1   = SIMD.Float32x4.swizzle(tmp1, 2, 3, 0, 1);
	  minor1 = SIMD.Float32x4.sub(minor1, SIMD.Float32x4.mul(row3, tmp1));
	  minor3 = SIMD.Float32x4.add(SIMD.Float32x4.mul(row1, tmp1), minor3);
	
	  SIMD.Float32x4.store(out, 0,  minor0);
	  SIMD.Float32x4.store(out, 4,  minor1);
	  SIMD.Float32x4.store(out, 8,  minor2);
	  SIMD.Float32x4.store(out, 12, minor3);
	  return out;
	};
	
	/**
	 * Calculates the adjugate of a mat4 using SIMD if available and enabled
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the source matrix
	 * @returns {mat4} out
	 */
	 mat4.adjoint = glMatrix.USE_SIMD ? mat4.SIMD.adjoint : mat4.scalar.adjoint;
	
	/**
	 * Calculates the determinant of a mat4
	 *
	 * @param {mat4} a the source matrix
	 * @returns {Number} determinant of a
	 */
	mat4.determinant = function (a) {
	    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
	        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
	        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
	        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15],
	
	        b00 = a00 * a11 - a01 * a10,
	        b01 = a00 * a12 - a02 * a10,
	        b02 = a00 * a13 - a03 * a10,
	        b03 = a01 * a12 - a02 * a11,
	        b04 = a01 * a13 - a03 * a11,
	        b05 = a02 * a13 - a03 * a12,
	        b06 = a20 * a31 - a21 * a30,
	        b07 = a20 * a32 - a22 * a30,
	        b08 = a20 * a33 - a23 * a30,
	        b09 = a21 * a32 - a22 * a31,
	        b10 = a21 * a33 - a23 * a31,
	        b11 = a22 * a33 - a23 * a32;
	
	    // Calculate the determinant
	    return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;
	};
	
	/**
	 * Multiplies two mat4's explicitly using SIMD
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the first operand, must be a Float32Array
	 * @param {mat4} b the second operand, must be a Float32Array
	 * @returns {mat4} out
	 */
	mat4.SIMD.multiply = function (out, a, b) {
	    var a0 = SIMD.Float32x4.load(a, 0);
	    var a1 = SIMD.Float32x4.load(a, 4);
	    var a2 = SIMD.Float32x4.load(a, 8);
	    var a3 = SIMD.Float32x4.load(a, 12);
	
	    var b0 = SIMD.Float32x4.load(b, 0);
	    var out0 = SIMD.Float32x4.add(
	                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 0, 0, 0, 0), a0),
	                   SIMD.Float32x4.add(
	                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 1, 1, 1, 1), a1),
	                       SIMD.Float32x4.add(
	                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 2, 2, 2, 2), a2),
	                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b0, 3, 3, 3, 3), a3))));
	    SIMD.Float32x4.store(out, 0, out0);
	
	    var b1 = SIMD.Float32x4.load(b, 4);
	    var out1 = SIMD.Float32x4.add(
	                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 0, 0, 0, 0), a0),
	                   SIMD.Float32x4.add(
	                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 1, 1, 1, 1), a1),
	                       SIMD.Float32x4.add(
	                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 2, 2, 2, 2), a2),
	                           SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b1, 3, 3, 3, 3), a3))));
	    SIMD.Float32x4.store(out, 4, out1);
	
	    var b2 = SIMD.Float32x4.load(b, 8);
	    var out2 = SIMD.Float32x4.add(
	                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 0, 0, 0, 0), a0),
	                   SIMD.Float32x4.add(
	                       SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 1, 1, 1, 1), a1),
	                       SIMD.Float32x4.add(
	                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 2, 2, 2, 2), a2),
	                               SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b2, 3, 3, 3, 3), a3))));
	    SIMD.Float32x4.store(out, 8, out2);
	
	    var b3 = SIMD.Float32x4.load(b, 12);
	    var out3 = SIMD.Float32x4.add(
	                   SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 0, 0, 0, 0), a0),
	                   SIMD.Float32x4.add(
	                        SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 1, 1, 1, 1), a1),
	                        SIMD.Float32x4.add(
	                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 2, 2, 2, 2), a2),
	                            SIMD.Float32x4.mul(SIMD.Float32x4.swizzle(b3, 3, 3, 3, 3), a3))));
	    SIMD.Float32x4.store(out, 12, out3);
	
	    return out;
	};
	
	/**
	 * Multiplies two mat4's explicitly not using SIMD
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the first operand
	 * @param {mat4} b the second operand
	 * @returns {mat4} out
	 */
	mat4.scalar.multiply = function (out, a, b) {
	    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
	        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
	        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
	        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];
	
	    // Cache only the current line of the second matrix
	    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
	    out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
	    out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
	    out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
	    out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
	
	    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
	    out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
	    out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
	    out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
	    out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
	
	    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
	    out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
	    out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
	    out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
	    out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
	
	    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
	    out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
	    out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
	    out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
	    out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;
	    return out;
	};
	
	/**
	 * Multiplies two mat4's using SIMD if available and enabled
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the first operand
	 * @param {mat4} b the second operand
	 * @returns {mat4} out
	 */
	mat4.multiply = glMatrix.USE_SIMD ? mat4.SIMD.multiply : mat4.scalar.multiply;
	
	/**
	 * Alias for {@link mat4.multiply}
	 * @function
	 */
	mat4.mul = mat4.multiply;
	
	/**
	 * Translate a mat4 by the given vector not using SIMD
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to translate
	 * @param {vec3} v vector to translate by
	 * @returns {mat4} out
	 */
	mat4.scalar.translate = function (out, a, v) {
	    var x = v[0], y = v[1], z = v[2],
	        a00, a01, a02, a03,
	        a10, a11, a12, a13,
	        a20, a21, a22, a23;
	
	    if (a === out) {
	        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
	        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
	        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
	        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
	    } else {
	        a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
	        a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
	        a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];
	
	        out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;
	        out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;
	        out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;
	
	        out[12] = a00 * x + a10 * y + a20 * z + a[12];
	        out[13] = a01 * x + a11 * y + a21 * z + a[13];
	        out[14] = a02 * x + a12 * y + a22 * z + a[14];
	        out[15] = a03 * x + a13 * y + a23 * z + a[15];
	    }
	
	    return out;
	};
	
	/**
	 * Translates a mat4 by the given vector using SIMD
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to translate
	 * @param {vec3} v vector to translate by
	 * @returns {mat4} out
	 */
	mat4.SIMD.translate = function (out, a, v) {
	    var a0 = SIMD.Float32x4.load(a, 0),
	        a1 = SIMD.Float32x4.load(a, 4),
	        a2 = SIMD.Float32x4.load(a, 8),
	        a3 = SIMD.Float32x4.load(a, 12),
	        vec = SIMD.Float32x4(v[0], v[1], v[2] , 0);
	
	    if (a !== out) {
	        out[0] = a[0]; out[1] = a[1]; out[2] = a[2]; out[3] = a[3];
	        out[4] = a[4]; out[5] = a[5]; out[6] = a[6]; out[7] = a[7];
	        out[8] = a[8]; out[9] = a[9]; out[10] = a[10]; out[11] = a[11];
	    }
	
	    a0 = SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0));
	    a1 = SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1));
	    a2 = SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2));
	
	    var t0 = SIMD.Float32x4.add(a0, SIMD.Float32x4.add(a1, SIMD.Float32x4.add(a2, a3)));
	    SIMD.Float32x4.store(out, 12, t0);
	
	    return out;
	};
	
	/**
	 * Translates a mat4 by the given vector using SIMD if available and enabled
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to translate
	 * @param {vec3} v vector to translate by
	 * @returns {mat4} out
	 */
	mat4.translate = glMatrix.USE_SIMD ? mat4.SIMD.translate : mat4.scalar.translate;
	
	/**
	 * Scales the mat4 by the dimensions in the given vec3 not using vectorization
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to scale
	 * @param {vec3} v the vec3 to scale the matrix by
	 * @returns {mat4} out
	 **/
	mat4.scalar.scale = function(out, a, v) {
	    var x = v[0], y = v[1], z = v[2];
	
	    out[0] = a[0] * x;
	    out[1] = a[1] * x;
	    out[2] = a[2] * x;
	    out[3] = a[3] * x;
	    out[4] = a[4] * y;
	    out[5] = a[5] * y;
	    out[6] = a[6] * y;
	    out[7] = a[7] * y;
	    out[8] = a[8] * z;
	    out[9] = a[9] * z;
	    out[10] = a[10] * z;
	    out[11] = a[11] * z;
	    out[12] = a[12];
	    out[13] = a[13];
	    out[14] = a[14];
	    out[15] = a[15];
	    return out;
	};
	
	/**
	 * Scales the mat4 by the dimensions in the given vec3 using vectorization
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to scale
	 * @param {vec3} v the vec3 to scale the matrix by
	 * @returns {mat4} out
	 **/
	mat4.SIMD.scale = function(out, a, v) {
	    var a0, a1, a2;
	    var vec = SIMD.Float32x4(v[0], v[1], v[2], 0);
	
	    a0 = SIMD.Float32x4.load(a, 0);
	    SIMD.Float32x4.store(
	        out, 0, SIMD.Float32x4.mul(a0, SIMD.Float32x4.swizzle(vec, 0, 0, 0, 0)));
	
	    a1 = SIMD.Float32x4.load(a, 4);
	    SIMD.Float32x4.store(
	        out, 4, SIMD.Float32x4.mul(a1, SIMD.Float32x4.swizzle(vec, 1, 1, 1, 1)));
	
	    a2 = SIMD.Float32x4.load(a, 8);
	    SIMD.Float32x4.store(
	        out, 8, SIMD.Float32x4.mul(a2, SIMD.Float32x4.swizzle(vec, 2, 2, 2, 2)));
	
	    out[12] = a[12];
	    out[13] = a[13];
	    out[14] = a[14];
	    out[15] = a[15];
	    return out;
	};
	
	/**
	 * Scales the mat4 by the dimensions in the given vec3 using SIMD if available and enabled
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to scale
	 * @param {vec3} v the vec3 to scale the matrix by
	 * @returns {mat4} out
	 */
	mat4.scale = glMatrix.USE_SIMD ? mat4.SIMD.scale : mat4.scalar.scale;
	
	/**
	 * Rotates a mat4 by the given angle around the given axis
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @param {vec3} axis the axis to rotate around
	 * @returns {mat4} out
	 */
	mat4.rotate = function (out, a, rad, axis) {
	    var x = axis[0], y = axis[1], z = axis[2],
	        len = Math.sqrt(x * x + y * y + z * z),
	        s, c, t,
	        a00, a01, a02, a03,
	        a10, a11, a12, a13,
	        a20, a21, a22, a23,
	        b00, b01, b02,
	        b10, b11, b12,
	        b20, b21, b22;
	
	    if (Math.abs(len) < glMatrix.EPSILON) { return null; }
	
	    len = 1 / len;
	    x *= len;
	    y *= len;
	    z *= len;
	
	    s = Math.sin(rad);
	    c = Math.cos(rad);
	    t = 1 - c;
	
	    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];
	    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];
	    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];
	
	    // Construct the elements of the rotation matrix
	    b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;
	    b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;
	    b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;
	
	    // Perform rotation-specific matrix multiplication
	    out[0] = a00 * b00 + a10 * b01 + a20 * b02;
	    out[1] = a01 * b00 + a11 * b01 + a21 * b02;
	    out[2] = a02 * b00 + a12 * b01 + a22 * b02;
	    out[3] = a03 * b00 + a13 * b01 + a23 * b02;
	    out[4] = a00 * b10 + a10 * b11 + a20 * b12;
	    out[5] = a01 * b10 + a11 * b11 + a21 * b12;
	    out[6] = a02 * b10 + a12 * b11 + a22 * b12;
	    out[7] = a03 * b10 + a13 * b11 + a23 * b12;
	    out[8] = a00 * b20 + a10 * b21 + a20 * b22;
	    out[9] = a01 * b20 + a11 * b21 + a21 * b22;
	    out[10] = a02 * b20 + a12 * b21 + a22 * b22;
	    out[11] = a03 * b20 + a13 * b21 + a23 * b22;
	
	    if (a !== out) { // If the source and destination differ, copy the unchanged last row
	        out[12] = a[12];
	        out[13] = a[13];
	        out[14] = a[14];
	        out[15] = a[15];
	    }
	    return out;
	};
	
	/**
	 * Rotates a matrix by the given angle around the X axis not using SIMD
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.scalar.rotateX = function (out, a, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad),
	        a10 = a[4],
	        a11 = a[5],
	        a12 = a[6],
	        a13 = a[7],
	        a20 = a[8],
	        a21 = a[9],
	        a22 = a[10],
	        a23 = a[11];
	
	    if (a !== out) { // If the source and destination differ, copy the unchanged rows
	        out[0]  = a[0];
	        out[1]  = a[1];
	        out[2]  = a[2];
	        out[3]  = a[3];
	        out[12] = a[12];
	        out[13] = a[13];
	        out[14] = a[14];
	        out[15] = a[15];
	    }
	
	    // Perform axis-specific matrix multiplication
	    out[4] = a10 * c + a20 * s;
	    out[5] = a11 * c + a21 * s;
	    out[6] = a12 * c + a22 * s;
	    out[7] = a13 * c + a23 * s;
	    out[8] = a20 * c - a10 * s;
	    out[9] = a21 * c - a11 * s;
	    out[10] = a22 * c - a12 * s;
	    out[11] = a23 * c - a13 * s;
	    return out;
	};
	
	/**
	 * Rotates a matrix by the given angle around the X axis using SIMD
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.SIMD.rotateX = function (out, a, rad) {
	    var s = SIMD.Float32x4.splat(Math.sin(rad)),
	        c = SIMD.Float32x4.splat(Math.cos(rad));
	
	    if (a !== out) { // If the source and destination differ, copy the unchanged rows
	      out[0]  = a[0];
	      out[1]  = a[1];
	      out[2]  = a[2];
	      out[3]  = a[3];
	      out[12] = a[12];
	      out[13] = a[13];
	      out[14] = a[14];
	      out[15] = a[15];
	    }
	
	    // Perform axis-specific matrix multiplication
	    var a_1 = SIMD.Float32x4.load(a, 4);
	    var a_2 = SIMD.Float32x4.load(a, 8);
	    SIMD.Float32x4.store(out, 4,
	                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_2, s)));
	    SIMD.Float32x4.store(out, 8,
	                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_2, c), SIMD.Float32x4.mul(a_1, s)));
	    return out;
	};
	
	/**
	 * Rotates a matrix by the given angle around the X axis using SIMD if availabe and enabled
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.rotateX = glMatrix.USE_SIMD ? mat4.SIMD.rotateX : mat4.scalar.rotateX;
	
	/**
	 * Rotates a matrix by the given angle around the Y axis not using SIMD
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.scalar.rotateY = function (out, a, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad),
	        a00 = a[0],
	        a01 = a[1],
	        a02 = a[2],
	        a03 = a[3],
	        a20 = a[8],
	        a21 = a[9],
	        a22 = a[10],
	        a23 = a[11];
	
	    if (a !== out) { // If the source and destination differ, copy the unchanged rows
	        out[4]  = a[4];
	        out[5]  = a[5];
	        out[6]  = a[6];
	        out[7]  = a[7];
	        out[12] = a[12];
	        out[13] = a[13];
	        out[14] = a[14];
	        out[15] = a[15];
	    }
	
	    // Perform axis-specific matrix multiplication
	    out[0] = a00 * c - a20 * s;
	    out[1] = a01 * c - a21 * s;
	    out[2] = a02 * c - a22 * s;
	    out[3] = a03 * c - a23 * s;
	    out[8] = a00 * s + a20 * c;
	    out[9] = a01 * s + a21 * c;
	    out[10] = a02 * s + a22 * c;
	    out[11] = a03 * s + a23 * c;
	    return out;
	};
	
	/**
	 * Rotates a matrix by the given angle around the Y axis using SIMD
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.SIMD.rotateY = function (out, a, rad) {
	    var s = SIMD.Float32x4.splat(Math.sin(rad)),
	        c = SIMD.Float32x4.splat(Math.cos(rad));
	
	    if (a !== out) { // If the source and destination differ, copy the unchanged rows
	        out[4]  = a[4];
	        out[5]  = a[5];
	        out[6]  = a[6];
	        out[7]  = a[7];
	        out[12] = a[12];
	        out[13] = a[13];
	        out[14] = a[14];
	        out[15] = a[15];
	    }
	
	    // Perform axis-specific matrix multiplication
	    var a_0 = SIMD.Float32x4.load(a, 0);
	    var a_2 = SIMD.Float32x4.load(a, 8);
	    SIMD.Float32x4.store(out, 0,
	                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_2, s)));
	    SIMD.Float32x4.store(out, 8,
	                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, s), SIMD.Float32x4.mul(a_2, c)));
	    return out;
	};
	
	/**
	 * Rotates a matrix by the given angle around the Y axis if SIMD available and enabled
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	 mat4.rotateY = glMatrix.USE_SIMD ? mat4.SIMD.rotateY : mat4.scalar.rotateY;
	
	/**
	 * Rotates a matrix by the given angle around the Z axis not using SIMD
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.scalar.rotateZ = function (out, a, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad),
	        a00 = a[0],
	        a01 = a[1],
	        a02 = a[2],
	        a03 = a[3],
	        a10 = a[4],
	        a11 = a[5],
	        a12 = a[6],
	        a13 = a[7];
	
	    if (a !== out) { // If the source and destination differ, copy the unchanged last row
	        out[8]  = a[8];
	        out[9]  = a[9];
	        out[10] = a[10];
	        out[11] = a[11];
	        out[12] = a[12];
	        out[13] = a[13];
	        out[14] = a[14];
	        out[15] = a[15];
	    }
	
	    // Perform axis-specific matrix multiplication
	    out[0] = a00 * c + a10 * s;
	    out[1] = a01 * c + a11 * s;
	    out[2] = a02 * c + a12 * s;
	    out[3] = a03 * c + a13 * s;
	    out[4] = a10 * c - a00 * s;
	    out[5] = a11 * c - a01 * s;
	    out[6] = a12 * c - a02 * s;
	    out[7] = a13 * c - a03 * s;
	    return out;
	};
	
	/**
	 * Rotates a matrix by the given angle around the Z axis using SIMD
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.SIMD.rotateZ = function (out, a, rad) {
	    var s = SIMD.Float32x4.splat(Math.sin(rad)),
	        c = SIMD.Float32x4.splat(Math.cos(rad));
	
	    if (a !== out) { // If the source and destination differ, copy the unchanged last row
	        out[8]  = a[8];
	        out[9]  = a[9];
	        out[10] = a[10];
	        out[11] = a[11];
	        out[12] = a[12];
	        out[13] = a[13];
	        out[14] = a[14];
	        out[15] = a[15];
	    }
	
	    // Perform axis-specific matrix multiplication
	    var a_0 = SIMD.Float32x4.load(a, 0);
	    var a_1 = SIMD.Float32x4.load(a, 4);
	    SIMD.Float32x4.store(out, 0,
	                         SIMD.Float32x4.add(SIMD.Float32x4.mul(a_0, c), SIMD.Float32x4.mul(a_1, s)));
	    SIMD.Float32x4.store(out, 4,
	                         SIMD.Float32x4.sub(SIMD.Float32x4.mul(a_1, c), SIMD.Float32x4.mul(a_0, s)));
	    return out;
	};
	
	/**
	 * Rotates a matrix by the given angle around the Z axis if SIMD available and enabled
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to rotate
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	 mat4.rotateZ = glMatrix.USE_SIMD ? mat4.SIMD.rotateZ : mat4.scalar.rotateZ;
	
	/**
	 * Creates a matrix from a vector translation
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.translate(dest, dest, vec);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {vec3} v Translation vector
	 * @returns {mat4} out
	 */
	mat4.fromTranslation = function(out, v) {
	    out[0] = 1;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = 1;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = 1;
	    out[11] = 0;
	    out[12] = v[0];
	    out[13] = v[1];
	    out[14] = v[2];
	    out[15] = 1;
	    return out;
	}
	
	/**
	 * Creates a matrix from a vector scaling
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.scale(dest, dest, vec);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {vec3} v Scaling vector
	 * @returns {mat4} out
	 */
	mat4.fromScaling = function(out, v) {
	    out[0] = v[0];
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = v[1];
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = v[2];
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	}
	
	/**
	 * Creates a matrix from a given angle around a given axis
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.rotate(dest, dest, rad, axis);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {Number} rad the angle to rotate the matrix by
	 * @param {vec3} axis the axis to rotate around
	 * @returns {mat4} out
	 */
	mat4.fromRotation = function(out, rad, axis) {
	    var x = axis[0], y = axis[1], z = axis[2],
	        len = Math.sqrt(x * x + y * y + z * z),
	        s, c, t;
	
	    if (Math.abs(len) < glMatrix.EPSILON) { return null; }
	
	    len = 1 / len;
	    x *= len;
	    y *= len;
	    z *= len;
	
	    s = Math.sin(rad);
	    c = Math.cos(rad);
	    t = 1 - c;
	
	    // Perform rotation-specific matrix multiplication
	    out[0] = x * x * t + c;
	    out[1] = y * x * t + z * s;
	    out[2] = z * x * t - y * s;
	    out[3] = 0;
	    out[4] = x * y * t - z * s;
	    out[5] = y * y * t + c;
	    out[6] = z * y * t + x * s;
	    out[7] = 0;
	    out[8] = x * z * t + y * s;
	    out[9] = y * z * t - x * s;
	    out[10] = z * z * t + c;
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	}
	
	/**
	 * Creates a matrix from the given angle around the X axis
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.rotateX(dest, dest, rad);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.fromXRotation = function(out, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad);
	
	    // Perform axis-specific matrix multiplication
	    out[0]  = 1;
	    out[1]  = 0;
	    out[2]  = 0;
	    out[3]  = 0;
	    out[4] = 0;
	    out[5] = c;
	    out[6] = s;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = -s;
	    out[10] = c;
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	}
	
	/**
	 * Creates a matrix from the given angle around the Y axis
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.rotateY(dest, dest, rad);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.fromYRotation = function(out, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad);
	
	    // Perform axis-specific matrix multiplication
	    out[0]  = c;
	    out[1]  = 0;
	    out[2]  = -s;
	    out[3]  = 0;
	    out[4] = 0;
	    out[5] = 1;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = s;
	    out[9] = 0;
	    out[10] = c;
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	}
	
	/**
	 * Creates a matrix from the given angle around the Z axis
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.rotateZ(dest, dest, rad);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {Number} rad the angle to rotate the matrix by
	 * @returns {mat4} out
	 */
	mat4.fromZRotation = function(out, rad) {
	    var s = Math.sin(rad),
	        c = Math.cos(rad);
	
	    // Perform axis-specific matrix multiplication
	    out[0]  = c;
	    out[1]  = s;
	    out[2]  = 0;
	    out[3]  = 0;
	    out[4] = -s;
	    out[5] = c;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = 1;
	    out[11] = 0;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	    return out;
	}
	
	/**
	 * Creates a matrix from a quaternion rotation and vector translation
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.translate(dest, vec);
	 *     var quatMat = mat4.create();
	 *     quat4.toMat4(quat, quatMat);
	 *     mat4.multiply(dest, quatMat);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {quat4} q Rotation quaternion
	 * @param {vec3} v Translation vector
	 * @returns {mat4} out
	 */
	mat4.fromRotationTranslation = function (out, q, v) {
	    // Quaternion math
	    var x = q[0], y = q[1], z = q[2], w = q[3],
	        x2 = x + x,
	        y2 = y + y,
	        z2 = z + z,
	
	        xx = x * x2,
	        xy = x * y2,
	        xz = x * z2,
	        yy = y * y2,
	        yz = y * z2,
	        zz = z * z2,
	        wx = w * x2,
	        wy = w * y2,
	        wz = w * z2;
	
	    out[0] = 1 - (yy + zz);
	    out[1] = xy + wz;
	    out[2] = xz - wy;
	    out[3] = 0;
	    out[4] = xy - wz;
	    out[5] = 1 - (xx + zz);
	    out[6] = yz + wx;
	    out[7] = 0;
	    out[8] = xz + wy;
	    out[9] = yz - wx;
	    out[10] = 1 - (xx + yy);
	    out[11] = 0;
	    out[12] = v[0];
	    out[13] = v[1];
	    out[14] = v[2];
	    out[15] = 1;
	
	    return out;
	};
	
	/**
	 * Returns the translation vector component of a transformation
	 *  matrix. If a matrix is built with fromRotationTranslation,
	 *  the returned vector will be the same as the translation vector
	 *  originally supplied.
	 * @param  {vec3} out Vector to receive translation component
	 * @param  {mat4} mat Matrix to be decomposed (input)
	 * @return {vec3} out
	 */
	mat4.getTranslation = function (out, mat) {
	  out[0] = mat[12];
	  out[1] = mat[13];
	  out[2] = mat[14];
	
	  return out;
	};
	
	/**
	 * Returns the scaling factor component of a transformation
	 *  matrix. If a matrix is built with fromRotationTranslationScale
	 *  with a normalized Quaternion paramter, the returned vector will be 
	 *  the same as the scaling vector
	 *  originally supplied.
	 * @param  {vec3} out Vector to receive scaling factor component
	 * @param  {mat4} mat Matrix to be decomposed (input)
	 * @return {vec3} out
	 */
	mat4.getScaling = function (out, mat) {
	  var m11 = mat[0],
	      m12 = mat[1],
	      m13 = mat[2],
	      m21 = mat[4],
	      m22 = mat[5],
	      m23 = mat[6],
	      m31 = mat[8],
	      m32 = mat[9],
	      m33 = mat[10];
	
	  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);
	  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);
	  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);
	
	  return out;
	};
	
	/**
	 * Returns a quaternion representing the rotational component
	 *  of a transformation matrix. If a matrix is built with
	 *  fromRotationTranslation, the returned quaternion will be the
	 *  same as the quaternion originally supplied.
	 * @param {quat} out Quaternion to receive the rotation component
	 * @param {mat4} mat Matrix to be decomposed (input)
	 * @return {quat} out
	 */
	mat4.getRotation = function (out, mat) {
	  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm
	  var trace = mat[0] + mat[5] + mat[10];
	  var S = 0;
	
	  if (trace > 0) { 
	    S = Math.sqrt(trace + 1.0) * 2;
	    out[3] = 0.25 * S;
	    out[0] = (mat[6] - mat[9]) / S;
	    out[1] = (mat[8] - mat[2]) / S; 
	    out[2] = (mat[1] - mat[4]) / S; 
	  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) { 
	    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;
	    out[3] = (mat[6] - mat[9]) / S;
	    out[0] = 0.25 * S;
	    out[1] = (mat[1] + mat[4]) / S; 
	    out[2] = (mat[8] + mat[2]) / S; 
	  } else if (mat[5] > mat[10]) { 
	    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;
	    out[3] = (mat[8] - mat[2]) / S;
	    out[0] = (mat[1] + mat[4]) / S; 
	    out[1] = 0.25 * S;
	    out[2] = (mat[6] + mat[9]) / S; 
	  } else { 
	    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;
	    out[3] = (mat[1] - mat[4]) / S;
	    out[0] = (mat[8] + mat[2]) / S;
	    out[1] = (mat[6] + mat[9]) / S;
	    out[2] = 0.25 * S;
	  }
	
	  return out;
	};
	
	/**
	 * Creates a matrix from a quaternion rotation, vector translation and vector scale
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.translate(dest, vec);
	 *     var quatMat = mat4.create();
	 *     quat4.toMat4(quat, quatMat);
	 *     mat4.multiply(dest, quatMat);
	 *     mat4.scale(dest, scale)
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {quat4} q Rotation quaternion
	 * @param {vec3} v Translation vector
	 * @param {vec3} s Scaling vector
	 * @returns {mat4} out
	 */
	mat4.fromRotationTranslationScale = function (out, q, v, s) {
	    // Quaternion math
	    var x = q[0], y = q[1], z = q[2], w = q[3],
	        x2 = x + x,
	        y2 = y + y,
	        z2 = z + z,
	
	        xx = x * x2,
	        xy = x * y2,
	        xz = x * z2,
	        yy = y * y2,
	        yz = y * z2,
	        zz = z * z2,
	        wx = w * x2,
	        wy = w * y2,
	        wz = w * z2,
	        sx = s[0],
	        sy = s[1],
	        sz = s[2];
	
	    out[0] = (1 - (yy + zz)) * sx;
	    out[1] = (xy + wz) * sx;
	    out[2] = (xz - wy) * sx;
	    out[3] = 0;
	    out[4] = (xy - wz) * sy;
	    out[5] = (1 - (xx + zz)) * sy;
	    out[6] = (yz + wx) * sy;
	    out[7] = 0;
	    out[8] = (xz + wy) * sz;
	    out[9] = (yz - wx) * sz;
	    out[10] = (1 - (xx + yy)) * sz;
	    out[11] = 0;
	    out[12] = v[0];
	    out[13] = v[1];
	    out[14] = v[2];
	    out[15] = 1;
	
	    return out;
	};
	
	/**
	 * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin
	 * This is equivalent to (but much faster than):
	 *
	 *     mat4.identity(dest);
	 *     mat4.translate(dest, vec);
	 *     mat4.translate(dest, origin);
	 *     var quatMat = mat4.create();
	 *     quat4.toMat4(quat, quatMat);
	 *     mat4.multiply(dest, quatMat);
	 *     mat4.scale(dest, scale)
	 *     mat4.translate(dest, negativeOrigin);
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {quat4} q Rotation quaternion
	 * @param {vec3} v Translation vector
	 * @param {vec3} s Scaling vector
	 * @param {vec3} o The origin vector around which to scale and rotate
	 * @returns {mat4} out
	 */
	mat4.fromRotationTranslationScaleOrigin = function (out, q, v, s, o) {
	  // Quaternion math
	  var x = q[0], y = q[1], z = q[2], w = q[3],
	      x2 = x + x,
	      y2 = y + y,
	      z2 = z + z,
	
	      xx = x * x2,
	      xy = x * y2,
	      xz = x * z2,
	      yy = y * y2,
	      yz = y * z2,
	      zz = z * z2,
	      wx = w * x2,
	      wy = w * y2,
	      wz = w * z2,
	
	      sx = s[0],
	      sy = s[1],
	      sz = s[2],
	
	      ox = o[0],
	      oy = o[1],
	      oz = o[2];
	
	  out[0] = (1 - (yy + zz)) * sx;
	  out[1] = (xy + wz) * sx;
	  out[2] = (xz - wy) * sx;
	  out[3] = 0;
	  out[4] = (xy - wz) * sy;
	  out[5] = (1 - (xx + zz)) * sy;
	  out[6] = (yz + wx) * sy;
	  out[7] = 0;
	  out[8] = (xz + wy) * sz;
	  out[9] = (yz - wx) * sz;
	  out[10] = (1 - (xx + yy)) * sz;
	  out[11] = 0;
	  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);
	  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);
	  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);
	  out[15] = 1;
	
	  return out;
	};
	
	/**
	 * Calculates a 4x4 matrix from the given quaternion
	 *
	 * @param {mat4} out mat4 receiving operation result
	 * @param {quat} q Quaternion to create matrix from
	 *
	 * @returns {mat4} out
	 */
	mat4.fromQuat = function (out, q) {
	    var x = q[0], y = q[1], z = q[2], w = q[3],
	        x2 = x + x,
	        y2 = y + y,
	        z2 = z + z,
	
	        xx = x * x2,
	        yx = y * x2,
	        yy = y * y2,
	        zx = z * x2,
	        zy = z * y2,
	        zz = z * z2,
	        wx = w * x2,
	        wy = w * y2,
	        wz = w * z2;
	
	    out[0] = 1 - yy - zz;
	    out[1] = yx + wz;
	    out[2] = zx - wy;
	    out[3] = 0;
	
	    out[4] = yx - wz;
	    out[5] = 1 - xx - zz;
	    out[6] = zy + wx;
	    out[7] = 0;
	
	    out[8] = zx + wy;
	    out[9] = zy - wx;
	    out[10] = 1 - xx - yy;
	    out[11] = 0;
	
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = 0;
	    out[15] = 1;
	
	    return out;
	};
	
	/**
	 * Generates a frustum matrix with the given bounds
	 *
	 * @param {mat4} out mat4 frustum matrix will be written into
	 * @param {Number} left Left bound of the frustum
	 * @param {Number} right Right bound of the frustum
	 * @param {Number} bottom Bottom bound of the frustum
	 * @param {Number} top Top bound of the frustum
	 * @param {Number} near Near bound of the frustum
	 * @param {Number} far Far bound of the frustum
	 * @returns {mat4} out
	 */
	mat4.frustum = function (out, left, right, bottom, top, near, far) {
	    var rl = 1 / (right - left),
	        tb = 1 / (top - bottom),
	        nf = 1 / (near - far);
	    out[0] = (near * 2) * rl;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = (near * 2) * tb;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = (right + left) * rl;
	    out[9] = (top + bottom) * tb;
	    out[10] = (far + near) * nf;
	    out[11] = -1;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = (far * near * 2) * nf;
	    out[15] = 0;
	    return out;
	};
	
	/**
	 * Generates a perspective projection matrix with the given bounds
	 *
	 * @param {mat4} out mat4 frustum matrix will be written into
	 * @param {number} fovy Vertical field of view in radians
	 * @param {number} aspect Aspect ratio. typically viewport width/height
	 * @param {number} near Near bound of the frustum
	 * @param {number} far Far bound of the frustum
	 * @returns {mat4} out
	 */
	mat4.perspective = function (out, fovy, aspect, near, far) {
	    var f = 1.0 / Math.tan(fovy / 2),
	        nf = 1 / (near - far);
	    out[0] = f / aspect;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = f;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = (far + near) * nf;
	    out[11] = -1;
	    out[12] = 0;
	    out[13] = 0;
	    out[14] = (2 * far * near) * nf;
	    out[15] = 0;
	    return out;
	};
	
	/**
	 * Generates a perspective projection matrix with the given field of view.
	 * This is primarily useful for generating projection matrices to be used
	 * with the still experiemental WebVR API.
	 *
	 * @param {mat4} out mat4 frustum matrix will be written into
	 * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees
	 * @param {number} near Near bound of the frustum
	 * @param {number} far Far bound of the frustum
	 * @returns {mat4} out
	 */
	mat4.perspectiveFromFieldOfView = function (out, fov, near, far) {
	    var upTan = Math.tan(fov.upDegrees * Math.PI/180.0),
	        downTan = Math.tan(fov.downDegrees * Math.PI/180.0),
	        leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0),
	        rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0),
	        xScale = 2.0 / (leftTan + rightTan),
	        yScale = 2.0 / (upTan + downTan);
	
	    out[0] = xScale;
	    out[1] = 0.0;
	    out[2] = 0.0;
	    out[3] = 0.0;
	    out[4] = 0.0;
	    out[5] = yScale;
	    out[6] = 0.0;
	    out[7] = 0.0;
	    out[8] = -((leftTan - rightTan) * xScale * 0.5);
	    out[9] = ((upTan - downTan) * yScale * 0.5);
	    out[10] = far / (near - far);
	    out[11] = -1.0;
	    out[12] = 0.0;
	    out[13] = 0.0;
	    out[14] = (far * near) / (near - far);
	    out[15] = 0.0;
	    return out;
	}
	
	/**
	 * Generates a orthogonal projection matrix with the given bounds
	 *
	 * @param {mat4} out mat4 frustum matrix will be written into
	 * @param {number} left Left bound of the frustum
	 * @param {number} right Right bound of the frustum
	 * @param {number} bottom Bottom bound of the frustum
	 * @param {number} top Top bound of the frustum
	 * @param {number} near Near bound of the frustum
	 * @param {number} far Far bound of the frustum
	 * @returns {mat4} out
	 */
	mat4.ortho = function (out, left, right, bottom, top, near, far) {
	    var lr = 1 / (left - right),
	        bt = 1 / (bottom - top),
	        nf = 1 / (near - far);
	    out[0] = -2 * lr;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    out[4] = 0;
	    out[5] = -2 * bt;
	    out[6] = 0;
	    out[7] = 0;
	    out[8] = 0;
	    out[9] = 0;
	    out[10] = 2 * nf;
	    out[11] = 0;
	    out[12] = (left + right) * lr;
	    out[13] = (top + bottom) * bt;
	    out[14] = (far + near) * nf;
	    out[15] = 1;
	    return out;
	};
	
	/**
	 * Generates a look-at matrix with the given eye position, focal point, and up axis
	 *
	 * @param {mat4} out mat4 frustum matrix will be written into
	 * @param {vec3} eye Position of the viewer
	 * @param {vec3} center Point the viewer is looking at
	 * @param {vec3} up vec3 pointing up
	 * @returns {mat4} out
	 */
	mat4.lookAt = function (out, eye, center, up) {
	    var x0, x1, x2, y0, y1, y2, z0, z1, z2, len,
	        eyex = eye[0],
	        eyey = eye[1],
	        eyez = eye[2],
	        upx = up[0],
	        upy = up[1],
	        upz = up[2],
	        centerx = center[0],
	        centery = center[1],
	        centerz = center[2];
	
	    if (Math.abs(eyex - centerx) < glMatrix.EPSILON &&
	        Math.abs(eyey - centery) < glMatrix.EPSILON &&
	        Math.abs(eyez - centerz) < glMatrix.EPSILON) {
	        return mat4.identity(out);
	    }
	
	    z0 = eyex - centerx;
	    z1 = eyey - centery;
	    z2 = eyez - centerz;
	
	    len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);
	    z0 *= len;
	    z1 *= len;
	    z2 *= len;
	
	    x0 = upy * z2 - upz * z1;
	    x1 = upz * z0 - upx * z2;
	    x2 = upx * z1 - upy * z0;
	    len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);
	    if (!len) {
	        x0 = 0;
	        x1 = 0;
	        x2 = 0;
	    } else {
	        len = 1 / len;
	        x0 *= len;
	        x1 *= len;
	        x2 *= len;
	    }
	
	    y0 = z1 * x2 - z2 * x1;
	    y1 = z2 * x0 - z0 * x2;
	    y2 = z0 * x1 - z1 * x0;
	
	    len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);
	    if (!len) {
	        y0 = 0;
	        y1 = 0;
	        y2 = 0;
	    } else {
	        len = 1 / len;
	        y0 *= len;
	        y1 *= len;
	        y2 *= len;
	    }
	
	    out[0] = x0;
	    out[1] = y0;
	    out[2] = z0;
	    out[3] = 0;
	    out[4] = x1;
	    out[5] = y1;
	    out[6] = z1;
	    out[7] = 0;
	    out[8] = x2;
	    out[9] = y2;
	    out[10] = z2;
	    out[11] = 0;
	    out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);
	    out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);
	    out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);
	    out[15] = 1;
	
	    return out;
	};
	
	/**
	 * Returns a string representation of a mat4
	 *
	 * @param {mat4} a matrix to represent as a string
	 * @returns {String} string representation of the matrix
	 */
	mat4.str = function (a) {
	    return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +
	                    a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +
	                    a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +
	                    a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';
	};
	
	/**
	 * Returns Frobenius norm of a mat4
	 *
	 * @param {mat4} a the matrix to calculate Frobenius norm of
	 * @returns {Number} Frobenius norm
	 */
	mat4.frob = function (a) {
	    return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))
	};
	
	/**
	 * Adds two mat4's
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the first operand
	 * @param {mat4} b the second operand
	 * @returns {mat4} out
	 */
	mat4.add = function(out, a, b) {
	    out[0] = a[0] + b[0];
	    out[1] = a[1] + b[1];
	    out[2] = a[2] + b[2];
	    out[3] = a[3] + b[3];
	    out[4] = a[4] + b[4];
	    out[5] = a[5] + b[5];
	    out[6] = a[6] + b[6];
	    out[7] = a[7] + b[7];
	    out[8] = a[8] + b[8];
	    out[9] = a[9] + b[9];
	    out[10] = a[10] + b[10];
	    out[11] = a[11] + b[11];
	    out[12] = a[12] + b[12];
	    out[13] = a[13] + b[13];
	    out[14] = a[14] + b[14];
	    out[15] = a[15] + b[15];
	    return out;
	};
	
	/**
	 * Subtracts matrix b from matrix a
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the first operand
	 * @param {mat4} b the second operand
	 * @returns {mat4} out
	 */
	mat4.subtract = function(out, a, b) {
	    out[0] = a[0] - b[0];
	    out[1] = a[1] - b[1];
	    out[2] = a[2] - b[2];
	    out[3] = a[3] - b[3];
	    out[4] = a[4] - b[4];
	    out[5] = a[5] - b[5];
	    out[6] = a[6] - b[6];
	    out[7] = a[7] - b[7];
	    out[8] = a[8] - b[8];
	    out[9] = a[9] - b[9];
	    out[10] = a[10] - b[10];
	    out[11] = a[11] - b[11];
	    out[12] = a[12] - b[12];
	    out[13] = a[13] - b[13];
	    out[14] = a[14] - b[14];
	    out[15] = a[15] - b[15];
	    return out;
	};
	
	/**
	 * Alias for {@link mat4.subtract}
	 * @function
	 */
	mat4.sub = mat4.subtract;
	
	/**
	 * Multiply each element of the matrix by a scalar.
	 *
	 * @param {mat4} out the receiving matrix
	 * @param {mat4} a the matrix to scale
	 * @param {Number} b amount to scale the matrix's elements by
	 * @returns {mat4} out
	 */
	mat4.multiplyScalar = function(out, a, b) {
	    out[0] = a[0] * b;
	    out[1] = a[1] * b;
	    out[2] = a[2] * b;
	    out[3] = a[3] * b;
	    out[4] = a[4] * b;
	    out[5] = a[5] * b;
	    out[6] = a[6] * b;
	    out[7] = a[7] * b;
	    out[8] = a[8] * b;
	    out[9] = a[9] * b;
	    out[10] = a[10] * b;
	    out[11] = a[11] * b;
	    out[12] = a[12] * b;
	    out[13] = a[13] * b;
	    out[14] = a[14] * b;
	    out[15] = a[15] * b;
	    return out;
	};
	
	/**
	 * Adds two mat4's after multiplying each element of the second operand by a scalar value.
	 *
	 * @param {mat4} out the receiving vector
	 * @param {mat4} a the first operand
	 * @param {mat4} b the second operand
	 * @param {Number} scale the amount to scale b's elements by before adding
	 * @returns {mat4} out
	 */
	mat4.multiplyScalarAndAdd = function(out, a, b, scale) {
	    out[0] = a[0] + (b[0] * scale);
	    out[1] = a[1] + (b[1] * scale);
	    out[2] = a[2] + (b[2] * scale);
	    out[3] = a[3] + (b[3] * scale);
	    out[4] = a[4] + (b[4] * scale);
	    out[5] = a[5] + (b[5] * scale);
	    out[6] = a[6] + (b[6] * scale);
	    out[7] = a[7] + (b[7] * scale);
	    out[8] = a[8] + (b[8] * scale);
	    out[9] = a[9] + (b[9] * scale);
	    out[10] = a[10] + (b[10] * scale);
	    out[11] = a[11] + (b[11] * scale);
	    out[12] = a[12] + (b[12] * scale);
	    out[13] = a[13] + (b[13] * scale);
	    out[14] = a[14] + (b[14] * scale);
	    out[15] = a[15] + (b[15] * scale);
	    return out;
	};
	
	/**
	 * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)
	 *
	 * @param {mat4} a The first matrix.
	 * @param {mat4} b The second matrix.
	 * @returns {Boolean} True if the matrices are equal, false otherwise.
	 */
	mat4.exactEquals = function (a, b) {
	    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && 
	           a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] && 
	           a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&
	           a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];
	};
	
	/**
	 * Returns whether or not the matrices have approximately the same elements in the same position.
	 *
	 * @param {mat4} a The first matrix.
	 * @param {mat4} b The second matrix.
	 * @returns {Boolean} True if the matrices are equal, false otherwise.
	 */
	mat4.equals = function (a, b) {
	    var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3],
	        a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7], 
	        a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11], 
	        a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];
	
	    var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3],
	        b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7], 
	        b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11], 
	        b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];
	
	    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
	            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
	            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
	            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&
	            Math.abs(a4 - b4) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&
	            Math.abs(a5 - b5) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&
	            Math.abs(a6 - b6) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&
	            Math.abs(a7 - b7) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&
	            Math.abs(a8 - b8) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&
	            Math.abs(a9 - b9) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&
	            Math.abs(a10 - b10) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&
	            Math.abs(a11 - b11) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&
	            Math.abs(a12 - b12) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&
	            Math.abs(a13 - b13) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&
	            Math.abs(a14 - b14) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&
	            Math.abs(a15 - b15) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a15), Math.abs(b15)));
	};
	
	
	
	module.exports = mat4;


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	var glMatrix = __webpack_require__(5);
	var mat3 = __webpack_require__(8);
	var vec3 = __webpack_require__(11);
	var vec4 = __webpack_require__(12);
	
	/**
	 * @class Quaternion
	 * @name quat
	 */
	var quat = {};
	
	/**
	 * Creates a new identity quat
	 *
	 * @returns {quat} a new quaternion
	 */
	quat.create = function() {
	    var out = new glMatrix.ARRAY_TYPE(4);
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    return out;
	};
	
	/**
	 * Sets a quaternion to represent the shortest rotation from one
	 * vector to another.
	 *
	 * Both vectors are assumed to be unit length.
	 *
	 * @param {quat} out the receiving quaternion.
	 * @param {vec3} a the initial vector
	 * @param {vec3} b the destination vector
	 * @returns {quat} out
	 */
	quat.rotationTo = (function() {
	    var tmpvec3 = vec3.create();
	    var xUnitVec3 = vec3.fromValues(1,0,0);
	    var yUnitVec3 = vec3.fromValues(0,1,0);
	
	    return function(out, a, b) {
	        var dot = vec3.dot(a, b);
	        if (dot < -0.999999) {
	            vec3.cross(tmpvec3, xUnitVec3, a);
	            if (vec3.length(tmpvec3) < 0.000001)
	                vec3.cross(tmpvec3, yUnitVec3, a);
	            vec3.normalize(tmpvec3, tmpvec3);
	            quat.setAxisAngle(out, tmpvec3, Math.PI);
	            return out;
	        } else if (dot > 0.999999) {
	            out[0] = 0;
	            out[1] = 0;
	            out[2] = 0;
	            out[3] = 1;
	            return out;
	        } else {
	            vec3.cross(tmpvec3, a, b);
	            out[0] = tmpvec3[0];
	            out[1] = tmpvec3[1];
	            out[2] = tmpvec3[2];
	            out[3] = 1 + dot;
	            return quat.normalize(out, out);
	        }
	    };
	})();
	
	/**
	 * Sets the specified quaternion with values corresponding to the given
	 * axes. Each axis is a vec3 and is expected to be unit length and
	 * perpendicular to all other specified axes.
	 *
	 * @param {vec3} view  the vector representing the viewing direction
	 * @param {vec3} right the vector representing the local "right" direction
	 * @param {vec3} up    the vector representing the local "up" direction
	 * @returns {quat} out
	 */
	quat.setAxes = (function() {
	    var matr = mat3.create();
	
	    return function(out, view, right, up) {
	        matr[0] = right[0];
	        matr[3] = right[1];
	        matr[6] = right[2];
	
	        matr[1] = up[0];
	        matr[4] = up[1];
	        matr[7] = up[2];
	
	        matr[2] = -view[0];
	        matr[5] = -view[1];
	        matr[8] = -view[2];
	
	        return quat.normalize(out, quat.fromMat3(out, matr));
	    };
	})();
	
	/**
	 * Creates a new quat initialized with values from an existing quaternion
	 *
	 * @param {quat} a quaternion to clone
	 * @returns {quat} a new quaternion
	 * @function
	 */
	quat.clone = vec4.clone;
	
	/**
	 * Creates a new quat initialized with the given values
	 *
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @param {Number} w W component
	 * @returns {quat} a new quaternion
	 * @function
	 */
	quat.fromValues = vec4.fromValues;
	
	/**
	 * Copy the values from one quat to another
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the source quaternion
	 * @returns {quat} out
	 * @function
	 */
	quat.copy = vec4.copy;
	
	/**
	 * Set the components of a quat to the given values
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @param {Number} w W component
	 * @returns {quat} out
	 * @function
	 */
	quat.set = vec4.set;
	
	/**
	 * Set a quat to the identity quaternion
	 *
	 * @param {quat} out the receiving quaternion
	 * @returns {quat} out
	 */
	quat.identity = function(out) {
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 1;
	    return out;
	};
	
	/**
	 * Sets a quat from the given angle and rotation axis,
	 * then returns it.
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {vec3} axis the axis around which to rotate
	 * @param {Number} rad the angle in radians
	 * @returns {quat} out
	 **/
	quat.setAxisAngle = function(out, axis, rad) {
	    rad = rad * 0.5;
	    var s = Math.sin(rad);
	    out[0] = s * axis[0];
	    out[1] = s * axis[1];
	    out[2] = s * axis[2];
	    out[3] = Math.cos(rad);
	    return out;
	};
	
	/**
	 * Gets the rotation axis and angle for a given
	 *  quaternion. If a quaternion is created with
	 *  setAxisAngle, this method will return the same
	 *  values as providied in the original parameter list
	 *  OR functionally equivalent values.
	 * Example: The quaternion formed by axis [0, 0, 1] and
	 *  angle -90 is the same as the quaternion formed by
	 *  [0, 0, 1] and 270. This method favors the latter.
	 * @param  {vec3} out_axis  Vector receiving the axis of rotation
	 * @param  {quat} q     Quaternion to be decomposed
	 * @return {Number}     Angle, in radians, of the rotation
	 */
	quat.getAxisAngle = function(out_axis, q) {
	    var rad = Math.acos(q[3]) * 2.0;
	    var s = Math.sin(rad / 2.0);
	    if (s != 0.0) {
	        out_axis[0] = q[0] / s;
	        out_axis[1] = q[1] / s;
	        out_axis[2] = q[2] / s;
	    } else {
	        // If s is zero, return any axis (no rotation - axis does not matter)
	        out_axis[0] = 1;
	        out_axis[1] = 0;
	        out_axis[2] = 0;
	    }
	    return rad;
	};
	
	/**
	 * Adds two quat's
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @returns {quat} out
	 * @function
	 */
	quat.add = vec4.add;
	
	/**
	 * Multiplies two quat's
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @returns {quat} out
	 */
	quat.multiply = function(out, a, b) {
	    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        bx = b[0], by = b[1], bz = b[2], bw = b[3];
	
	    out[0] = ax * bw + aw * bx + ay * bz - az * by;
	    out[1] = ay * bw + aw * by + az * bx - ax * bz;
	    out[2] = az * bw + aw * bz + ax * by - ay * bx;
	    out[3] = aw * bw - ax * bx - ay * by - az * bz;
	    return out;
	};
	
	/**
	 * Alias for {@link quat.multiply}
	 * @function
	 */
	quat.mul = quat.multiply;
	
	/**
	 * Scales a quat by a scalar number
	 *
	 * @param {quat} out the receiving vector
	 * @param {quat} a the vector to scale
	 * @param {Number} b amount to scale the vector by
	 * @returns {quat} out
	 * @function
	 */
	quat.scale = vec4.scale;
	
	/**
	 * Rotates a quaternion by the given angle about the X axis
	 *
	 * @param {quat} out quat receiving operation result
	 * @param {quat} a quat to rotate
	 * @param {number} rad angle (in radians) to rotate
	 * @returns {quat} out
	 */
	quat.rotateX = function (out, a, rad) {
	    rad *= 0.5; 
	
	    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        bx = Math.sin(rad), bw = Math.cos(rad);
	
	    out[0] = ax * bw + aw * bx;
	    out[1] = ay * bw + az * bx;
	    out[2] = az * bw - ay * bx;
	    out[3] = aw * bw - ax * bx;
	    return out;
	};
	
	/**
	 * Rotates a quaternion by the given angle about the Y axis
	 *
	 * @param {quat} out quat receiving operation result
	 * @param {quat} a quat to rotate
	 * @param {number} rad angle (in radians) to rotate
	 * @returns {quat} out
	 */
	quat.rotateY = function (out, a, rad) {
	    rad *= 0.5; 
	
	    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        by = Math.sin(rad), bw = Math.cos(rad);
	
	    out[0] = ax * bw - az * by;
	    out[1] = ay * bw + aw * by;
	    out[2] = az * bw + ax * by;
	    out[3] = aw * bw - ay * by;
	    return out;
	};
	
	/**
	 * Rotates a quaternion by the given angle about the Z axis
	 *
	 * @param {quat} out quat receiving operation result
	 * @param {quat} a quat to rotate
	 * @param {number} rad angle (in radians) to rotate
	 * @returns {quat} out
	 */
	quat.rotateZ = function (out, a, rad) {
	    rad *= 0.5; 
	
	    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        bz = Math.sin(rad), bw = Math.cos(rad);
	
	    out[0] = ax * bw + ay * bz;
	    out[1] = ay * bw - ax * bz;
	    out[2] = az * bw + aw * bz;
	    out[3] = aw * bw - az * bz;
	    return out;
	};
	
	/**
	 * Calculates the W component of a quat from the X, Y, and Z components.
	 * Assumes that quaternion is 1 unit in length.
	 * Any existing W component will be ignored.
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a quat to calculate W component of
	 * @returns {quat} out
	 */
	quat.calculateW = function (out, a) {
	    var x = a[0], y = a[1], z = a[2];
	
	    out[0] = x;
	    out[1] = y;
	    out[2] = z;
	    out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));
	    return out;
	};
	
	/**
	 * Calculates the dot product of two quat's
	 *
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @returns {Number} dot product of a and b
	 * @function
	 */
	quat.dot = vec4.dot;
	
	/**
	 * Performs a linear interpolation between two quat's
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {quat} out
	 * @function
	 */
	quat.lerp = vec4.lerp;
	
	/**
	 * Performs a spherical linear interpolation between two quat
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {quat} out
	 */
	quat.slerp = function (out, a, b, t) {
	    // benchmarks:
	    //    http://jsperf.com/quaternion-slerp-implementations
	
	    var ax = a[0], ay = a[1], az = a[2], aw = a[3],
	        bx = b[0], by = b[1], bz = b[2], bw = b[3];
	
	    var        omega, cosom, sinom, scale0, scale1;
	
	    // calc cosine
	    cosom = ax * bx + ay * by + az * bz + aw * bw;
	    // adjust signs (if necessary)
	    if ( cosom < 0.0 ) {
	        cosom = -cosom;
	        bx = - bx;
	        by = - by;
	        bz = - bz;
	        bw = - bw;
	    }
	    // calculate coefficients
	    if ( (1.0 - cosom) > 0.000001 ) {
	        // standard case (slerp)
	        omega  = Math.acos(cosom);
	        sinom  = Math.sin(omega);
	        scale0 = Math.sin((1.0 - t) * omega) / sinom;
	        scale1 = Math.sin(t * omega) / sinom;
	    } else {        
	        // "from" and "to" quaternions are very close 
	        //  ... so we can do a linear interpolation
	        scale0 = 1.0 - t;
	        scale1 = t;
	    }
	    // calculate final values
	    out[0] = scale0 * ax + scale1 * bx;
	    out[1] = scale0 * ay + scale1 * by;
	    out[2] = scale0 * az + scale1 * bz;
	    out[3] = scale0 * aw + scale1 * bw;
	    
	    return out;
	};
	
	/**
	 * Performs a spherical linear interpolation with two control points
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a the first operand
	 * @param {quat} b the second operand
	 * @param {quat} c the third operand
	 * @param {quat} d the fourth operand
	 * @param {Number} t interpolation amount
	 * @returns {quat} out
	 */
	quat.sqlerp = (function () {
	  var temp1 = quat.create();
	  var temp2 = quat.create();
	  
	  return function (out, a, b, c, d, t) {
	    quat.slerp(temp1, a, d, t);
	    quat.slerp(temp2, b, c, t);
	    quat.slerp(out, temp1, temp2, 2 * t * (1 - t));
	    
	    return out;
	  };
	}());
	
	/**
	 * Calculates the inverse of a quat
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a quat to calculate inverse of
	 * @returns {quat} out
	 */
	quat.invert = function(out, a) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],
	        dot = a0*a0 + a1*a1 + a2*a2 + a3*a3,
	        invDot = dot ? 1.0/dot : 0;
	    
	    // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0
	
	    out[0] = -a0*invDot;
	    out[1] = -a1*invDot;
	    out[2] = -a2*invDot;
	    out[3] = a3*invDot;
	    return out;
	};
	
	/**
	 * Calculates the conjugate of a quat
	 * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a quat to calculate conjugate of
	 * @returns {quat} out
	 */
	quat.conjugate = function (out, a) {
	    out[0] = -a[0];
	    out[1] = -a[1];
	    out[2] = -a[2];
	    out[3] = a[3];
	    return out;
	};
	
	/**
	 * Calculates the length of a quat
	 *
	 * @param {quat} a vector to calculate length of
	 * @returns {Number} length of a
	 * @function
	 */
	quat.length = vec4.length;
	
	/**
	 * Alias for {@link quat.length}
	 * @function
	 */
	quat.len = quat.length;
	
	/**
	 * Calculates the squared length of a quat
	 *
	 * @param {quat} a vector to calculate squared length of
	 * @returns {Number} squared length of a
	 * @function
	 */
	quat.squaredLength = vec4.squaredLength;
	
	/**
	 * Alias for {@link quat.squaredLength}
	 * @function
	 */
	quat.sqrLen = quat.squaredLength;
	
	/**
	 * Normalize a quat
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {quat} a quaternion to normalize
	 * @returns {quat} out
	 * @function
	 */
	quat.normalize = vec4.normalize;
	
	/**
	 * Creates a quaternion from the given 3x3 rotation matrix.
	 *
	 * NOTE: The resultant quaternion is not normalized, so you should be sure
	 * to renormalize the quaternion yourself where necessary.
	 *
	 * @param {quat} out the receiving quaternion
	 * @param {mat3} m rotation matrix
	 * @returns {quat} out
	 * @function
	 */
	quat.fromMat3 = function(out, m) {
	    // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes
	    // article "Quaternion Calculus and Fast Animation".
	    var fTrace = m[0] + m[4] + m[8];
	    var fRoot;
	
	    if ( fTrace > 0.0 ) {
	        // |w| > 1/2, may as well choose w > 1/2
	        fRoot = Math.sqrt(fTrace + 1.0);  // 2w
	        out[3] = 0.5 * fRoot;
	        fRoot = 0.5/fRoot;  // 1/(4w)
	        out[0] = (m[5]-m[7])*fRoot;
	        out[1] = (m[6]-m[2])*fRoot;
	        out[2] = (m[1]-m[3])*fRoot;
	    } else {
	        // |w| <= 1/2
	        var i = 0;
	        if ( m[4] > m[0] )
	          i = 1;
	        if ( m[8] > m[i*3+i] )
	          i = 2;
	        var j = (i+1)%3;
	        var k = (i+2)%3;
	        
	        fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);
	        out[i] = 0.5 * fRoot;
	        fRoot = 0.5 / fRoot;
	        out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;
	        out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;
	        out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;
	    }
	    
	    return out;
	};
	
	/**
	 * Returns a string representation of a quatenion
	 *
	 * @param {quat} a vector to represent as a string
	 * @returns {String} string representation of the vector
	 */
	quat.str = function (a) {
	    return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
	};
	
	/**
	 * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)
	 *
	 * @param {quat} a The first quaternion.
	 * @param {quat} b The second quaternion.
	 * @returns {Boolean} True if the vectors are equal, false otherwise.
	 */
	quat.exactEquals = vec4.exactEquals;
	
	/**
	 * Returns whether or not the quaternions have approximately the same elements in the same position.
	 *
	 * @param {quat} a The first vector.
	 * @param {quat} b The second vector.
	 * @returns {Boolean} True if the vectors are equal, false otherwise.
	 */
	quat.equals = vec4.equals;
	
	module.exports = quat;


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	var glMatrix = __webpack_require__(5);
	
	/**
	 * @class 3 Dimensional Vector
	 * @name vec3
	 */
	var vec3 = {};
	
	/**
	 * Creates a new, empty vec3
	 *
	 * @returns {vec3} a new 3D vector
	 */
	vec3.create = function() {
	    var out = new glMatrix.ARRAY_TYPE(3);
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	    return out;
	};
	
	/**
	 * Creates a new vec3 initialized with values from an existing vector
	 *
	 * @param {vec3} a vector to clone
	 * @returns {vec3} a new 3D vector
	 */
	vec3.clone = function(a) {
	    var out = new glMatrix.ARRAY_TYPE(3);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    return out;
	};
	
	/**
	 * Creates a new vec3 initialized with the given values
	 *
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @returns {vec3} a new 3D vector
	 */
	vec3.fromValues = function(x, y, z) {
	    var out = new glMatrix.ARRAY_TYPE(3);
	    out[0] = x;
	    out[1] = y;
	    out[2] = z;
	    return out;
	};
	
	/**
	 * Copy the values from one vec3 to another
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the source vector
	 * @returns {vec3} out
	 */
	vec3.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    return out;
	};
	
	/**
	 * Set the components of a vec3 to the given values
	 *
	 * @param {vec3} out the receiving vector
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @returns {vec3} out
	 */
	vec3.set = function(out, x, y, z) {
	    out[0] = x;
	    out[1] = y;
	    out[2] = z;
	    return out;
	};
	
	/**
	 * Adds two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.add = function(out, a, b) {
	    out[0] = a[0] + b[0];
	    out[1] = a[1] + b[1];
	    out[2] = a[2] + b[2];
	    return out;
	};
	
	/**
	 * Subtracts vector b from vector a
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.subtract = function(out, a, b) {
	    out[0] = a[0] - b[0];
	    out[1] = a[1] - b[1];
	    out[2] = a[2] - b[2];
	    return out;
	};
	
	/**
	 * Alias for {@link vec3.subtract}
	 * @function
	 */
	vec3.sub = vec3.subtract;
	
	/**
	 * Multiplies two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.multiply = function(out, a, b) {
	    out[0] = a[0] * b[0];
	    out[1] = a[1] * b[1];
	    out[2] = a[2] * b[2];
	    return out;
	};
	
	/**
	 * Alias for {@link vec3.multiply}
	 * @function
	 */
	vec3.mul = vec3.multiply;
	
	/**
	 * Divides two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.divide = function(out, a, b) {
	    out[0] = a[0] / b[0];
	    out[1] = a[1] / b[1];
	    out[2] = a[2] / b[2];
	    return out;
	};
	
	/**
	 * Alias for {@link vec3.divide}
	 * @function
	 */
	vec3.div = vec3.divide;
	
	/**
	 * Math.ceil the components of a vec3
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a vector to ceil
	 * @returns {vec3} out
	 */
	vec3.ceil = function (out, a) {
	    out[0] = Math.ceil(a[0]);
	    out[1] = Math.ceil(a[1]);
	    out[2] = Math.ceil(a[2]);
	    return out;
	};
	
	/**
	 * Math.floor the components of a vec3
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a vector to floor
	 * @returns {vec3} out
	 */
	vec3.floor = function (out, a) {
	    out[0] = Math.floor(a[0]);
	    out[1] = Math.floor(a[1]);
	    out[2] = Math.floor(a[2]);
	    return out;
	};
	
	/**
	 * Returns the minimum of two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.min = function(out, a, b) {
	    out[0] = Math.min(a[0], b[0]);
	    out[1] = Math.min(a[1], b[1]);
	    out[2] = Math.min(a[2], b[2]);
	    return out;
	};
	
	/**
	 * Returns the maximum of two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.max = function(out, a, b) {
	    out[0] = Math.max(a[0], b[0]);
	    out[1] = Math.max(a[1], b[1]);
	    out[2] = Math.max(a[2], b[2]);
	    return out;
	};
	
	/**
	 * Math.round the components of a vec3
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a vector to round
	 * @returns {vec3} out
	 */
	vec3.round = function (out, a) {
	    out[0] = Math.round(a[0]);
	    out[1] = Math.round(a[1]);
	    out[2] = Math.round(a[2]);
	    return out;
	};
	
	/**
	 * Scales a vec3 by a scalar number
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the vector to scale
	 * @param {Number} b amount to scale the vector by
	 * @returns {vec3} out
	 */
	vec3.scale = function(out, a, b) {
	    out[0] = a[0] * b;
	    out[1] = a[1] * b;
	    out[2] = a[2] * b;
	    return out;
	};
	
	/**
	 * Adds two vec3's after scaling the second operand by a scalar value
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @param {Number} scale the amount to scale b by before adding
	 * @returns {vec3} out
	 */
	vec3.scaleAndAdd = function(out, a, b, scale) {
	    out[0] = a[0] + (b[0] * scale);
	    out[1] = a[1] + (b[1] * scale);
	    out[2] = a[2] + (b[2] * scale);
	    return out;
	};
	
	/**
	 * Calculates the euclidian distance between two vec3's
	 *
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {Number} distance between a and b
	 */
	vec3.distance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1],
	        z = b[2] - a[2];
	    return Math.sqrt(x*x + y*y + z*z);
	};
	
	/**
	 * Alias for {@link vec3.distance}
	 * @function
	 */
	vec3.dist = vec3.distance;
	
	/**
	 * Calculates the squared euclidian distance between two vec3's
	 *
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {Number} squared distance between a and b
	 */
	vec3.squaredDistance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1],
	        z = b[2] - a[2];
	    return x*x + y*y + z*z;
	};
	
	/**
	 * Alias for {@link vec3.squaredDistance}
	 * @function
	 */
	vec3.sqrDist = vec3.squaredDistance;
	
	/**
	 * Calculates the length of a vec3
	 *
	 * @param {vec3} a vector to calculate length of
	 * @returns {Number} length of a
	 */
	vec3.length = function (a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2];
	    return Math.sqrt(x*x + y*y + z*z);
	};
	
	/**
	 * Alias for {@link vec3.length}
	 * @function
	 */
	vec3.len = vec3.length;
	
	/**
	 * Calculates the squared length of a vec3
	 *
	 * @param {vec3} a vector to calculate squared length of
	 * @returns {Number} squared length of a
	 */
	vec3.squaredLength = function (a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2];
	    return x*x + y*y + z*z;
	};
	
	/**
	 * Alias for {@link vec3.squaredLength}
	 * @function
	 */
	vec3.sqrLen = vec3.squaredLength;
	
	/**
	 * Negates the components of a vec3
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a vector to negate
	 * @returns {vec3} out
	 */
	vec3.negate = function(out, a) {
	    out[0] = -a[0];
	    out[1] = -a[1];
	    out[2] = -a[2];
	    return out;
	};
	
	/**
	 * Returns the inverse of the components of a vec3
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a vector to invert
	 * @returns {vec3} out
	 */
	vec3.inverse = function(out, a) {
	  out[0] = 1.0 / a[0];
	  out[1] = 1.0 / a[1];
	  out[2] = 1.0 / a[2];
	  return out;
	};
	
	/**
	 * Normalize a vec3
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a vector to normalize
	 * @returns {vec3} out
	 */
	vec3.normalize = function(out, a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2];
	    var len = x*x + y*y + z*z;
	    if (len > 0) {
	        //TODO: evaluate use of glm_invsqrt here?
	        len = 1 / Math.sqrt(len);
	        out[0] = a[0] * len;
	        out[1] = a[1] * len;
	        out[2] = a[2] * len;
	    }
	    return out;
	};
	
	/**
	 * Calculates the dot product of two vec3's
	 *
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {Number} dot product of a and b
	 */
	vec3.dot = function (a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];
	};
	
	/**
	 * Computes the cross product of two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @returns {vec3} out
	 */
	vec3.cross = function(out, a, b) {
	    var ax = a[0], ay = a[1], az = a[2],
	        bx = b[0], by = b[1], bz = b[2];
	
	    out[0] = ay * bz - az * by;
	    out[1] = az * bx - ax * bz;
	    out[2] = ax * by - ay * bx;
	    return out;
	};
	
	/**
	 * Performs a linear interpolation between two vec3's
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {vec3} out
	 */
	vec3.lerp = function (out, a, b, t) {
	    var ax = a[0],
	        ay = a[1],
	        az = a[2];
	    out[0] = ax + t * (b[0] - ax);
	    out[1] = ay + t * (b[1] - ay);
	    out[2] = az + t * (b[2] - az);
	    return out;
	};
	
	/**
	 * Performs a hermite interpolation with two control points
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @param {vec3} c the third operand
	 * @param {vec3} d the fourth operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {vec3} out
	 */
	vec3.hermite = function (out, a, b, c, d, t) {
	  var factorTimes2 = t * t,
	      factor1 = factorTimes2 * (2 * t - 3) + 1,
	      factor2 = factorTimes2 * (t - 2) + t,
	      factor3 = factorTimes2 * (t - 1),
	      factor4 = factorTimes2 * (3 - 2 * t);
	  
	  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
	  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
	  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
	  
	  return out;
	};
	
	/**
	 * Performs a bezier interpolation with two control points
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the first operand
	 * @param {vec3} b the second operand
	 * @param {vec3} c the third operand
	 * @param {vec3} d the fourth operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {vec3} out
	 */
	vec3.bezier = function (out, a, b, c, d, t) {
	  var inverseFactor = 1 - t,
	      inverseFactorTimesTwo = inverseFactor * inverseFactor,
	      factorTimes2 = t * t,
	      factor1 = inverseFactorTimesTwo * inverseFactor,
	      factor2 = 3 * t * inverseFactorTimesTwo,
	      factor3 = 3 * factorTimes2 * inverseFactor,
	      factor4 = factorTimes2 * t;
	  
	  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;
	  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;
	  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;
	  
	  return out;
	};
	
	/**
	 * Generates a random vector with the given scale
	 *
	 * @param {vec3} out the receiving vector
	 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
	 * @returns {vec3} out
	 */
	vec3.random = function (out, scale) {
	    scale = scale || 1.0;
	
	    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
	    var z = (glMatrix.RANDOM() * 2.0) - 1.0;
	    var zScale = Math.sqrt(1.0-z*z) * scale;
	
	    out[0] = Math.cos(r) * zScale;
	    out[1] = Math.sin(r) * zScale;
	    out[2] = z * scale;
	    return out;
	};
	
	/**
	 * Transforms the vec3 with a mat4.
	 * 4th vector component is implicitly '1'
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the vector to transform
	 * @param {mat4} m matrix to transform with
	 * @returns {vec3} out
	 */
	vec3.transformMat4 = function(out, a, m) {
	    var x = a[0], y = a[1], z = a[2],
	        w = m[3] * x + m[7] * y + m[11] * z + m[15];
	    w = w || 1.0;
	    out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;
	    out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;
	    out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;
	    return out;
	};
	
	/**
	 * Transforms the vec3 with a mat3.
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the vector to transform
	 * @param {mat4} m the 3x3 matrix to transform with
	 * @returns {vec3} out
	 */
	vec3.transformMat3 = function(out, a, m) {
	    var x = a[0], y = a[1], z = a[2];
	    out[0] = x * m[0] + y * m[3] + z * m[6];
	    out[1] = x * m[1] + y * m[4] + z * m[7];
	    out[2] = x * m[2] + y * m[5] + z * m[8];
	    return out;
	};
	
	/**
	 * Transforms the vec3 with a quat
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec3} a the vector to transform
	 * @param {quat} q quaternion to transform with
	 * @returns {vec3} out
	 */
	vec3.transformQuat = function(out, a, q) {
	    // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations
	
	    var x = a[0], y = a[1], z = a[2],
	        qx = q[0], qy = q[1], qz = q[2], qw = q[3],
	
	        // calculate quat * vec
	        ix = qw * x + qy * z - qz * y,
	        iy = qw * y + qz * x - qx * z,
	        iz = qw * z + qx * y - qy * x,
	        iw = -qx * x - qy * y - qz * z;
	
	    // calculate result * inverse quat
	    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
	    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
	    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
	    return out;
	};
	
	/**
	 * Rotate a 3D vector around the x-axis
	 * @param {vec3} out The receiving vec3
	 * @param {vec3} a The vec3 point to rotate
	 * @param {vec3} b The origin of the rotation
	 * @param {Number} c The angle of rotation
	 * @returns {vec3} out
	 */
	vec3.rotateX = function(out, a, b, c){
	   var p = [], r=[];
		  //Translate point to the origin
		  p[0] = a[0] - b[0];
		  p[1] = a[1] - b[1];
	  	p[2] = a[2] - b[2];
	
		  //perform rotation
		  r[0] = p[0];
		  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);
		  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);
	
		  //translate to correct position
		  out[0] = r[0] + b[0];
		  out[1] = r[1] + b[1];
		  out[2] = r[2] + b[2];
	
	  	return out;
	};
	
	/**
	 * Rotate a 3D vector around the y-axis
	 * @param {vec3} out The receiving vec3
	 * @param {vec3} a The vec3 point to rotate
	 * @param {vec3} b The origin of the rotation
	 * @param {Number} c The angle of rotation
	 * @returns {vec3} out
	 */
	vec3.rotateY = function(out, a, b, c){
	  	var p = [], r=[];
	  	//Translate point to the origin
	  	p[0] = a[0] - b[0];
	  	p[1] = a[1] - b[1];
	  	p[2] = a[2] - b[2];
	  
	  	//perform rotation
	  	r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);
	  	r[1] = p[1];
	  	r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);
	  
	  	//translate to correct position
	  	out[0] = r[0] + b[0];
	  	out[1] = r[1] + b[1];
	  	out[2] = r[2] + b[2];
	  
	  	return out;
	};
	
	/**
	 * Rotate a 3D vector around the z-axis
	 * @param {vec3} out The receiving vec3
	 * @param {vec3} a The vec3 point to rotate
	 * @param {vec3} b The origin of the rotation
	 * @param {Number} c The angle of rotation
	 * @returns {vec3} out
	 */
	vec3.rotateZ = function(out, a, b, c){
	  	var p = [], r=[];
	  	//Translate point to the origin
	  	p[0] = a[0] - b[0];
	  	p[1] = a[1] - b[1];
	  	p[2] = a[2] - b[2];
	  
	  	//perform rotation
	  	r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);
	  	r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);
	  	r[2] = p[2];
	  
	  	//translate to correct position
	  	out[0] = r[0] + b[0];
	  	out[1] = r[1] + b[1];
	  	out[2] = r[2] + b[2];
	  
	  	return out;
	};
	
	/**
	 * Perform some operation over an array of vec3s.
	 *
	 * @param {Array} a the array of vectors to iterate over
	 * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed
	 * @param {Number} offset Number of elements to skip at the beginning of the array
	 * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array
	 * @param {Function} fn Function to call for each vector in the array
	 * @param {Object} [arg] additional argument to pass to fn
	 * @returns {Array} a
	 * @function
	 */
	vec3.forEach = (function() {
	    var vec = vec3.create();
	
	    return function(a, stride, offset, count, fn, arg) {
	        var i, l;
	        if(!stride) {
	            stride = 3;
	        }
	
	        if(!offset) {
	            offset = 0;
	        }
	        
	        if(count) {
	            l = Math.min((count * stride) + offset, a.length);
	        } else {
	            l = a.length;
	        }
	
	        for(i = offset; i < l; i += stride) {
	            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];
	            fn(vec, vec, arg);
	            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];
	        }
	        
	        return a;
	    };
	})();
	
	/**
	 * Get the angle between two 3D vectors
	 * @param {vec3} a The first operand
	 * @param {vec3} b The second operand
	 * @returns {Number} The angle in radians
	 */
	vec3.angle = function(a, b) {
	   
	    var tempA = vec3.fromValues(a[0], a[1], a[2]);
	    var tempB = vec3.fromValues(b[0], b[1], b[2]);
	 
	    vec3.normalize(tempA, tempA);
	    vec3.normalize(tempB, tempB);
	 
	    var cosine = vec3.dot(tempA, tempB);
	
	    if(cosine > 1.0) {
	        return 0;
	    }
	    else if(cosine < -1.0) {
	        return Math.PI;
	    } else {
	        return Math.acos(cosine);
	    }     
	};
	
	/**
	 * Returns a string representation of a vector
	 *
	 * @param {vec3} a vector to represent as a string
	 * @returns {String} string representation of the vector
	 */
	vec3.str = function (a) {
	    return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';
	};
	
	/**
	 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
	 *
	 * @param {vec3} a The first vector.
	 * @param {vec3} b The second vector.
	 * @returns {Boolean} True if the vectors are equal, false otherwise.
	 */
	vec3.exactEquals = function (a, b) {
	    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];
	};
	
	/**
	 * Returns whether or not the vectors have approximately the same elements in the same position.
	 *
	 * @param {vec3} a The first vector.
	 * @param {vec3} b The second vector.
	 * @returns {Boolean} True if the vectors are equal, false otherwise.
	 */
	vec3.equals = function (a, b) {
	    var a0 = a[0], a1 = a[1], a2 = a[2];
	    var b0 = b[0], b1 = b[1], b2 = b[2];
	    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
	            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
	            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)));
	};
	
	module.exports = vec3;


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	var glMatrix = __webpack_require__(5);
	
	/**
	 * @class 4 Dimensional Vector
	 * @name vec4
	 */
	var vec4 = {};
	
	/**
	 * Creates a new, empty vec4
	 *
	 * @returns {vec4} a new 4D vector
	 */
	vec4.create = function() {
	    var out = new glMatrix.ARRAY_TYPE(4);
	    out[0] = 0;
	    out[1] = 0;
	    out[2] = 0;
	    out[3] = 0;
	    return out;
	};
	
	/**
	 * Creates a new vec4 initialized with values from an existing vector
	 *
	 * @param {vec4} a vector to clone
	 * @returns {vec4} a new 4D vector
	 */
	vec4.clone = function(a) {
	    var out = new glMatrix.ARRAY_TYPE(4);
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    return out;
	};
	
	/**
	 * Creates a new vec4 initialized with the given values
	 *
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @param {Number} w W component
	 * @returns {vec4} a new 4D vector
	 */
	vec4.fromValues = function(x, y, z, w) {
	    var out = new glMatrix.ARRAY_TYPE(4);
	    out[0] = x;
	    out[1] = y;
	    out[2] = z;
	    out[3] = w;
	    return out;
	};
	
	/**
	 * Copy the values from one vec4 to another
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the source vector
	 * @returns {vec4} out
	 */
	vec4.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    out[2] = a[2];
	    out[3] = a[3];
	    return out;
	};
	
	/**
	 * Set the components of a vec4 to the given values
	 *
	 * @param {vec4} out the receiving vector
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @param {Number} z Z component
	 * @param {Number} w W component
	 * @returns {vec4} out
	 */
	vec4.set = function(out, x, y, z, w) {
	    out[0] = x;
	    out[1] = y;
	    out[2] = z;
	    out[3] = w;
	    return out;
	};
	
	/**
	 * Adds two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.add = function(out, a, b) {
	    out[0] = a[0] + b[0];
	    out[1] = a[1] + b[1];
	    out[2] = a[2] + b[2];
	    out[3] = a[3] + b[3];
	    return out;
	};
	
	/**
	 * Subtracts vector b from vector a
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.subtract = function(out, a, b) {
	    out[0] = a[0] - b[0];
	    out[1] = a[1] - b[1];
	    out[2] = a[2] - b[2];
	    out[3] = a[3] - b[3];
	    return out;
	};
	
	/**
	 * Alias for {@link vec4.subtract}
	 * @function
	 */
	vec4.sub = vec4.subtract;
	
	/**
	 * Multiplies two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.multiply = function(out, a, b) {
	    out[0] = a[0] * b[0];
	    out[1] = a[1] * b[1];
	    out[2] = a[2] * b[2];
	    out[3] = a[3] * b[3];
	    return out;
	};
	
	/**
	 * Alias for {@link vec4.multiply}
	 * @function
	 */
	vec4.mul = vec4.multiply;
	
	/**
	 * Divides two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.divide = function(out, a, b) {
	    out[0] = a[0] / b[0];
	    out[1] = a[1] / b[1];
	    out[2] = a[2] / b[2];
	    out[3] = a[3] / b[3];
	    return out;
	};
	
	/**
	 * Alias for {@link vec4.divide}
	 * @function
	 */
	vec4.div = vec4.divide;
	
	/**
	 * Math.ceil the components of a vec4
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a vector to ceil
	 * @returns {vec4} out
	 */
	vec4.ceil = function (out, a) {
	    out[0] = Math.ceil(a[0]);
	    out[1] = Math.ceil(a[1]);
	    out[2] = Math.ceil(a[2]);
	    out[3] = Math.ceil(a[3]);
	    return out;
	};
	
	/**
	 * Math.floor the components of a vec4
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a vector to floor
	 * @returns {vec4} out
	 */
	vec4.floor = function (out, a) {
	    out[0] = Math.floor(a[0]);
	    out[1] = Math.floor(a[1]);
	    out[2] = Math.floor(a[2]);
	    out[3] = Math.floor(a[3]);
	    return out;
	};
	
	/**
	 * Returns the minimum of two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.min = function(out, a, b) {
	    out[0] = Math.min(a[0], b[0]);
	    out[1] = Math.min(a[1], b[1]);
	    out[2] = Math.min(a[2], b[2]);
	    out[3] = Math.min(a[3], b[3]);
	    return out;
	};
	
	/**
	 * Returns the maximum of two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {vec4} out
	 */
	vec4.max = function(out, a, b) {
	    out[0] = Math.max(a[0], b[0]);
	    out[1] = Math.max(a[1], b[1]);
	    out[2] = Math.max(a[2], b[2]);
	    out[3] = Math.max(a[3], b[3]);
	    return out;
	};
	
	/**
	 * Math.round the components of a vec4
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a vector to round
	 * @returns {vec4} out
	 */
	vec4.round = function (out, a) {
	    out[0] = Math.round(a[0]);
	    out[1] = Math.round(a[1]);
	    out[2] = Math.round(a[2]);
	    out[3] = Math.round(a[3]);
	    return out;
	};
	
	/**
	 * Scales a vec4 by a scalar number
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the vector to scale
	 * @param {Number} b amount to scale the vector by
	 * @returns {vec4} out
	 */
	vec4.scale = function(out, a, b) {
	    out[0] = a[0] * b;
	    out[1] = a[1] * b;
	    out[2] = a[2] * b;
	    out[3] = a[3] * b;
	    return out;
	};
	
	/**
	 * Adds two vec4's after scaling the second operand by a scalar value
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @param {Number} scale the amount to scale b by before adding
	 * @returns {vec4} out
	 */
	vec4.scaleAndAdd = function(out, a, b, scale) {
	    out[0] = a[0] + (b[0] * scale);
	    out[1] = a[1] + (b[1] * scale);
	    out[2] = a[2] + (b[2] * scale);
	    out[3] = a[3] + (b[3] * scale);
	    return out;
	};
	
	/**
	 * Calculates the euclidian distance between two vec4's
	 *
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {Number} distance between a and b
	 */
	vec4.distance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1],
	        z = b[2] - a[2],
	        w = b[3] - a[3];
	    return Math.sqrt(x*x + y*y + z*z + w*w);
	};
	
	/**
	 * Alias for {@link vec4.distance}
	 * @function
	 */
	vec4.dist = vec4.distance;
	
	/**
	 * Calculates the squared euclidian distance between two vec4's
	 *
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {Number} squared distance between a and b
	 */
	vec4.squaredDistance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1],
	        z = b[2] - a[2],
	        w = b[3] - a[3];
	    return x*x + y*y + z*z + w*w;
	};
	
	/**
	 * Alias for {@link vec4.squaredDistance}
	 * @function
	 */
	vec4.sqrDist = vec4.squaredDistance;
	
	/**
	 * Calculates the length of a vec4
	 *
	 * @param {vec4} a vector to calculate length of
	 * @returns {Number} length of a
	 */
	vec4.length = function (a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2],
	        w = a[3];
	    return Math.sqrt(x*x + y*y + z*z + w*w);
	};
	
	/**
	 * Alias for {@link vec4.length}
	 * @function
	 */
	vec4.len = vec4.length;
	
	/**
	 * Calculates the squared length of a vec4
	 *
	 * @param {vec4} a vector to calculate squared length of
	 * @returns {Number} squared length of a
	 */
	vec4.squaredLength = function (a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2],
	        w = a[3];
	    return x*x + y*y + z*z + w*w;
	};
	
	/**
	 * Alias for {@link vec4.squaredLength}
	 * @function
	 */
	vec4.sqrLen = vec4.squaredLength;
	
	/**
	 * Negates the components of a vec4
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a vector to negate
	 * @returns {vec4} out
	 */
	vec4.negate = function(out, a) {
	    out[0] = -a[0];
	    out[1] = -a[1];
	    out[2] = -a[2];
	    out[3] = -a[3];
	    return out;
	};
	
	/**
	 * Returns the inverse of the components of a vec4
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a vector to invert
	 * @returns {vec4} out
	 */
	vec4.inverse = function(out, a) {
	  out[0] = 1.0 / a[0];
	  out[1] = 1.0 / a[1];
	  out[2] = 1.0 / a[2];
	  out[3] = 1.0 / a[3];
	  return out;
	};
	
	/**
	 * Normalize a vec4
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a vector to normalize
	 * @returns {vec4} out
	 */
	vec4.normalize = function(out, a) {
	    var x = a[0],
	        y = a[1],
	        z = a[2],
	        w = a[3];
	    var len = x*x + y*y + z*z + w*w;
	    if (len > 0) {
	        len = 1 / Math.sqrt(len);
	        out[0] = x * len;
	        out[1] = y * len;
	        out[2] = z * len;
	        out[3] = w * len;
	    }
	    return out;
	};
	
	/**
	 * Calculates the dot product of two vec4's
	 *
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @returns {Number} dot product of a and b
	 */
	vec4.dot = function (a, b) {
	    return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];
	};
	
	/**
	 * Performs a linear interpolation between two vec4's
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the first operand
	 * @param {vec4} b the second operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {vec4} out
	 */
	vec4.lerp = function (out, a, b, t) {
	    var ax = a[0],
	        ay = a[1],
	        az = a[2],
	        aw = a[3];
	    out[0] = ax + t * (b[0] - ax);
	    out[1] = ay + t * (b[1] - ay);
	    out[2] = az + t * (b[2] - az);
	    out[3] = aw + t * (b[3] - aw);
	    return out;
	};
	
	/**
	 * Generates a random vector with the given scale
	 *
	 * @param {vec4} out the receiving vector
	 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
	 * @returns {vec4} out
	 */
	vec4.random = function (out, scale) {
	    scale = scale || 1.0;
	
	    //TODO: This is a pretty awful way of doing this. Find something better.
	    out[0] = glMatrix.RANDOM();
	    out[1] = glMatrix.RANDOM();
	    out[2] = glMatrix.RANDOM();
	    out[3] = glMatrix.RANDOM();
	    vec4.normalize(out, out);
	    vec4.scale(out, out, scale);
	    return out;
	};
	
	/**
	 * Transforms the vec4 with a mat4.
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the vector to transform
	 * @param {mat4} m matrix to transform with
	 * @returns {vec4} out
	 */
	vec4.transformMat4 = function(out, a, m) {
	    var x = a[0], y = a[1], z = a[2], w = a[3];
	    out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
	    out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
	    out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
	    out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
	    return out;
	};
	
	/**
	 * Transforms the vec4 with a quat
	 *
	 * @param {vec4} out the receiving vector
	 * @param {vec4} a the vector to transform
	 * @param {quat} q quaternion to transform with
	 * @returns {vec4} out
	 */
	vec4.transformQuat = function(out, a, q) {
	    var x = a[0], y = a[1], z = a[2],
	        qx = q[0], qy = q[1], qz = q[2], qw = q[3],
	
	        // calculate quat * vec
	        ix = qw * x + qy * z - qz * y,
	        iy = qw * y + qz * x - qx * z,
	        iz = qw * z + qx * y - qy * x,
	        iw = -qx * x - qy * y - qz * z;
	
	    // calculate result * inverse quat
	    out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;
	    out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;
	    out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;
	    out[3] = a[3];
	    return out;
	};
	
	/**
	 * Perform some operation over an array of vec4s.
	 *
	 * @param {Array} a the array of vectors to iterate over
	 * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
	 * @param {Number} offset Number of elements to skip at the beginning of the array
	 * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
	 * @param {Function} fn Function to call for each vector in the array
	 * @param {Object} [arg] additional argument to pass to fn
	 * @returns {Array} a
	 * @function
	 */
	vec4.forEach = (function() {
	    var vec = vec4.create();
	
	    return function(a, stride, offset, count, fn, arg) {
	        var i, l;
	        if(!stride) {
	            stride = 4;
	        }
	
	        if(!offset) {
	            offset = 0;
	        }
	        
	        if(count) {
	            l = Math.min((count * stride) + offset, a.length);
	        } else {
	            l = a.length;
	        }
	
	        for(i = offset; i < l; i += stride) {
	            vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];
	            fn(vec, vec, arg);
	            a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];
	        }
	        
	        return a;
	    };
	})();
	
	/**
	 * Returns a string representation of a vector
	 *
	 * @param {vec4} a vector to represent as a string
	 * @returns {String} string representation of the vector
	 */
	vec4.str = function (a) {
	    return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';
	};
	
	/**
	 * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)
	 *
	 * @param {vec4} a The first vector.
	 * @param {vec4} b The second vector.
	 * @returns {Boolean} True if the vectors are equal, false otherwise.
	 */
	vec4.exactEquals = function (a, b) {
	    return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];
	};
	
	/**
	 * Returns whether or not the vectors have approximately the same elements in the same position.
	 *
	 * @param {vec4} a The first vector.
	 * @param {vec4} b The second vector.
	 * @returns {Boolean} True if the vectors are equal, false otherwise.
	 */
	vec4.equals = function (a, b) {
	    var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];
	    var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
	    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
	            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&
	            Math.abs(a2 - b2) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&
	            Math.abs(a3 - b3) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a3), Math.abs(b3)));
	};
	
	module.exports = vec4;


/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.
	
	Permission is hereby granted, free of charge, to any person obtaining a copy
	of this software and associated documentation files (the "Software"), to deal
	in the Software without restriction, including without limitation the rights
	to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
	copies of the Software, and to permit persons to whom the Software is
	furnished to do so, subject to the following conditions:
	
	The above copyright notice and this permission notice shall be included in
	all copies or substantial portions of the Software.
	
	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
	FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
	AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
	LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
	OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
	THE SOFTWARE. */
	
	var glMatrix = __webpack_require__(5);
	
	/**
	 * @class 2 Dimensional Vector
	 * @name vec2
	 */
	var vec2 = {};
	
	/**
	 * Creates a new, empty vec2
	 *
	 * @returns {vec2} a new 2D vector
	 */
	vec2.create = function() {
	    var out = new glMatrix.ARRAY_TYPE(2);
	    out[0] = 0;
	    out[1] = 0;
	    return out;
	};
	
	/**
	 * Creates a new vec2 initialized with values from an existing vector
	 *
	 * @param {vec2} a vector to clone
	 * @returns {vec2} a new 2D vector
	 */
	vec2.clone = function(a) {
	    var out = new glMatrix.ARRAY_TYPE(2);
	    out[0] = a[0];
	    out[1] = a[1];
	    return out;
	};
	
	/**
	 * Creates a new vec2 initialized with the given values
	 *
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @returns {vec2} a new 2D vector
	 */
	vec2.fromValues = function(x, y) {
	    var out = new glMatrix.ARRAY_TYPE(2);
	    out[0] = x;
	    out[1] = y;
	    return out;
	};
	
	/**
	 * Copy the values from one vec2 to another
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the source vector
	 * @returns {vec2} out
	 */
	vec2.copy = function(out, a) {
	    out[0] = a[0];
	    out[1] = a[1];
	    return out;
	};
	
	/**
	 * Set the components of a vec2 to the given values
	 *
	 * @param {vec2} out the receiving vector
	 * @param {Number} x X component
	 * @param {Number} y Y component
	 * @returns {vec2} out
	 */
	vec2.set = function(out, x, y) {
	    out[0] = x;
	    out[1] = y;
	    return out;
	};
	
	/**
	 * Adds two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.add = function(out, a, b) {
	    out[0] = a[0] + b[0];
	    out[1] = a[1] + b[1];
	    return out;
	};
	
	/**
	 * Subtracts vector b from vector a
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.subtract = function(out, a, b) {
	    out[0] = a[0] - b[0];
	    out[1] = a[1] - b[1];
	    return out;
	};
	
	/**
	 * Alias for {@link vec2.subtract}
	 * @function
	 */
	vec2.sub = vec2.subtract;
	
	/**
	 * Multiplies two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.multiply = function(out, a, b) {
	    out[0] = a[0] * b[0];
	    out[1] = a[1] * b[1];
	    return out;
	};
	
	/**
	 * Alias for {@link vec2.multiply}
	 * @function
	 */
	vec2.mul = vec2.multiply;
	
	/**
	 * Divides two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.divide = function(out, a, b) {
	    out[0] = a[0] / b[0];
	    out[1] = a[1] / b[1];
	    return out;
	};
	
	/**
	 * Alias for {@link vec2.divide}
	 * @function
	 */
	vec2.div = vec2.divide;
	
	/**
	 * Math.ceil the components of a vec2
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a vector to ceil
	 * @returns {vec2} out
	 */
	vec2.ceil = function (out, a) {
	    out[0] = Math.ceil(a[0]);
	    out[1] = Math.ceil(a[1]);
	    return out;
	};
	
	/**
	 * Math.floor the components of a vec2
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a vector to floor
	 * @returns {vec2} out
	 */
	vec2.floor = function (out, a) {
	    out[0] = Math.floor(a[0]);
	    out[1] = Math.floor(a[1]);
	    return out;
	};
	
	/**
	 * Returns the minimum of two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.min = function(out, a, b) {
	    out[0] = Math.min(a[0], b[0]);
	    out[1] = Math.min(a[1], b[1]);
	    return out;
	};
	
	/**
	 * Returns the maximum of two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec2} out
	 */
	vec2.max = function(out, a, b) {
	    out[0] = Math.max(a[0], b[0]);
	    out[1] = Math.max(a[1], b[1]);
	    return out;
	};
	
	/**
	 * Math.round the components of a vec2
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a vector to round
	 * @returns {vec2} out
	 */
	vec2.round = function (out, a) {
	    out[0] = Math.round(a[0]);
	    out[1] = Math.round(a[1]);
	    return out;
	};
	
	/**
	 * Scales a vec2 by a scalar number
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the vector to scale
	 * @param {Number} b amount to scale the vector by
	 * @returns {vec2} out
	 */
	vec2.scale = function(out, a, b) {
	    out[0] = a[0] * b;
	    out[1] = a[1] * b;
	    return out;
	};
	
	/**
	 * Adds two vec2's after scaling the second operand by a scalar value
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @param {Number} scale the amount to scale b by before adding
	 * @returns {vec2} out
	 */
	vec2.scaleAndAdd = function(out, a, b, scale) {
	    out[0] = a[0] + (b[0] * scale);
	    out[1] = a[1] + (b[1] * scale);
	    return out;
	};
	
	/**
	 * Calculates the euclidian distance between two vec2's
	 *
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {Number} distance between a and b
	 */
	vec2.distance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1];
	    return Math.sqrt(x*x + y*y);
	};
	
	/**
	 * Alias for {@link vec2.distance}
	 * @function
	 */
	vec2.dist = vec2.distance;
	
	/**
	 * Calculates the squared euclidian distance between two vec2's
	 *
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {Number} squared distance between a and b
	 */
	vec2.squaredDistance = function(a, b) {
	    var x = b[0] - a[0],
	        y = b[1] - a[1];
	    return x*x + y*y;
	};
	
	/**
	 * Alias for {@link vec2.squaredDistance}
	 * @function
	 */
	vec2.sqrDist = vec2.squaredDistance;
	
	/**
	 * Calculates the length of a vec2
	 *
	 * @param {vec2} a vector to calculate length of
	 * @returns {Number} length of a
	 */
	vec2.length = function (a) {
	    var x = a[0],
	        y = a[1];
	    return Math.sqrt(x*x + y*y);
	};
	
	/**
	 * Alias for {@link vec2.length}
	 * @function
	 */
	vec2.len = vec2.length;
	
	/**
	 * Calculates the squared length of a vec2
	 *
	 * @param {vec2} a vector to calculate squared length of
	 * @returns {Number} squared length of a
	 */
	vec2.squaredLength = function (a) {
	    var x = a[0],
	        y = a[1];
	    return x*x + y*y;
	};
	
	/**
	 * Alias for {@link vec2.squaredLength}
	 * @function
	 */
	vec2.sqrLen = vec2.squaredLength;
	
	/**
	 * Negates the components of a vec2
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a vector to negate
	 * @returns {vec2} out
	 */
	vec2.negate = function(out, a) {
	    out[0] = -a[0];
	    out[1] = -a[1];
	    return out;
	};
	
	/**
	 * Returns the inverse of the components of a vec2
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a vector to invert
	 * @returns {vec2} out
	 */
	vec2.inverse = function(out, a) {
	  out[0] = 1.0 / a[0];
	  out[1] = 1.0 / a[1];
	  return out;
	};
	
	/**
	 * Normalize a vec2
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a vector to normalize
	 * @returns {vec2} out
	 */
	vec2.normalize = function(out, a) {
	    var x = a[0],
	        y = a[1];
	    var len = x*x + y*y;
	    if (len > 0) {
	        //TODO: evaluate use of glm_invsqrt here?
	        len = 1 / Math.sqrt(len);
	        out[0] = a[0] * len;
	        out[1] = a[1] * len;
	    }
	    return out;
	};
	
	/**
	 * Calculates the dot product of two vec2's
	 *
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {Number} dot product of a and b
	 */
	vec2.dot = function (a, b) {
	    return a[0] * b[0] + a[1] * b[1];
	};
	
	/**
	 * Computes the cross product of two vec2's
	 * Note that the cross product must by definition produce a 3D vector
	 *
	 * @param {vec3} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @returns {vec3} out
	 */
	vec2.cross = function(out, a, b) {
	    var z = a[0] * b[1] - a[1] * b[0];
	    out[0] = out[1] = 0;
	    out[2] = z;
	    return out;
	};
	
	/**
	 * Performs a linear interpolation between two vec2's
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the first operand
	 * @param {vec2} b the second operand
	 * @param {Number} t interpolation amount between the two inputs
	 * @returns {vec2} out
	 */
	vec2.lerp = function (out, a, b, t) {
	    var ax = a[0],
	        ay = a[1];
	    out[0] = ax + t * (b[0] - ax);
	    out[1] = ay + t * (b[1] - ay);
	    return out;
	};
	
	/**
	 * Generates a random vector with the given scale
	 *
	 * @param {vec2} out the receiving vector
	 * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned
	 * @returns {vec2} out
	 */
	vec2.random = function (out, scale) {
	    scale = scale || 1.0;
	    var r = glMatrix.RANDOM() * 2.0 * Math.PI;
	    out[0] = Math.cos(r) * scale;
	    out[1] = Math.sin(r) * scale;
	    return out;
	};
	
	/**
	 * Transforms the vec2 with a mat2
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the vector to transform
	 * @param {mat2} m matrix to transform with
	 * @returns {vec2} out
	 */
	vec2.transformMat2 = function(out, a, m) {
	    var x = a[0],
	        y = a[1];
	    out[0] = m[0] * x + m[2] * y;
	    out[1] = m[1] * x + m[3] * y;
	    return out;
	};
	
	/**
	 * Transforms the vec2 with a mat2d
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the vector to transform
	 * @param {mat2d} m matrix to transform with
	 * @returns {vec2} out
	 */
	vec2.transformMat2d = function(out, a, m) {
	    var x = a[0],
	        y = a[1];
	    out[0] = m[0] * x + m[2] * y + m[4];
	    out[1] = m[1] * x + m[3] * y + m[5];
	    return out;
	};
	
	/**
	 * Transforms the vec2 with a mat3
	 * 3rd vector component is implicitly '1'
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the vector to transform
	 * @param {mat3} m matrix to transform with
	 * @returns {vec2} out
	 */
	vec2.transformMat3 = function(out, a, m) {
	    var x = a[0],
	        y = a[1];
	    out[0] = m[0] * x + m[3] * y + m[6];
	    out[1] = m[1] * x + m[4] * y + m[7];
	    return out;
	};
	
	/**
	 * Transforms the vec2 with a mat4
	 * 3rd vector component is implicitly '0'
	 * 4th vector component is implicitly '1'
	 *
	 * @param {vec2} out the receiving vector
	 * @param {vec2} a the vector to transform
	 * @param {mat4} m matrix to transform with
	 * @returns {vec2} out
	 */
	vec2.transformMat4 = function(out, a, m) {
	    var x = a[0], 
	        y = a[1];
	    out[0] = m[0] * x + m[4] * y + m[12];
	    out[1] = m[1] * x + m[5] * y + m[13];
	    return out;
	};
	
	/**
	 * Perform some operation over an array of vec2s.
	 *
	 * @param {Array} a the array of vectors to iterate over
	 * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
	 * @param {Number} offset Number of elements to skip at the beginning of the array
	 * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
	 * @param {Function} fn Function to call for each vector in the array
	 * @param {Object} [arg] additional argument to pass to fn
	 * @returns {Array} a
	 * @function
	 */
	vec2.forEach = (function() {
	    var vec = vec2.create();
	
	    return function(a, stride, offset, count, fn, arg) {
	        var i, l;
	        if(!stride) {
	            stride = 2;
	        }
	
	        if(!offset) {
	            offset = 0;
	        }
	        
	        if(count) {
	            l = Math.min((count * stride) + offset, a.length);
	        } else {
	            l = a.length;
	        }
	
	        for(i = offset; i < l; i += stride) {
	            vec[0] = a[i]; vec[1] = a[i+1];
	            fn(vec, vec, arg);
	            a[i] = vec[0]; a[i+1] = vec[1];
	        }
	        
	        return a;
	    };
	})();
	
	/**
	 * Returns a string representation of a vector
	 *
	 * @param {vec2} a vector to represent as a string
	 * @returns {String} string representation of the vector
	 */
	vec2.str = function (a) {
	    return 'vec2(' + a[0] + ', ' + a[1] + ')';
	};
	
	/**
	 * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)
	 *
	 * @param {vec2} a The first vector.
	 * @param {vec2} b The second vector.
	 * @returns {Boolean} True if the vectors are equal, false otherwise.
	 */
	vec2.exactEquals = function (a, b) {
	    return a[0] === b[0] && a[1] === b[1];
	};
	
	/**
	 * Returns whether or not the vectors have approximately the same elements in the same position.
	 *
	 * @param {vec2} a The first vector.
	 * @param {vec2} b The second vector.
	 * @returns {Boolean} True if the vectors are equal, false otherwise.
	 */
	vec2.equals = function (a, b) {
	    var a0 = a[0], a1 = a[1];
	    var b0 = b[0], b1 = b[1];
	    return (Math.abs(a0 - b0) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&
	            Math.abs(a1 - b1) <= glMatrix.EPSILON*Math.max(1.0, Math.abs(a1), Math.abs(b1)));
	};
	
	module.exports = vec2;


/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _VectorBase2 = __webpack_require__(3);
	
	var _VectorBase3 = _interopRequireDefault(_VectorBase2);
	
	var _Vector = __webpack_require__(2);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	var _Color = __webpack_require__(15);
	
	var _Color2 = _interopRequireDefault(_Color);
	
	var _Vector3 = __webpack_require__(16);
	
	var _Vector4 = _interopRequireDefault(_Vector3);
	
	var _Colors = __webpack_require__(17);
	
	var _Colors2 = _interopRequireDefault(_Colors);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="./gl-matrix.d.ts"/>
	
	
	var Color3 = function (_VectorBase) {
	    _inherits(Color3, _VectorBase);
	
	    _createClass(Color3, null, [{
	        key: "fromColor4",
	        value: function fromColor4(col) {
	            return new Color3(col.R, col.G, col.B);
	        }
	    }, {
	        key: "parse",
	        value: function parse(color, tryParse) {
	            return Color3.internalParse(color, true, tryParse);
	        }
	        /// Color parser for css like syntax
	
	    }, {
	        key: "internalParse",
	        value: function internalParse(color, isFirst, tryParse) {
	            if (isFirst && _Colors2.default[color]) {
	                var col = _Color2.default.internalParse(_Colors2.default[color], false, tryParse);
	                return Color3.fromColor4(col);
	            }
	            var m = void 0;
	            if (isFirst) {
	                m = color.match(/^#([0-9a-f]{3})$/i);
	                // #fff
	                if (m) {
	                    var s = m[1];
	                    return new Color3(parseInt(s.charAt(0), 16) / 0xf, parseInt(s.charAt(1), 16) / 0xf, parseInt(s.charAt(2), 16) / 0xf);
	                }
	            }
	            // #ffffff
	            m = color.match(/^#([0-9a-f]{6})$/i);
	            if (m) {
	                var _s = m[1];
	                return new Color3(parseInt(_s.substr(0, 2), 16) / 0xff, parseInt(_s.substr(2, 2), 16) / 0xff, parseInt(_s.substr(4, 2), 16) / 0xff);
	            }
	            var n = color.match(/^\s*rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*$/i);
	            if (n && isFirst) {
	                return new Color3(parseInt(n[1], 10) / 0xff, parseInt(n[2], 10) / 0xff, parseInt(n[3], 10) / 0xff);
	            }
	            if (tryParse) {
	                return undefined;
	            }
	            throw new Error("Unexpected color string" + color);
	        }
	    }, {
	        key: "equals",
	        value: function equals(col1, col2) {
	            return _VectorBase3.default.__elementEquals(col1, col2);
	        }
	    }]);
	
	    function Color3(r, g, b) {
	        _classCallCheck(this, Color3);
	
	        var _this = _possibleConstructorReturn(this, (Color3.__proto__ || Object.getPrototypeOf(Color3)).call(this));
	
	        _this.rawElements = [r, g, b];
	        return _this;
	    }
	
	    _createClass(Color3, [{
	        key: "toVector",
	        value: function toVector() {
	            return new _Vector2.default(this.R, this.G, this.B);
	        }
	    }, {
	        key: "toVector4",
	        value: function toVector4(a) {
	            if (typeof a === "undefined") {
	                a = 0;
	            }
	            return new _Vector4.default(this.R, this.G, this.B, a);
	        }
	    }, {
	        key: "equalWith",
	        value: function equalWith(col) {
	            return Color3.equals(col, this);
	        }
	    }, {
	        key: "toString",
	        value: function toString() {
	            return "rgb(" + Math.round(this.R * 255) + ", " + Math.round(this.G * 255) + ", " + Math.round(this.B * 255) + ")";
	        }
	    }, {
	        key: "toDisplayString",
	        value: function toDisplayString() {
	            var st = "#";
	            st += Math.round(this.R * 0xff).toString(16).toUpperCase();
	            st += Math.round(this.G * 0xff).toString(16).toUpperCase();
	            st += Math.round(this.B * 0xff).toString(16).toUpperCase();
	            return "Color3(" + this.R + ", " + this.G + ", " + this.B + ", " + st + ")";
	        }
	    }, {
	        key: "R",
	        get: function get() {
	            return this.rawElements[0];
	        }
	    }, {
	        key: "G",
	        get: function get() {
	            return this.rawElements[1];
	        }
	    }, {
	        key: "B",
	        get: function get() {
	            return this.rawElements[2];
	        }
	    }, {
	        key: "ElementCount",
	        get: function get() {
	            return 3;
	        }
	    }]);
	
	    return Color3;
	}(_VectorBase3.default);
	
	exports.default = Color3;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _VectorBase2 = __webpack_require__(3);
	
	var _VectorBase3 = _interopRequireDefault(_VectorBase2);
	
	var _Vector = __webpack_require__(16);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	var _Colors = __webpack_require__(17);
	
	var _Colors2 = _interopRequireDefault(_Colors);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="./gl-matrix.d.ts"/>
	
	
	var Color4 = function (_VectorBase) {
	    _inherits(Color4, _VectorBase);
	
	    _createClass(Color4, null, [{
	        key: "internalParse",
	
	        /// Color parser for css like syntax
	        value: function internalParse(color, isFirst, tryParse) {
	            if (isFirst && _Colors2.default[color]) {
	                return Color4.internalParse(_Colors2.default[color], false);
	            }
	            var m = void 0;
	            if (isFirst) {
	                m = color.match(/^#([0-9a-f]{3})$/i);
	                // #fff
	                if (m) {
	                    var s = m[1];
	                    return new Color4(parseInt(s.charAt(0), 16) / 0xf, parseInt(s.charAt(1), 16) / 0xf, parseInt(s.charAt(2), 16) / 0xf, 1);
	                }
	            }
	            if (isFirst) {
	                m = color.match(/^#([0-9a-f]{4})$/i);
	                // #ffff
	                if (m) {
	                    var _s = m[1];
	                    return new Color4(parseInt(_s.charAt(0), 16) / 0xf, parseInt(_s.charAt(1), 16) / 0xf, parseInt(_s.charAt(2), 16) / 0xf, parseInt(_s.charAt(3), 16) / 0xf);
	                }
	            }
	            // #ffffff
	            m = color.match(/^#([0-9a-f]{6})$/i);
	            if (m) {
	                var _s2 = m[1];
	                return new Color4(parseInt(_s2.substr(0, 2), 16) / 0xff, parseInt(_s2.substr(2, 2), 16) / 0xff, parseInt(_s2.substr(4, 2), 16) / 0xff, 1);
	            }
	            // #ffffffff
	            if (isFirst) {
	                m = color.match(/^#([0-9a-f]{8})$/i);
	                if (m) {
	                    var _s3 = m[1];
	                    return new Color4(parseInt(_s3.substr(0, 2), 16) / 0xff, parseInt(_s3.substr(2, 2), 16) / 0xff, parseInt(_s3.substr(4, 2), 16) / 0xff, parseInt(_s3.substr(6, 2), 16) / 0xff);
	                }
	            }
	            var n = color.match(/^\s*rgb\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\)\s*$/i);
	            if (n && isFirst) {
	                return new Color4(parseInt(n[1], 10) / 0xff, parseInt(n[2], 10) / 0xff, parseInt(n[3], 10) / 0xff, 1);
	            }
	            n = color.match(/^\s*rgba\s*\(\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*\,\s*(0|1|0\.\d+)\s*\)\s*$/i);
	            if (n && isFirst) {
	                var d = parseInt(n[4], 10);
	                d = d <= 1 ? d : d / 0xff;
	                return new Color4(parseInt(n[1], 10) / 0xff, parseInt(n[2], 10) / 0xff, parseInt(n[3], 10) / 0xff, parseInt(n[4], 10));
	            }
	            if (tryParse) {
	                return undefined;
	            }
	            throw new Error("Unexpected color string" + color);
	        }
	    }, {
	        key: "parse",
	        value: function parse(color, tryParse) {
	            return Color4.internalParse(color, true, tryParse);
	        }
	    }, {
	        key: "equals",
	        value: function equals(col1, col2) {
	            return _VectorBase3.default.__elementEquals(col1, col2);
	        }
	    }]);
	
	    function Color4(r, g, b, a) {
	        _classCallCheck(this, Color4);
	
	        var _this = _possibleConstructorReturn(this, (Color4.__proto__ || Object.getPrototypeOf(Color4)).call(this));
	
	        _this.rawElements = [r, g, b, a];
	        return _this;
	    }
	
	    _createClass(Color4, [{
	        key: "toVector",
	        value: function toVector() {
	            return new _Vector2.default(this.R, this.G, this.B, this.A);
	        }
	    }, {
	        key: "equalWith",
	        value: function equalWith(col) {
	            return Color4.equals(col, this);
	        }
	    }, {
	        key: "toString",
	        value: function toString() {
	            return "rgba(" + Math.round(this.R * 255) + ", " + Math.round(this.G * 255) + ", " + Math.round(this.B * 255) + ", " + Math.round(this.A * 255) + ")";
	        }
	    }, {
	        key: "toDisplayString",
	        value: function toDisplayString() {
	            var st = "#";
	            st += Math.round(this.R * 0xff).toString(16).toUpperCase();
	            st += Math.round(this.G * 0xff).toString(16).toUpperCase();
	            st += Math.round(this.B * 0xff).toString(16).toUpperCase();
	            st += Math.round(this.A * 0xff).toString(16).toUpperCase();
	            return "Color4(" + this.R + ", " + this.G + ", " + this.B + ", " + this.A + ", " + st + ")";
	        }
	    }, {
	        key: "R",
	        get: function get() {
	            return this.rawElements[0];
	        }
	    }, {
	        key: "G",
	        get: function get() {
	            return this.rawElements[1];
	        }
	    }, {
	        key: "B",
	        get: function get() {
	            return this.rawElements[2];
	        }
	    }, {
	        key: "A",
	        get: function get() {
	            return this.rawElements[3];
	        }
	    }, {
	        key: "ElementCount",
	        get: function get() {
	            return 4;
	        }
	    }]);
	
	    return Color4;
	}(_VectorBase3.default);
	
	exports.default = Color4;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _VectorBase2 = __webpack_require__(3);
	
	var _VectorBase3 = _interopRequireDefault(_VectorBase2);
	
	var _glMatrix = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="./gl-matrix.d.ts"/>
	
	
	var Vector4 = function (_VectorBase) {
	    _inherits(Vector4, _VectorBase);
	
	    _createClass(Vector4, null, [{
	        key: "copy",
	        value: function copy(vec) {
	            return new Vector4(vec.X, vec.Y, vec.Z, vec.W);
	        }
	    }, {
	        key: "dot",
	        value: function dot(v1, v2) {
	            return _glMatrix.vec4.dot(v1.rawElements, v2.rawElements);
	        }
	    }, {
	        key: "add",
	        value: function add(v1, v2) {
	            var newVec = _glMatrix.vec4.create();
	            return new Vector4(_glMatrix.vec4.add(newVec, v1.rawElements, v2.rawElements));
	        }
	    }, {
	        key: "subtract",
	        value: function subtract(v1, v2) {
	            var newVec = _glMatrix.vec4.create();
	            return new Vector4(_glMatrix.vec4.sub(newVec, v1.rawElements, v2.rawElements));
	        }
	    }, {
	        key: "multiply",
	        value: function multiply(s, v) {
	            var newVec = _glMatrix.vec4.create();
	            return new Vector4(_glMatrix.vec4.scale(newVec, v.rawElements, s));
	        }
	    }, {
	        key: "negate",
	        value: function negate(v1) {
	            return Vector4.multiply(-1, v1);
	        }
	    }, {
	        key: "equals",
	        value: function equals(v1, v2) {
	            return _VectorBase3.default.__elementEquals(v1, v2);
	        }
	    }, {
	        key: "nearlyEquals",
	        value: function nearlyEquals(v1, v2) {
	            return _VectorBase3.default.__nearlyElementEquals(v1, v2);
	        }
	    }, {
	        key: "normalize",
	        value: function normalize(v1) {
	            var newVec = _glMatrix.vec4.create();
	            return new Vector4(_glMatrix.vec4.normalize(newVec, v1.rawElements));
	        }
	    }, {
	        key: "min",
	        value: function min(v1, v2) {
	            return new Vector4(_VectorBase3.default.__fromGenerationFunction(v1, v2, function (i, _v1, _v2) {
	                return Math.min(_v1.rawElements[i], _v2.rawElements[i]);
	            }));
	        }
	    }, {
	        key: "max",
	        value: function max(v1, v2) {
	            return new Vector4(_VectorBase3.default.__fromGenerationFunction(v1, v2, function (i, _v1, _v2) {
	                return Math.max(_v1.rawElements[i], _v2.rawElements[i]);
	            }));
	        }
	    }, {
	        key: "angle",
	        value: function angle(v1, v2) {
	            return Math.acos(Vector4.dot(v1.normalized, v2.normalized));
	        }
	    }, {
	        key: "parse",
	        value: function parse(str) {
	            var parseResult = _VectorBase3.default.__parse(str);
	            var elements = parseResult.elements;
	            if (!elements || elements.length !== 1 && elements.length !== 4) {
	                return undefined;
	            }
	            var result = void 0;
	            if (elements.length === 1) {
	                result = new Vector4(elements[0], elements[0], elements[0], elements[0]);
	            } else {
	                result = new Vector4(elements[0], elements[1], elements[2], elements[3]);
	            }
	            if (parseResult.needNormalize) {
	                result = result.normalizeThis();
	            }
	            if (parseResult.coefficient) {
	                result = result.multiplyWith(parseResult.coefficient);
	            }
	            if (parseResult.needNegate) {
	                result = result.negateThis();
	            }
	            return result;
	        }
	    }, {
	        key: "XUnit",
	        get: function get() {
	            return new Vector4(1, 0, 0, 0);
	        }
	    }, {
	        key: "YUnit",
	        get: function get() {
	            return new Vector4(0, 1, 0, 0);
	        }
	    }, {
	        key: "ZUnit",
	        get: function get() {
	            return new Vector4(0, 0, 1, 0);
	        }
	    }, {
	        key: "WUnit",
	        get: function get() {
	            return new Vector4(0, 0, 0, 1);
	        }
	    }, {
	        key: "One",
	        get: function get() {
	            return new Vector4(1, 1, 1, 1);
	        }
	    }, {
	        key: "Zero",
	        get: function get() {
	            return new Vector4(0, 0, 0, 0);
	        }
	    }]);
	
	    function Vector4(x, y, z, w) {
	        _classCallCheck(this, Vector4);
	
	        var _this = _possibleConstructorReturn(this, (Vector4.__proto__ || Object.getPrototypeOf(Vector4)).call(this));
	
	        if (typeof y === "undefined") {
	            _this.rawElements = x;
	            return _possibleConstructorReturn(_this);
	        }
	        _this.rawElements = [x, y, z, w];
	        return _this;
	    }
	
	    _createClass(Vector4, [{
	        key: "normalizeThis",
	        value: function normalizeThis() {
	            return Vector4.normalize(this);
	        }
	    }, {
	        key: "dotWith",
	        value: function dotWith(v) {
	            return Vector4.dot(this, v);
	        }
	    }, {
	        key: "addWith",
	        value: function addWith(v) {
	            return Vector4.add(this, v);
	        }
	    }, {
	        key: "subtractWith",
	        value: function subtractWith(v) {
	            return Vector4.subtract(this, v);
	        }
	    }, {
	        key: "multiplyWith",
	        value: function multiplyWith(s) {
	            return Vector4.multiply(s, this);
	        }
	    }, {
	        key: "negateThis",
	        value: function negateThis() {
	            return Vector4.negate(this);
	        }
	    }, {
	        key: "equalWith",
	        value: function equalWith(v) {
	            return Vector4.equals(this, v);
	        }
	    }, {
	        key: "nearlyEqualWith",
	        value: function nearlyEqualWith(v) {
	            return Vector4.nearlyEquals(this, v);
	        }
	    }, {
	        key: "toString",
	        value: function toString() {
	            return "(" + this.X + ", " + this.Y + ", " + this.Z + ", " + this.W + ")";
	        }
	    }, {
	        key: "toDisplayString",
	        value: function toDisplayString() {
	            return "Vector4" + this.toString();
	        }
	    }, {
	        key: "normalized",
	        get: function get() {
	            return this.multiplyWith(1 / this.magnitude);
	        }
	    }, {
	        key: "X",
	        get: function get() {
	            return this.rawElements[0];
	        },
	        set: function set(x) {
	            this.rawElements[0] = +x;
	        }
	    }, {
	        key: "Y",
	        get: function get() {
	            return this.rawElements[1];
	        },
	        set: function set(y) {
	            this.rawElements[1] = +y;
	        }
	    }, {
	        key: "Z",
	        get: function get() {
	            return this.rawElements[2];
	        },
	        set: function set(z) {
	            this.rawElements[2] = +z;
	        }
	    }, {
	        key: "W",
	        get: function get() {
	            return this.rawElements[3];
	        },
	        set: function set(w) {
	            this.rawElements[3] = +w;
	        }
	    }, {
	        key: "ElementCount",
	        get: function get() {
	            return 4;
	        }
	    }]);
	
	    return Vector4;
	}(_VectorBase3.default);
	
	exports.default = Vector4;

/***/ },
/* 17 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	exports.default = {
	    "aliceblue": "#F0F8FF",
	    "antiquewhite": "#FAEBD7",
	    "aqua": "#00FFFF",
	    "aquamarine": "#7FFFD4",
	    "azure": "#F0FFFF",
	    "beige": "#F5F5DC",
	    "bisque": "#FFE4C4",
	    "black": "#000000",
	    "blanchedalmond": "#FFEBCD",
	    "blue": "#0000FF",
	    "blueviolet": "#8A2BE2",
	    "brown": "#A52A2A",
	    "burlywood": "#DEB887",
	    "cadetblue": "#5F9EA0",
	    "chartreuse": "#7FFF00",
	    "chocolate": "#D2691E",
	    "coral": "#FF7F50",
	    "cornflowerblue": "#6495ED",
	    "cornsilk": "#FFF8DC",
	    "crimson": "#DC143C",
	    "cyan": "#00FFFF",
	    "darkblue": "#00008B",
	    "darkcyan": "#008B8B",
	    "darkgoldenrod": "#B8860B",
	    "darkgray": "#A9A9A9",
	    "darkgreen": "#006400",
	    "darkgrey": "#A9A9A9",
	    "darkkhaki": "#BDB76B",
	    "darkmagenta": "#8B008B",
	    "darkolivegreen": "#556B2F",
	    "darkorange": "#FF8C00",
	    "darkorchid": "#9932CC",
	    "darkred": "#8B0000",
	    "darksalmon": "#E9967A",
	    "darkseagreen": "#8FBC8F",
	    "darkslateblue": "#483D8B",
	    "darkslategray": "#2F4F4F",
	    "darkslategrey": "#2F4F4F",
	    "darkturquoise": "#00CED1",
	    "darkviolet": "#9400D3",
	    "deeppink": "#FF1493",
	    "deepskyblue": "#00BFFF",
	    "dimgray": "#696969",
	    "dimgrey": "#696969",
	    "dodgerblue": "#1E90FF",
	    "firebrick": "#B22222",
	    "floralwhite": "#FFFAF0",
	    "forestgreen": "#228B22",
	    "fuchsia": "#FF00FF",
	    "gainsboro": "#DCDCDC",
	    "ghostwhite": "#F8F8FF",
	    "gold": "#FFD700",
	    "goldenrod": "#DAA520",
	    "gray": "#808080",
	    "green": "#008000",
	    "greenyellow": "#ADFF2F",
	    "grey": "#808080",
	    "honeydew": "#F0FFF0",
	    "hotpink": "#FF69B4",
	    "indianred": "#CD5C5C",
	    "indigo": "#4B0082",
	    "ivory": "#FFFFF0",
	    "khaki": "#F0E68C",
	    "lavender": "#E6E6FA",
	    "lavenderblush": "#FFF0F5",
	    "lawngreen": "#7CFC00",
	    "lemonchiffon": "#FFFACD",
	    "lightblue": "#ADD8E6",
	    "lightcoral": "#F08080",
	    "lightcyan": "#E0FFFF",
	    "lightgoldenrodyellow": "#FAFAD2",
	    "lightgray": "#D3D3D3",
	    "lightgreen": "#90EE90",
	    "lightgrey": "#D3D3D3",
	    "lightpink": "#FFB6C1",
	    "lightsalmon": "#FFA07A",
	    "lightseagreen": "#20B2AA",
	    "lightskyblue": "#87CEFA",
	    "lightslategray": "#778899",
	    "lightslategrey": "#778899",
	    "lightsteelblue": "#B0C4DE",
	    "lightyellow": "#FFFFE0",
	    "lime": "#00FF00",
	    "limegreen": "#32CD32",
	    "linen": "#FAF0E6",
	    "magenta": "#FF00FF",
	    "maroon": "#800000",
	    "mediumaquamarine": "#66CDAA",
	    "mediumblue": "#0000CD",
	    "mediumorchid": "#BA55D3",
	    "mediumpurple": "#9370DB",
	    "mediumseagreen": "#3CB371",
	    "mediumslateblue": "#7B68EE",
	    "mediumspringgreen": "#00FA9A",
	    "mediumturquoise": "#48D1CC",
	    "mediumvioletred": "#C71585",
	    "midnightblue": "#191970",
	    "mintcream": "#F5FFFA",
	    "mistyrose": "#FFE4E1",
	    "moccasin": "#FFE4B5",
	    "navajowhite": "#FFDEAD",
	    "navy": "#000080",
	    "oldlace": "#FDF5E6",
	    "olive": "#808000",
	    "olivedrab": "#6B8E23",
	    "orange": "#FFA500",
	    "orangered": "#FF4500",
	    "orchid": "#DA70D6",
	    "palegoldenrod": "#EEE8AA",
	    "palegreen": "#98FB98",
	    "paleturquoise": "#AFEEEE",
	    "palevioletred": "#DB7093",
	    "papayawhip": "#FFEFD5",
	    "peachpuff": "#FFDAB9",
	    "peru": "#CD853F",
	    "pink": "#FFC0CB",
	    "plum": "#DDA0DD",
	    "powderblue": "#B0E0E6",
	    "purple": "#800080",
	    "red": "#FF0000",
	    "rosybrown": "#BC8F8F",
	    "royalblue": "#4169E1",
	    "saddlebrown": "#8B4513",
	    "salmon": "#FA8072",
	    "sandybrown": "#F4A460",
	    "seagreen": "#2E8B57",
	    "seashell": "#FFF5EE",
	    "sienna": "#A0522D",
	    "silver": "#C0C0C0",
	    "skyblue": "#87CEEB",
	    "slateblue": "#6A5ACD",
	    "slategray": "#708090",
	    "slategrey": "#708090",
	    "snow": "#FFFAFA",
	    "springgreen": "#00FF7F",
	    "steelblue": "#4682B4",
	    "tan": "#D2B48C",
	    "teal": "#008080",
	    "thistle": "#D8BFD8",
	    "tomato": "#FF6347",
	    "turquoise": "#40E0D0",
	    "violet": "#EE82EE",
	    "wheat": "#F5DEB3",
	    "white": "#FFFFFF",
	    "whitesmoke": "#F5F5F5",
	    "yellow": "#FFFF00",
	    "yellowgreen": "#9ACD32"
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _glMatrix = __webpack_require__(4);
	
	exports.default = {
	    vec2: _glMatrix.vec2,
	    vec3: _glMatrix.vec3,
	    vec4: _glMatrix.vec4,
	    glMatrix: _glMatrix.glMatrix,
	    mat2d: _glMatrix.mat2d,
	    mat3: _glMatrix.mat3,
	    mat4: _glMatrix.mat4,
	    quat: _glMatrix.quat
	};

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _MatrixBase2 = __webpack_require__(20);
	
	var _MatrixBase3 = _interopRequireDefault(_MatrixBase2);
	
	var _Vector = __webpack_require__(2);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	var _Vector3 = __webpack_require__(16);
	
	var _Vector4 = _interopRequireDefault(_Vector3);
	
	var _Quaternion = __webpack_require__(21);
	
	var _Quaternion2 = _interopRequireDefault(_Quaternion);
	
	var _glMatrix = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="./gl-matrix.d.ts"/>
	
	
	var Matrix = function (_MatrixBase) {
	    _inherits(Matrix, _MatrixBase);
	
	    _createClass(Matrix, null, [{
	        key: "zero",
	        value: function zero() {
	            return new Matrix([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
	        }
	    }, {
	        key: "identity",
	        value: function identity() {
	            return new Matrix(_glMatrix.mat4.create());
	        }
	    }, {
	        key: "fromElements",
	        value: function fromElements(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {
	            return new Matrix([m00, m10, m20, m30, m01, m11, m21, m31, m02, m12, m22, m32, m03, m13, m23, m33]);
	        }
	    }, {
	        key: "fromFunc",
	        value: function fromFunc(f) {
	            return new Matrix([f(0, 0), f(1, 0), f(2, 0), f(3, 0), f(0, 1), f(1, 1), f(2, 1), f(3, 1), f(0, 2), f(1, 2), f(2, 2), f(3, 2), f(0, 3), f(1, 3), f(2, 3), f(3, 3)]);
	        }
	    }, {
	        key: "equals",
	        value: function equals(m1, m2) {
	            return Matrix.__elementEquals(m1, m2);
	        }
	    }, {
	        key: "add",
	        value: function add(m1, m2) {
	            var mat = _glMatrix.mat4.create();
	            for (var i = 0; i < 16; i++) {
	                mat[i] = m1.rawElements[i] + m2.rawElements[i];
	            }
	            return new Matrix(mat);
	        }
	    }, {
	        key: "subtract",
	        value: function subtract(m1, m2) {
	            return Matrix.add(m1, Matrix.negate(m2));
	        }
	    }, {
	        key: "scalarMultiply",
	        value: function scalarMultiply(s, m) {
	            var newMat = _glMatrix.mat4.create();
	            _glMatrix.mat4.multiply(newMat, [s, 0, 0, 0, 0, s, 0, 0, 0, 0, s, 0, 0, 0, 0, s], m.rawElements);
	            return new Matrix(newMat);
	        }
	    }, {
	        key: "multiply",
	        value: function multiply(m1, m2) {
	            var newMat = _glMatrix.mat4.create();
	            return new Matrix(_glMatrix.mat4.mul(newMat, m1.rawElements, m2.rawElements));
	        }
	    }, {
	        key: "trs",
	        value: function trs(t, rot, s) {
	            var newMat = _glMatrix.mat4.create();
	            var cacheMat = _glMatrix.mat4.create();
	            _glMatrix.mat4.mul(newMat, _glMatrix.mat4.translate(newMat, _glMatrix.mat4.create(), t.rawElements), _glMatrix.mat4.fromQuat(cacheMat, rot.rawElements));
	            _glMatrix.mat4.scale(newMat, newMat, s.rawElements);
	            return new Matrix(newMat);
	        }
	    }, {
	        key: "negate",
	        value: function negate(m) {
	            return this.scalarMultiply(-1, m);
	        }
	    }, {
	        key: "transpose",
	        value: function transpose(m) {
	            var newMat = _glMatrix.mat4.create();
	            return new Matrix(_glMatrix.mat4.transpose(newMat, m.rawElements));
	        }
	    }, {
	        key: "transformPoint",
	        value: function transformPoint(m, t) {
	            var newVec = _glMatrix.vec3.create();
	            _glMatrix.vec3.transformMat4(newVec, t.rawElements, m.rawElements);
	            return new _Vector2.default(newVec);
	        }
	    }, {
	        key: "transformNormal",
	        value: function transformNormal(m, t) {
	            var newVec = _glMatrix.vec4.create();
	            var trans = _glMatrix.vec4.create();
	            trans[0] = t.X;
	            trans[1] = t.Y;
	            trans[2] = t.Z;
	            trans[3] = 0;
	            _glMatrix.vec4.transformMat4(newVec, trans, m.rawElements);
	            return new _Vector2.default(newVec[0], newVec[1], newVec[2]);
	        }
	    }, {
	        key: "transform",
	        value: function transform(m, t) {
	            var newVec = _glMatrix.vec4.create();
	            var trans = _glMatrix.vec4.create();
	            trans[0] = t.X;
	            trans[1] = t.Y;
	            trans[2] = t.Z;
	            trans[3] = t.W;
	            _glMatrix.vec4.transformMat4(newVec, trans, m.rawElements);
	            return new _Vector4.default(newVec[0], newVec[1], newVec[2], newVec[3]);
	        }
	        /**
	         * Retrieve determinant of passed matrix
	         */
	
	    }, {
	        key: "determinant",
	        value: function determinant(m) {
	            return _glMatrix.mat4.determinant(m.rawElements);
	        }
	        /**
	         * Compute inverted passed matrix.
	         */
	
	    }, {
	        key: "inverse",
	        value: function inverse(m) {
	            var newMat = _glMatrix.mat4.create();
	            return new Matrix(_glMatrix.mat4.invert(newMat, m.rawElements));
	        }
	        /**
	         * Generate linear translation transform matrix.
	         */
	
	    }, {
	        key: "translate",
	        value: function translate(v) {
	            var newMat = _glMatrix.mat4.create();
	            _glMatrix.mat4.translate(newMat, newMat, v.rawElements);
	            return new Matrix(newMat);
	        }
	        /**
	         * Generate linear scaling transform matrix.
	         */
	
	    }, {
	        key: "scale",
	        value: function scale(v) {
	            var newMat = _glMatrix.mat4.create();
	            _glMatrix.mat4.scale(newMat, newMat, v.rawElements);
	            return new Matrix(newMat);
	        }
	    }, {
	        key: "rotateX",
	        value: function rotateX(angle) {
	            var newMat = _glMatrix.mat4.create();
	            _glMatrix.mat4.rotateX(newMat, newMat, angle);
	            return new Matrix(newMat);
	        }
	    }, {
	        key: "rotateY",
	        value: function rotateY(angle) {
	            var newMat = _glMatrix.mat4.create();
	            _glMatrix.mat4.rotateY(newMat, newMat, angle);
	            return new Matrix(newMat);
	        }
	    }, {
	        key: "rotateZ",
	        value: function rotateZ(angle) {
	            var newMat = _glMatrix.mat4.create();
	            _glMatrix.mat4.rotateZ(newMat, newMat, angle);
	            return new Matrix(newMat);
	        }
	    }, {
	        key: "rotationQuaternion",
	        value: function rotationQuaternion(quat_) {
	            var quaternion = _glMatrix.quat.create();
	            var newMat = _glMatrix.mat4.create();
	            _glMatrix.quat.normalize(quaternion, quat_.rawElements);
	            _glMatrix.mat4.fromQuat(newMat, quaternion);
	            return new Matrix(newMat);
	        }
	    }, {
	        key: "frustum",
	        value: function frustum(left, right, bottom, top, near, far) {
	            var newMat = _glMatrix.mat4.create();
	            _glMatrix.mat4.frustum(newMat, left, right, bottom, top, near, far);
	            return new Matrix(newMat);
	        }
	    }, {
	        key: "ortho",
	        value: function ortho(left, right, bottom, top, near, far) {
	            var newMat = _glMatrix.mat4.create();
	            _glMatrix.mat4.ortho(newMat, left, right, bottom, top, near, far);
	            return new Matrix(newMat);
	        }
	    }, {
	        key: "perspective",
	        value: function perspective(fovy, aspect, near, far) {
	            var newMat = _glMatrix.mat4.create();
	            _glMatrix.mat4.perspective(newMat, fovy, aspect, near, far);
	            return new Matrix(newMat);
	        }
	    }, {
	        key: "lookAt",
	        value: function lookAt(eye, _lookAt, up) {
	            var newMat = _glMatrix.mat4.create();
	            _glMatrix.mat4.lookAt(newMat, eye.rawElements, _lookAt.rawElements, up.rawElements);
	            return new Matrix(newMat);
	        }
	    }]);
	
	    function Matrix(arr) {
	        _classCallCheck(this, Matrix);
	
	        var _this = _possibleConstructorReturn(this, (Matrix.__proto__ || Object.getPrototypeOf(Matrix)).call(this));
	
	        if (arr) {
	            _this.rawElements = arr;
	        } else {
	            _this.rawElements = _glMatrix.mat4.create();
	        }
	        return _this;
	    }
	
	    _createClass(Matrix, [{
	        key: "getAt",
	        value: function getAt(row, colmun) {
	            return this.rawElements[colmun * 4 + row];
	        }
	    }, {
	        key: "setAt",
	        value: function setAt(row, colmun, val) {
	            this.rawElements[colmun * 4 + row] = val;
	        }
	    }, {
	        key: "getBySingleIndex",
	        value: function getBySingleIndex(index) {
	            return this.rawElements[index];
	        }
	    }, {
	        key: "getColmun",
	        value: function getColmun(col) {
	            return new _Vector4.default(this.rawElements[col * 4], this.rawElements[col * 4 + 1], this.rawElements[col * 4 + 2], this.rawElements[col * 4 + 3]);
	        }
	        /**
	        * Get row
	        * @params row [0-3]
	        */
	
	    }, {
	        key: "getRow",
	        value: function getRow(row) {
	            return new _Vector4.default(this.rawElements[row], this.rawElements[row + 4], this.rawElements[row + 8], this.rawElements[row + 12]);
	        }
	    }, {
	        key: "multiplyWith",
	        value: function multiplyWith(m) {
	            return Matrix.multiply(this, m);
	        }
	    }, {
	        key: "equalWith",
	        value: function equalWith(m) {
	            return Matrix.equals(m, this);
	        }
	    }, {
	        key: "getTranslation",
	        value: function getTranslation() {
	            var res = [0, 0, 0];
	            _glMatrix.mat4.getTranslation(res, this.rawElements);
	            return new _Vector2.default(res);
	        }
	    }, {
	        key: "getScaling",
	        value: function getScaling() {
	            var res = [0, 0, 0];
	            _glMatrix.mat4.getScaling(res, this.rawElements);
	            return new _Vector2.default(res);
	        }
	    }, {
	        key: "getRotation",
	        value: function getRotation() {
	            var res = [0, 0, 0, 0];
	            _glMatrix.mat4.getRotation(res, this.rawElements);
	            return new _Quaternion2.default(res);
	        }
	    }, {
	        key: "toString",
	        value: function toString() {
	            return "|" + this.getBySingleIndex(0) + " " + this.getBySingleIndex(4) + " " + this.getBySingleIndex(8) + " " + this.getBySingleIndex(12) + "|\n\n                 |" + this.getBySingleIndex(1) + " " + this.getBySingleIndex(5) + " " + this.getBySingleIndex(9) + " " + this.getBySingleIndex(13) + "|\n\n                 |" + this.getBySingleIndex(2) + " " + this.getBySingleIndex(6) + " " + this.getBySingleIndex(10) + " " + this.getBySingleIndex(14) + "|\n\n                 |" + this.getBySingleIndex(3) + " " + this.getBySingleIndex(7) + " " + this.getBySingleIndex(11) + " " + this.getBySingleIndex(15) + "|";
	        }
	    }, {
	        key: "ElementCount",
	        get: function get() {
	            return 16;
	        }
	    }, {
	        key: "RowCount",
	        get: function get() {
	            return 4;
	        }
	    }, {
	        key: "ColmunCount",
	        get: function get() {
	            return 4;
	        }
	    }]);
	
	    return Matrix;
	}(_MatrixBase3.default);
	
	exports.default = Matrix;

/***/ },
/* 20 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	///<reference path="./gl-matrix.d.ts"/>
	var MatrixBase = function () {
	    function MatrixBase() {
	        _classCallCheck(this, MatrixBase);
	    }
	
	    _createClass(MatrixBase, [{
	        key: "getAt",
	        value: function getAt(row, colmun) {
	            throw new Error("Not implemented");
	        }
	    }, {
	        key: "getBySingleIndex",
	        value: function getBySingleIndex(index) {
	            throw new Error("Not implemented");
	        }
	    }, {
	        key: "RowCount",
	        get: function get() {
	            return 0;
	        }
	    }, {
	        key: "ColmunCount",
	        get: function get() {
	            return 0;
	        }
	    }], [{
	        key: "__elementEquals",
	        value: function __elementEquals(m1, m2) {
	            if (m1.RowCount !== m2.RowCount || m1.ColmunCount !== m2.ColmunCount) {
	                return false;
	            }
	            var count = m1.RowCount * m2.ColmunCount;
	            for (var i = 0; i < count; i++) {
	                if (m1.getBySingleIndex(i) !== m2.getBySingleIndex(i)) {
	                    return false;
	                }
	            }
	            return true;
	        }
	    }]);
	
	    return MatrixBase;
	}();
	
	exports.default = MatrixBase;

/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }(); ///<reference path="./gl-matrix.d.ts"/>
	
	
	var _Vector = __webpack_require__(2);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	var _glMatrix = __webpack_require__(4);
	
	var _Matrix = __webpack_require__(19);
	
	var _Matrix2 = _interopRequireDefault(_Matrix);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	* The class to maniplate quaternion.
	* Basically,you don't need to operate raw element.
	* You consider to use some of useful methods without editing raw element forcelly.
	* Each element will be represented as (w;x,y,z)
	* (1,i,j,k) is base axis for quaternion. (i,j,k is pure imaginary number)
	* (w;x,y,z) means w*1+x*i+y*j+z*k
	*
	*/
	var Quaternion = function () {
	    _createClass(Quaternion, null, [{
	        key: "equals",
	        value: function equals(q1, q2) {
	            for (var i = 0; i < 4; i++) {
	                if (q1.rawElements[i] !== q2.rawElements[i]) {
	                    return false;
	                }
	            }
	            return true;
	        }
	        /**
	        * Calculate add result of two quaternion
	        */
	
	    }, {
	        key: "add",
	        value: function add(q1, q2) {
	            var newQuat = _glMatrix.quat.create();
	            return new Quaternion(_glMatrix.quat.add(newQuat, q1.rawElements, q2.rawElements));
	        }
	        /**
	        * Calculate multiply result of two quaternion
	        */
	
	    }, {
	        key: "multiply",
	        value: function multiply(q1, q2) {
	            var newQuat = _glMatrix.quat.create();
	            return new Quaternion(_glMatrix.quat.mul(newQuat, q1.rawElements, q2.rawElements));
	        }
	        /**
	        * Calculate the rotation quaternion represented as pair of angle and axis.
	        */
	
	    }, {
	        key: "angleAxis",
	        value: function angleAxis(angle, axis) {
	            var axisVec = _glMatrix.vec3.create();
	            axisVec[0] = axis.X;
	            axisVec[1] = axis.Y;
	            axisVec[2] = axis.Z;
	            var newQuat = _glMatrix.quat.create();
	            return new Quaternion(_glMatrix.quat.setAxisAngle(newQuat, axisVec, +angle));
	        }
	    }, {
	        key: "euler",
	        value: function euler(x, y, z) {
	            return Quaternion.multiply(Quaternion.angleAxis(z, _Vector2.default.ZUnit), Quaternion.multiply(Quaternion.angleAxis(x, _Vector2.default.XUnit), Quaternion.angleAxis(y, _Vector2.default.YUnit)));
	        }
	    }, {
	        key: "eulerXYZ",
	        value: function eulerXYZ(x, y, z) {
	            return Quaternion.multiply(Quaternion.angleAxis(z, _Vector2.default.ZUnit), Quaternion.multiply(Quaternion.angleAxis(y, _Vector2.default.YUnit), Quaternion.angleAxis(x, _Vector2.default.XUnit)));
	        }
	    }, {
	        key: "slerp",
	        value: function slerp(q1, q2, t) {
	            var newQuat = _glMatrix.quat.create();
	            return new Quaternion(_glMatrix.quat.slerp(newQuat, q1.rawElements, q2.rawElements, +t));
	        }
	        /**
	         * Returns the angle in degrees between two rotations q1 and q2.
	         * @param q1 the quaternion represents begin angle.
	         * @param q2 the quaternion represents end angle.
	         * @returns {number} angle represented in radians.
	         */
	
	    }, {
	        key: "angle",
	        value: function angle(q1, q2) {
	            var delta = Quaternion.multiply(q2, q1.inverse());
	            delta = delta.normalize();
	            return 2 * Math.acos(delta.W);
	        }
	    }, {
	        key: "fromToRotation",
	        value: function fromToRotation(from, to) {
	            var crossed = _Vector2.default.cross(from.normalized, to.normalized);
	            var angle = _Vector2.default.dot(from.normalized, to.normalized);
	            return Quaternion.angleAxis(angle, crossed);
	        }
	    }, {
	        key: "lookRotation",
	        value: function lookRotation(forward, upVec) {
	            upVec = upVec || _Vector2.default.YUnit;
	            var normalizedForward = forward.normalized;
	            var upForwardCross = _Vector2.default.cross(upVec, normalizedForward).normalized;
	            var thirdAxis = _Vector2.default.cross(normalizedForward, upForwardCross);
	            var m00 = upForwardCross.X;
	            var m01 = upForwardCross.Y;
	            var m02 = upForwardCross.Z;
	            var m10 = thirdAxis.X;
	            var m11 = thirdAxis.Y;
	            var m12 = thirdAxis.Z;
	            var m20 = normalizedForward.X;
	            var m21 = normalizedForward.Y;
	            var m22 = normalizedForward.Z;
	            var num8 = m00 + m11 + m22;
	            if (num8 > 0) {
	                var num = Math.sqrt(1 + num8);
	                return new Quaternion([(m12 - m21) * 0.5 / num, (m20 - m02) * 0.5 / num, (m01 - m10) * 0.5 / num, num / 2]);
	            }
	            if (m00 >= m11 && m00 >= m22) {
	                var num7 = Math.sqrt(1 + m00 - m11 - m22);
	                return new Quaternion([(m01 + m10) * 0.5 / num7, (m02 + m20) * 0.5 / num7, (m12 - m21) * 0.5 / num7, num7 / 2]);
	            }
	            if (m11 > m22) {
	                var num6 = Math.sqrt(1 + m11 - m00 - m22);
	                return new Quaternion([(m10 + m01) * 0, 5 / num6, 0.5 * num6, (m21 + m12) * 0.5 / num6, (m20 - m02) * 0.5 / num6]);
	            }
	            var num5 = Math.sqrt(1 + m22 - m00 - m11);
	            return new Quaternion([(m20 + m02) * 0.5 / num5, (m21 + m12) * 0.5 / num5, 0.5 * num5, (m01 - m10) * 0.5 / num5]);
	        }
	    }, {
	        key: "Identity",
	        get: function get() {
	            return new Quaternion(_glMatrix.quat.create());
	        }
	        /**
	        * Constructor by specifing each elements.
	        */
	
	    }]);
	
	    function Quaternion(rawElements) {
	        _classCallCheck(this, Quaternion);
	
	        this.rawElements = rawElements;
	    }
	
	    _createClass(Quaternion, [{
	        key: "equalWith",
	        value: function equalWith(q) {
	            return Quaternion.equals(this, q);
	        }
	        /**
	        * Get normalized quaternion
	        */
	
	    }, {
	        key: "normalize",
	        value: function normalize() {
	            var newQuat = _glMatrix.quat.create();
	            return new Quaternion(_glMatrix.quat.normalize(newQuat, this.rawElements));
	        }
	    }, {
	        key: "inverse",
	        value: function inverse() {
	            var newQuat = _glMatrix.quat.create();
	            return new Quaternion(_glMatrix.quat.invert(newQuat, this.rawElements));
	        }
	    }, {
	        key: "toAngleAxisString",
	        value: function toAngleAxisString() {
	            var angle = 2 * Math.acos(this.W);
	            var imm = Math.sqrt(1 - this.W * this.W);
	            if (angle !== 180 && angle !== 0) {
	                return "axis(" + angle + "," + this.X / imm + "," + this.Y / imm + "," + this.Z / imm + ")";
	            } else if (angle === 0) {
	                return "axis(" + angle + ",0,1,0)";
	            } else {
	                return "axis(180d," + this.X + "," + this.Y + "," + this.Z + ")";
	            }
	        }
	    }, {
	        key: "toString",
	        value: function toString() {
	            return this.toAngleAxisString();
	        }
	    }, {
	        key: "factoringQuaternionZXY",
	        value: function factoringQuaternionZXY() {
	            var result = { x: 0, y: 0, z: 0 };
	            var mat = _Matrix2.default.rotationQuaternion(this);
	            var sx = mat.rawElements[6];
	            if (Math.abs(sx) < 1 - 1.0E-4) {
	                result.x = Math.asin(sx);
	                result.z = Math.atan2(-mat.rawElements[4], mat.rawElements[5]);
	                result.y = Math.atan2(-mat.rawElements[2], mat.rawElements[10]);
	            } else {
	                result.y = 0;
	                result.x = Math.PI / 2 * sx;
	                result.z = Math.atan2(mat.rawElements[1], mat.rawElements[0]);
	            }
	            return result;
	        }
	    }, {
	        key: "factoringQuaternionXYZ",
	        value: function factoringQuaternionXYZ() {
	            var result = { x: 0, y: 0, z: 0 };
	            var mat = _Matrix2.default.rotationQuaternion(this);
	            var sy = -mat.rawElements[2];
	            if (Math.abs(sy) < 1 - 1.0E-4) {
	                result.x = Math.atan2(mat.rawElements[6], mat.rawElements[10]);
	                result.y = Math.asin(sy);
	                result.z = Math.atan2(mat.rawElements[1], mat.rawElements[0]);
	            } else {
	                result.x = 0;
	                result.y = Math.PI / 2 * sy;
	                result.z = Math.atan2(-mat.rawElements[4], mat.rawElements[5]);
	            }
	            return result;
	        }
	    }, {
	        key: "eularAngles",
	        get: function get() {
	            var eular = this.factoringQuaternionZXY();
	            return new _Vector2.default(eular.x, eular.y, eular.z);
	        },
	        set: function set(v) {
	            this.rawElements = Quaternion.euler(v.X, v.Y, v.Z).rawElements;
	        }
	        /**
	        * Getter for X.
	        */
	
	    }, {
	        key: "X",
	        get: function get() {
	            return this.rawElements[0];
	        }
	        /**
	        * Getter for Y.
	        */
	
	    }, {
	        key: "Y",
	        get: function get() {
	            return this.rawElements[1];
	        }
	        /**
	        * Getter for Z.
	        */
	
	    }, {
	        key: "Z",
	        get: function get() {
	            return this.rawElements[2];
	        }
	        /**
	        * Getter for W.
	        */
	
	    }, {
	        key: "W",
	        get: function get() {
	            return this.rawElements[3];
	        }
	        /**
	        * Getter for imaginary part vector.
	        * It returns the vector (x,y,z)
	        */
	
	    }, {
	        key: "ImaginaryPart",
	        get: function get() {
	            return new _Vector2.default(this.X, this.Y, this.Z);
	        }
	        /**
	        * Get the conjugate of this quaternion
	        */
	
	    }, {
	        key: "Conjugate",
	        get: function get() {
	            var newQuat = _glMatrix.quat.create();
	            return new Quaternion(_glMatrix.quat.conjugate(newQuat, this.rawElements));
	        }
	        /**
	        * Get the length
	        */
	
	    }, {
	        key: "Length",
	        get: function get() {
	            return _glMatrix.quat.len(this.rawElements);
	        }
	    }]);
	
	    return Quaternion;
	}();
	
	exports.default = Quaternion;

/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Vector = __webpack_require__(23);
	
	var _Vector2 = _interopRequireDefault(_Vector);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Rectangle = function () {
	    _createClass(Rectangle, null, [{
	        key: "equals",
	        value: function equals(r1, r2) {
	            return r1.Left === r2.Left && r1.Right === r2.Right && r1.Top === r2.Top && r1.Bottom === r2.Bottom;
	        }
	    }, {
	        key: "edgeSizeEquals",
	        value: function edgeSizeEquals(r1, r2) {
	            return r1.Width === r2.Width && r1.Height === r2.Height;
	        }
	    }]);
	
	    function Rectangle(left, top, width, height) {
	        _classCallCheck(this, Rectangle);
	
	        this._left = left;
	        this._top = top;
	        this._width = width;
	        this._height = height;
	    }
	
	    _createClass(Rectangle, [{
	        key: "contains",
	        value: function contains(xOrPoint, y) {
	            var x = void 0;
	            if (xOrPoint instanceof _Vector2.default) {
	                x = xOrPoint.X;
	                y = xOrPoint.Y;
	            } else {
	                x = xOrPoint;
	            }
	            return this.Left <= x && this.Right >= x && this.Top <= y && this.Bottom >= y;
	        }
	    }, {
	        key: "toLocal",
	        value: function toLocal(xOrPoint, y) {
	            var x = void 0;
	            if (xOrPoint instanceof _Vector2.default) {
	                x = xOrPoint.X;
	                y = xOrPoint.Y;
	            } else {
	                x = xOrPoint;
	            }
	            x -= this.Left;
	            y -= this.Top;
	            return xOrPoint instanceof _Vector2.default ? new _Vector2.default(x, y) : [x, y];
	        }
	    }, {
	        key: "toString",
	        value: function toString() {
	            return "Rectangle(" + this.Left + "," + this.Top + "-" + this.Right + "," + this.Bottom + ")";
	        }
	    }, {
	        key: "Left",
	        get: function get() {
	            return this._left;
	        }
	    }, {
	        key: "Right",
	        get: function get() {
	            return this.Left + this.Width;
	        }
	    }, {
	        key: "Top",
	        get: function get() {
	            return this._top;
	        }
	    }, {
	        key: "Bottom",
	        get: function get() {
	            return this._top + this._height;
	        }
	    }, {
	        key: "Width",
	        get: function get() {
	            return this._width;
	        }
	    }, {
	        key: "Height",
	        get: function get() {
	            return this._height;
	        }
	    }]);
	
	    return Rectangle;
	}();
	
	exports.default = Rectangle;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _VectorBase2 = __webpack_require__(3);
	
	var _VectorBase3 = _interopRequireDefault(_VectorBase2);
	
	var _glMatrix = __webpack_require__(4);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; } ///<reference path="./gl-matrix.d.ts"/>
	
	
	var Vector2 = function (_VectorBase) {
	    _inherits(Vector2, _VectorBase);
	
	    _createClass(Vector2, null, [{
	        key: "copy",
	        value: function copy(vec) {
	            return new Vector2(vec.X, vec.Y);
	        }
	    }, {
	        key: "parse",
	        value: function parse(str) {
	            var parseResult = _VectorBase3.default.__parse(str);
	            var elements = parseResult.elements;
	            if (elements.length !== 1 && elements.length !== 2) {
	                return undefined;
	            }
	            var result = void 0;
	            if (elements.length === 1) {
	                result = new Vector2(elements[0], elements[0]);
	            } else {
	                result = new Vector2(elements[0], elements[1]);
	            }
	            if (parseResult.needNormalize) {
	                result = result.normalizeThis();
	            }
	            if (parseResult.coefficient) {
	                result = result.multiplyWith(parseResult.coefficient);
	            }
	            if (parseResult.needNegate) {
	                result = result.negateThis();
	            }
	            return result;
	        }
	    }, {
	        key: "dot",
	        value: function dot(v1, v2) {
	            return _glMatrix.vec2.dot(v1.rawElements, v2.rawElements);
	        }
	    }, {
	        key: "add",
	        value: function add(v1, v2) {
	            var newVec = _glMatrix.vec2.create();
	            return new Vector2(_glMatrix.vec2.add(newVec, v1.rawElements, v2.rawElements));
	        }
	    }, {
	        key: "subtract",
	        value: function subtract(v1, v2) {
	            var newVec = _glMatrix.vec2.create();
	            return new Vector2(_glMatrix.vec2.sub(newVec, v1.rawElements, v2.rawElements));
	        }
	    }, {
	        key: "multiply",
	        value: function multiply(s, v) {
	            var newVec = _glMatrix.vec2.create();
	            return new Vector2(_glMatrix.vec2.scale(newVec, v.rawElements, s));
	        }
	    }, {
	        key: "negate",
	        value: function negate(v1) {
	            return Vector2.multiply(-1, v1);
	        }
	    }, {
	        key: "equals",
	        value: function equals(v1, v2) {
	            return _VectorBase3.default.__elementEquals(v1, v2);
	        }
	    }, {
	        key: "nearlyEquals",
	        value: function nearlyEquals(v1, v2) {
	            return _VectorBase3.default.__nearlyElementEquals(v1, v2);
	        }
	    }, {
	        key: "normalize",
	        value: function normalize(v1) {
	            var newVec = _glMatrix.vec2.create();
	            return new Vector2(_glMatrix.vec2.normalize(newVec, v1.rawElements));
	        }
	    }, {
	        key: "min",
	        value: function min(v1, v2) {
	            return new Vector2(_VectorBase3.default.__fromGenerationFunction(v1, v2, function (i, v1_, v2_) {
	                return Math.min(v1_.rawElements[i], v2_.rawElements[i]);
	            }));
	        }
	    }, {
	        key: "max",
	        value: function max(v1, v2) {
	            return new Vector2(_VectorBase3.default.__fromGenerationFunction(v1, v2, function (i, v1_, v2_) {
	                return Math.max(v1_.rawElements[i], v2_.rawElements[i]);
	            }));
	        }
	    }, {
	        key: "angle",
	        value: function angle(v1, v2) {
	            return Math.acos(Vector2.dot(v1.normalized, v2.normalized));
	        }
	    }, {
	        key: "XUnit",
	        get: function get() {
	            return new Vector2(1, 0);
	        }
	    }, {
	        key: "YUnit",
	        get: function get() {
	            return new Vector2(0, 1);
	        }
	    }, {
	        key: "One",
	        get: function get() {
	            return new Vector2(1, 1);
	        }
	    }, {
	        key: "Zero",
	        get: function get() {
	            return new Vector2(0, 0);
	        }
	    }]);
	
	    function Vector2(x, y) {
	        _classCallCheck(this, Vector2);
	
	        var _this = _possibleConstructorReturn(this, (Vector2.__proto__ || Object.getPrototypeOf(Vector2)).call(this));
	
	        if (typeof y === "undefined") {
	            _this.rawElements = x;
	            return _possibleConstructorReturn(_this);
	        }
	        _this.rawElements = [x, y];
	        return _this;
	    }
	
	    _createClass(Vector2, [{
	        key: "dotWith",
	        value: function dotWith(v) {
	            return Vector2.dot(this, v);
	        }
	    }, {
	        key: "addWith",
	        value: function addWith(v) {
	            return Vector2.add(this, v);
	        }
	    }, {
	        key: "subtractWith",
	        value: function subtractWith(v) {
	            return Vector2.subtract(v, this);
	        }
	    }, {
	        key: "multiplyWith",
	        value: function multiplyWith(s) {
	            return Vector2.multiply(s, this);
	        }
	    }, {
	        key: "negateThis",
	        value: function negateThis() {
	            return Vector2.negate(this);
	        }
	    }, {
	        key: "equalWith",
	        value: function equalWith(v) {
	            return Vector2.equals(this, v);
	        }
	    }, {
	        key: "nearlyEqualWith",
	        value: function nearlyEqualWith(v) {
	            return Vector2.nearlyEquals(this, v);
	        }
	    }, {
	        key: "normalizeThis",
	        value: function normalizeThis() {
	            return Vector2.normalize(this);
	        }
	    }, {
	        key: "toString",
	        value: function toString() {
	            return "(" + this.X + ", " + this.Y + ")";
	        }
	    }, {
	        key: "toDisplayString",
	        value: function toDisplayString() {
	            return "Vector2" + this.toString();
	        }
	    }, {
	        key: "normalized",
	        get: function get() {
	            return this.multiplyWith(1 / this.magnitude);
	        }
	    }, {
	        key: "X",
	        get: function get() {
	            return this.rawElements[0];
	        },
	        set: function set(x) {
	            this.rawElements[0] = +x;
	        }
	    }, {
	        key: "Y",
	        get: function get() {
	            return this.rawElements[1];
	        },
	        set: function set(y) {
	            this.rawElements[1] = +y;
	        }
	    }, {
	        key: "ElementCount",
	        get: function get() {
	            return 2;
	        }
	    }]);
	
	    return Vector2;
	}(_VectorBase3.default);
	
	exports.default = Vector2;

/***/ },
/* 24 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	  value: true
	});
	
	exports.default = function () {};

/***/ }
/******/ ])
});
;

},{}],8:[function(require,module,exports){
(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
'use strict';

var _marked = [torusIndex, torusPosition, torusNormal].map(regeneratorRuntime.mark);

var gf = require('grimoirejs-fundamental').default;

var _require$default = require('grimoirejs-math').default,
    Vector3 = _require$default.Vector3,
    AABB = _require$default.AABB;

var _gf$Geometry = gf.Geometry,
    GeometryFactory = _gf$Geometry.GeometryFactory,
    GeometryBuilder = _gf$Geometry.GeometryBuilder,
    GeometryUtility = _gf$Geometry.GeometryUtility;


function torusIndex(row, column) {
  var i, ii, r;
  return regeneratorRuntime.wrap(function torusIndex$(_context) {
    while (1) {
      switch (_context.prev = _context.next) {
        case 0:
          i = 0;

        case 1:
          if (!(i < row)) {
            _context.next = 13;
            break;
          }

          ii = 0;

        case 3:
          if (!(ii < column)) {
            _context.next = 10;
            break;
          }

          r = (column + 1) * i + ii;
          return _context.delegateYield([r, r + column + 1, r + 1], 't0', 6);

        case 6:
          return _context.delegateYield([r + column + 1, r + column + 2, r + 1], 't1', 7);

        case 7:
          ii++;
          _context.next = 3;
          break;

        case 10:
          i++;
          _context.next = 1;
          break;

        case 13:
        case 'end':
          return _context.stop();
      }
    }
  }, _marked[0], this);
}

function torusPosition(row, column, irad, orad) {
  var i, r, rr, ry, ii, tr, tx, ty, tz;
  return regeneratorRuntime.wrap(function torusPosition$(_context2) {
    while (1) {
      switch (_context2.prev = _context2.next) {
        case 0:
          i = 0;

        case 1:
          if (!(i <= row)) {
            _context2.next = 18;
            break;
          }

          r = Math.PI * 2 / row * i;
          rr = Math.cos(r);
          ry = Math.sin(r);
          ii = 0;

        case 6:
          if (!(ii <= column)) {
            _context2.next = 15;
            break;
          }

          tr = Math.PI * 2 / column * ii;
          tx = (rr * irad + orad) * Math.cos(tr);
          ty = ry * irad;
          tz = (rr * irad + orad) * Math.sin(tr);
          return _context2.delegateYield([tx, ty, tz], 't0', 12);

        case 12:
          ii++;
          _context2.next = 6;
          break;

        case 15:
          i++;
          _context2.next = 1;
          break;

        case 18:
        case 'end':
          return _context2.stop();
      }
    }
  }, _marked[1], this);
}

function torusNormal(row, column) {
  var i, r, rr, ry, ii, tr, rx, rz;
  return regeneratorRuntime.wrap(function torusNormal$(_context3) {
    while (1) {
      switch (_context3.prev = _context3.next) {
        case 0:
          i = 0;

        case 1:
          if (!(i <= row)) {
            _context3.next = 17;
            break;
          }

          r = Math.PI * 2 / row * i;
          rr = Math.cos(r);
          ry = Math.sin(r);
          ii = 0;

        case 6:
          if (!(ii <= column)) {
            _context3.next = 14;
            break;
          }

          tr = Math.PI * 2 / column * ii;
          rx = rr * Math.cos(tr);
          rz = rr * Math.sin(tr);
          return _context3.delegateYield([rx, ry, rz], 't0', 11);

        case 11:
          ii++;
          _context3.next = 6;
          break;

        case 14:
          i++;
          _context3.next = 1;
          break;

        case 17:
        case 'end':
          return _context3.stop();
      }
    }
  }, _marked[2], this);
}

function torusSize(row, column) {
  return (row + 1) * (column + 1);
}

function torusAABB(irad, orad) {
  var outerRadius = orad + irad;
  return new AABB([new Vector3(outerRadius, irad, outerRadius), new Vector3(-outerRadius, -irad, -outerRadius)]);
}

GeometryFactory.addType('torus', {
  row: {
    converter: 'Number',
    defaultValue: 32
  },
  column: {
    converter: 'Number',
    defaultValue: 32
  },
  irad: {
    converter: 'Number',
    defaultValue: 0.5
  },
  orad: {
    converter: 'Number',
    defaultValue: 1.0
  }
}, function (gl, attrs) {
  return GeometryBuilder.build(gl, {
    indicies: {
      default: {
        generator: regeneratorRuntime.mark(function generator() {
          return regeneratorRuntime.wrap(function generator$(_context4) {
            while (1) {
              switch (_context4.prev = _context4.next) {
                case 0:
                  return _context4.delegateYield(torusIndex(attrs.row, attrs.column), 't0', 1);

                case 1:
                case 'end':
                  return _context4.stop();
              }
            }
          }, generator, this);
        }),
        topology: WebGLRenderingContext.TRIANGLES
      },
      wireframe: {
        generator: regeneratorRuntime.mark(function generator() {
          return regeneratorRuntime.wrap(function generator$(_context5) {
            while (1) {
              switch (_context5.prev = _context5.next) {
                case 0:
                  return _context5.delegateYield(GeometryUtility.linesFromTriangles(torusIndex(attrs.row, attrs.column)), 't0', 1);

                case 1:
                case 'end':
                  return _context5.stop();
              }
            }
          }, generator, this);
        }),
        topology: WebGLRenderingContext.LINES
      }
    },
    verticies: {
      main: {
        size: {
          position: 3,
          normal: 3,
          texCoord: 2
        },
        count: torusSize(attrs.row, attrs.column),
        getGenerators: function getGenerators() {
          return {
            position: regeneratorRuntime.mark(function position() {
              return regeneratorRuntime.wrap(function position$(_context6) {
                while (1) {
                  switch (_context6.prev = _context6.next) {
                    case 0:
                      return _context6.delegateYield(torusPosition(attrs.row, attrs.column, attrs.irad, attrs.orad), 't0', 1);

                    case 1:
                    case 'end':
                      return _context6.stop();
                  }
                }
              }, position, this);
            }),
            normal: regeneratorRuntime.mark(function normal() {
              return regeneratorRuntime.wrap(function normal$(_context7) {
                while (1) {
                  switch (_context7.prev = _context7.next) {
                    case 0:
                      return _context7.delegateYield(torusNormal(attrs.row, attrs.column), 't0', 1);

                    case 1:
                    case 'end':
                      return _context7.stop();
                  }
                }
              }, normal, this);
            }),
            texCoord: regeneratorRuntime.mark(function texCoord() {
              return regeneratorRuntime.wrap(function texCoord$(_context8) {
                while (1) {
                  switch (_context8.prev = _context8.next) {
                    case 0:
                      if (!true) {
                        _context8.next = 5;
                        break;
                      }

                      _context8.next = 3;
                      return 1;

                    case 3:
                      _context8.next = 0;
                      break;

                    case 5:
                    case 'end':
                      return _context8.stop();
                  }
                }
              }, texCoord, this);
            })
          };
        }
      }
    },
    aabb: torusAABB(attrs.irad, attrs.orad)
  });
});

},{"grimoirejs-fundamental":2,"grimoirejs-math":3}],2:[function(require,module,exports){
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.fundamental;
},{}],3:[function(require,module,exports){
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS.lib.math;
},{}]},{},[1])


},{"grimoirejs-fundamental":9,"grimoirejs-math":6}],9:[function(require,module,exports){
arguments[4][4][0].apply(exports,arguments)
},{"dup":4}],10:[function(require,module,exports){
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});exports.default=window.GrimoireJS;
},{}],11:[function(require,module,exports){
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _AttributeManager = __webpack_require__(1);
	
	var _AttributeManager2 = _interopRequireDefault(_AttributeManager);
	
	var _Constants = __webpack_require__(6);
	
	var _Constants2 = _interopRequireDefault(_Constants);
	
	var _EEObject = __webpack_require__(11);
	
	var _EEObject2 = _interopRequireDefault(_EEObject);
	
	var _Ensure = __webpack_require__(2);
	
	var _Ensure2 = _interopRequireDefault(_Ensure);
	
	var _IDObject = __webpack_require__(13);
	
	var _IDObject2 = _interopRequireDefault(_IDObject);
	
	var _NSDictionary = __webpack_require__(15);
	
	var _NSDictionary2 = _interopRequireDefault(_NSDictionary);
	
	var _NSIdentity = __webpack_require__(16);
	
	var _NSIdentity2 = _interopRequireDefault(_NSIdentity);
	
	var _NSSet = __webpack_require__(24);
	
	var _NSSet2 = _interopRequireDefault(_NSSet);
	
	var _Utility = __webpack_require__(4);
	
	var _Utility2 = _interopRequireDefault(_Utility);
	
	var _XMLHttpRequestAsync = __webpack_require__(26);
	
	var _XMLHttpRequestAsync2 = _interopRequireDefault(_XMLHttpRequestAsync);
	
	var _XMLReader = __webpack_require__(8);
	
	var _XMLReader2 = _interopRequireDefault(_XMLReader);
	
	var _GrimoireComponent = __webpack_require__(18);
	
	var _GrimoireComponent2 = _interopRequireDefault(_GrimoireComponent);
	
	var _BooleanConverter = __webpack_require__(17);
	
	var _BooleanConverter2 = _interopRequireDefault(_BooleanConverter);
	
	var _StringArrayConverter = __webpack_require__(21);
	
	var _StringArrayConverter2 = _interopRequireDefault(_StringArrayConverter);
	
	var _StringConverter = __webpack_require__(22);
	
	var _StringConverter2 = _interopRequireDefault(_StringConverter);
	
	var _GrimoireInterface = __webpack_require__(3);
	
	var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);
	
	var _GomlInterface = __webpack_require__(5);
	
	var _GomlInterface2 = _interopRequireDefault(_GomlInterface);
	
	var _NodeInterface = __webpack_require__(7);
	
	var _NodeInterface2 = _interopRequireDefault(_NodeInterface);
	
	var _Attribute = __webpack_require__(20);
	
	var _Attribute2 = _interopRequireDefault(_Attribute);
	
	var _Component = __webpack_require__(19);
	
	var _Component2 = _interopRequireDefault(_Component);
	
	var _ComponentDeclaration = __webpack_require__(23);
	
	var _ComponentDeclaration2 = _interopRequireDefault(_ComponentDeclaration);
	
	var _GomlLoader = __webpack_require__(27);
	
	var _GomlLoader2 = _interopRequireDefault(_GomlLoader);
	
	var _GomlNode = __webpack_require__(10);
	
	var _GomlNode2 = _interopRequireDefault(_GomlNode);
	
	var _GomlParser = __webpack_require__(9);
	
	var _GomlParser2 = _interopRequireDefault(_GomlParser);
	
	var _NodeDeclaration = __webpack_require__(25);
	
	var _NodeDeclaration2 = _interopRequireDefault(_NodeDeclaration);
	
	var _NodeUtility = __webpack_require__(14);
	
	var _NodeUtility2 = _interopRequireDefault(_NodeUtility);
	
	var _main = __webpack_require__(28);
	
	var _main2 = _interopRequireDefault(_main);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	var __EXPOSE__ = {
	    "Base": {
	        "AttributeManager": _AttributeManager2.default,
	        "Constants": _Constants2.default,
	        "EEObject": _EEObject2.default,
	        "Ensure": _Ensure2.default,
	        "IDObject": _IDObject2.default,
	        "NSDictionary": _NSDictionary2.default,
	        "NSIdentity": _NSIdentity2.default,
	        "NSSet": _NSSet2.default,
	        "Utility": _Utility2.default,
	        "XMLHttpRequestAsync": _XMLHttpRequestAsync2.default,
	        "XMLReader": _XMLReader2.default
	    },
	    "Components": {
	        "GrimoireComponent": _GrimoireComponent2.default
	    },
	    "Converters": {
	        "BooleanConverter": _BooleanConverter2.default,
	        "StringArrayConverter": _StringArrayConverter2.default,
	        "StringConverter": _StringConverter2.default
	    },
	    "GrimoireInterface": _GrimoireInterface2.default,
	    "Interface": {
	        "GomlInterface": _GomlInterface2.default,
	        "NodeInterface": _NodeInterface2.default
	    },
	    "Node": {
	        "Attribute": _Attribute2.default,
	        "Component": _Component2.default,
	        "ComponentDeclaration": _ComponentDeclaration2.default,
	        "GomlLoader": _GomlLoader2.default,
	        "GomlNode": _GomlNode2.default,
	        "GomlParser": _GomlParser2.default,
	        "NodeDeclaration": _NodeDeclaration2.default,
	        "NodeUtility": _NodeUtility2.default
	    }
	};
	var __BASE__ = (0, _main2.default)();
	Object.assign(__BASE__ || {}, __EXPOSE__);
	exports.default = __BASE__;

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Ensure = __webpack_require__(2);
	
	var _Ensure2 = _interopRequireDefault(_Ensure);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var AttributeManager = function () {
	    function AttributeManager(tag, attributes) {
	        _classCallCheck(this, AttributeManager);
	
	        this.tag = tag;
	        this.attributes = attributes;
	        this._attrBuffer = {};
	        this._watchBuffer = {};
	    }
	
	    _createClass(AttributeManager, [{
	        key: "addAttribute",
	        value: function addAttribute(attr) {
	            if (this.attributes.get(attr.name)) {
	                console.warn("attribute " + attr.name + " is already exist in " + this.tag);
	            }
	            this.attributes.set(attr.name, attr);
	            // check buffer value.
	            var attrBuf = this._attrBuffer[attr.name.fqn];
	            if (attrBuf !== void 0) {
	                attr.Value = attrBuf;
	                delete this._attrBuffer[attr.name.fqn];
	            }
	            var watchBuf = this._watchBuffer[attr.name.fqn];
	            if (watchBuf) {
	                attr.watch(watchBuf, true);
	            }
	        }
	    }, {
	        key: "watch",
	        value: function watch(attrName, watcher) {
	            var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	            attrName = _Ensure2.default.ensureTobeNSIdentity(attrName);
	            var attr = this.attributes.get(attrName);
	            if (!attr) {
	                this._watchBuffer[attrName.fqn] = watcher;
	            } else {
	                attr.watch(watcher, immediate);
	            }
	        }
	    }, {
	        key: "setAttribute",
	        value: function setAttribute(attrName, value) {
	            attrName = _Ensure2.default.ensureTobeNSIdentity(attrName);
	            var attr = this.attributes.get(attrName);
	            if (!attr) {
	                this._attrBuffer[attrName.fqn] = value;
	            } else {
	                attr.Value = value;
	            }
	        }
	    }, {
	        key: "getAttribute",
	        value: function getAttribute(attrName) {
	            attrName = _Ensure2.default.ensureTobeNSIdentity(attrName);
	            var attr = this.attributes.get(attrName);
	            if (!attr) {
	                var attrBuf = this._attrBuffer[attrName.fqn];
	                if (attrBuf !== void 0) {
	                    return attrBuf;
	                }
	                console.warn("attribute \"" + attrName.name + "\" is not found.");
	                return;
	            } else {
	                return attr.Value;
	            }
	        }
	    }, {
	        key: "removeAttribute",
	        value: function removeAttribute(attr) {
	            return this.attributes.delete(attr.name);
	        }
	    }]);
	
	    return AttributeManager;
	}();
	
	exports.default = AttributeManager;

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _GrimoireInterface = __webpack_require__(3);
	
	var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);
	
	var _NSIdentity = __webpack_require__(16);
	
	var _NSIdentity2 = _interopRequireDefault(_NSIdentity);
	
	var _NSDictionary = __webpack_require__(15);
	
	var _NSDictionary2 = _interopRequireDefault(_NSDictionary);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Provides static methods to ensure arguments are valid type.
	 */
	var Ensure = function () {
	    function Ensure() {
	        _classCallCheck(this, Ensure);
	    }
	
	    _createClass(Ensure, null, [{
	        key: "ensureString",
	
	        /**
	         * Ensure specified str being string
	         * @param  {string | number}      str [description]
	         * @return {string}      [description]
	         */
	        value: function ensureString(str) {
	            if (typeof str === "string") {
	                return str;
	            } else if (typeof str === "number") {
	                return str.toString();
	            } else {
	                throw new Error("Specified argument can not convert into string");
	            }
	        }
	        /**
	         * Ensure specified number being number
	         * @param  {string | number}      str [description]
	         * @return {string}      [description]
	         */
	
	    }, {
	        key: "ensureNumber",
	        value: function ensureNumber(num) {
	            if (typeof num === "string") {
	                return parseInt(num, 10);
	            } else if (typeof num === "number") {
	                return num;
	            } else {
	                throw new Error("specified argument can not be converted into number");
	            }
	        }
	    }, {
	        key: "ensureTobeNSIdentity",
	        value: function ensureTobeNSIdentity(name) {
	            if (!name) {
	                return undefined;
	            }
	            if (typeof name === "string") {
	                if (name.indexOf("|") !== -1) {
	                    return _NSIdentity2.default.fromFQN(name);
	                }
	                return new _NSIdentity2.default(name);
	            } else {
	                return name;
	            }
	        }
	    }, {
	        key: "ensureTobeNSIdentityArray",
	        value: function ensureTobeNSIdentityArray(names) {
	            if (!names) {
	                return [];
	            }
	            var newArr = [];
	            for (var i = 0; i < names.length; i++) {
	                newArr.push(this.ensureTobeNSIdentity(names[i]));
	            }
	            return newArr;
	        }
	    }, {
	        key: "ensureTobeNSDictionary",
	        value: function ensureTobeNSDictionary(dict, defaultNamespace) {
	            if (!dict) {
	                return new _NSDictionary2.default();
	            }
	            if (dict instanceof _NSDictionary2.default) {
	                return dict;
	            } else {
	                var newDict = new _NSDictionary2.default();
	                for (var key in dict) {
	                    newDict.set(new _NSIdentity2.default(defaultNamespace, key), dict[key]);
	                }
	                return newDict;
	            }
	        }
	    }, {
	        key: "ensureTobeMessage",
	        value: function ensureTobeMessage(message) {
	            if (message.startsWith("$")) {
	                if (message.startsWith("$$")) {
	                    return message;
	                } else {
	                    return "$" + message;
	                }
	            } else {
	                return "$$" + message;
	            }
	        }
	    }, {
	        key: "ensureTobeComponentConstructor",
	        value: function ensureTobeComponentConstructor(c) {
	            if (typeof c === "function") {
	                return c;
	            } else if (typeof c === "string") {
	                return _GrimoireInterface2.default.componentDeclarations.get(c).ctor;
	            } else {
	                return _GrimoireInterface2.default.componentDeclarations.get(c).ctor;
	            }
	        }
	    }]);
	
	    return Ensure;
	}();
	
	exports.default = Ensure;

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Utility = __webpack_require__(4);
	
	var _Utility2 = _interopRequireDefault(_Utility);
	
	var _GomlInterface = __webpack_require__(5);
	
	var _GomlInterface2 = _interopRequireDefault(_GomlInterface);
	
	var _BooleanConverter = __webpack_require__(17);
	
	var _BooleanConverter2 = _interopRequireDefault(_BooleanConverter);
	
	var _GrimoireComponent = __webpack_require__(18);
	
	var _GrimoireComponent2 = _interopRequireDefault(_GrimoireComponent);
	
	var _StringArrayConverter = __webpack_require__(21);
	
	var _StringArrayConverter2 = _interopRequireDefault(_StringArrayConverter);
	
	var _StringConverter = __webpack_require__(22);
	
	var _StringConverter2 = _interopRequireDefault(_StringConverter);
	
	var _Constants = __webpack_require__(6);
	
	var _Constants2 = _interopRequireDefault(_Constants);
	
	var _ComponentDeclaration = __webpack_require__(23);
	
	var _ComponentDeclaration2 = _interopRequireDefault(_ComponentDeclaration);
	
	var _Component = __webpack_require__(19);
	
	var _Component2 = _interopRequireDefault(_Component);
	
	var _NSSet = __webpack_require__(24);
	
	var _NSSet2 = _interopRequireDefault(_NSSet);
	
	var _NodeDeclaration = __webpack_require__(25);
	
	var _NodeDeclaration2 = _interopRequireDefault(_NodeDeclaration);
	
	var _NSIdentity = __webpack_require__(16);
	
	var _NSIdentity2 = _interopRequireDefault(_NSIdentity);
	
	var _NSDictionary = __webpack_require__(15);
	
	var _NSDictionary2 = _interopRequireDefault(_NSDictionary);
	
	var _Ensure = __webpack_require__(2);
	
	var _Ensure2 = _interopRequireDefault(_Ensure);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator.throw(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	
	var GrimoireInterfaceImpl = function () {
	    function GrimoireInterfaceImpl() {
	        _classCallCheck(this, GrimoireInterfaceImpl);
	
	        this.nodeDeclarations = new _NSDictionary2.default();
	        this.converters = new _NSDictionary2.default();
	        this.componentDeclarations = new _NSDictionary2.default();
	        this.rootNodes = {};
	        this.loadTasks = [];
	        this.lib = {};
	        this.nodeDictionary = {};
	        this.componentDictionary = {};
	        this.companion = new _NSDictionary2.default();
	        this.initializedEventHandler = [];
	        this.debug = false;
	    }
	    /**
	     * Generate namespace helper function
	     * @param  {string} ns namespace URI to be used
	     * @return {[type]}    the namespaced identity
	     */
	
	
	    _createClass(GrimoireInterfaceImpl, [{
	        key: "ns",
	        value: function ns(_ns) {
	            return function (name) {
	                return new _NSIdentity2.default(_ns, name);
	            };
	        }
	    }, {
	        key: "initialize",
	        value: function initialize() {
	            this.registerConverter("String", _StringConverter2.default);
	            this.registerConverter("StringArray", _StringArrayConverter2.default);
	            this.registerConverter("Boolean", _BooleanConverter2.default);
	            this.registerComponent("GrimoireComponent", _GrimoireComponent2.default);
	            this.registerNode("grimoire-node-base", ["GrimoireComponent"]);
	        }
	        /**
	         * Register plugins
	         * @param  {(}      loadTask [description]
	         * @return {[type]}          [description]
	         */
	
	    }, {
	        key: "register",
	        value: function register(loadTask) {
	            this.loadTasks.push(loadTask);
	        }
	    }, {
	        key: "resolvePlugins",
	        value: function resolvePlugins() {
	            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	                var i;
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                i = 0;
	
	                            case 1:
	                                if (!(i < this.loadTasks.length)) {
	                                    _context.next = 7;
	                                    break;
	                                }
	
	                                _context.next = 4;
	                                return this.loadTasks[i]();
	
	                            case 4:
	                                i++;
	                                _context.next = 1;
	                                break;
	
	                            case 7:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, this);
	            }));
	        }
	        /**
	         * register custom component
	         * @param  {string                |   NSIdentity} name          [description]
	         * @param  {IAttributeDeclaration }} attributes           [description]
	         * @param  {Object                |   (new                 (}           obj           [description]
	         * @return {[type]}                       [description]
	         */
	
	    }, {
	        key: "registerComponent",
	        value: function registerComponent(name, obj, superComponent) {
	            name = _Ensure2.default.ensureTobeNSIdentity(name);
	            if (this.componentDeclarations.get(name)) {
	                throw new Error("component " + name.fqn + " is already registerd.");
	            }
	            if (this.debug && !_Utility2.default.isCamelCase(name.name)) {
	                console.warn("component " + name.name + " is registerd. but,it should be 'CamelCase'.");
	            }
	            obj = this._ensureTobeComponentConstructor(obj, this._ensureNameTobeConstructor(superComponent));
	            var attrs = obj["attributes"] || {};
	            for (var key in attrs) {
	                if (attrs[key].default === void 0) {
	                    throw new Error("default value of attribute " + key + " in " + name.fqn + " must be not 'undefined'.");
	                }
	            }
	            var dec = new _ComponentDeclaration2.default(name, attrs, obj);
	            this.componentDeclarations.set(name, dec);
	            return dec;
	        }
	    }, {
	        key: "registerNode",
	        value: function registerNode(name, requiredComponents, defaults, superNode) {
	            name = _Ensure2.default.ensureTobeNSIdentity(name);
	            if (this.nodeDeclarations.get(name)) {
	                throw new Error("gomlnode " + name.fqn + " is already registerd.");
	            }
	            if (this.debug && !_Utility2.default.isSnakeCase(name.name)) {
	                console.warn("node " + name.name + " is registerd. but,it should be 'snake-case'.");
	            }
	            requiredComponents = _Ensure2.default.ensureTobeNSIdentityArray(requiredComponents);
	            defaults = _Ensure2.default.ensureTobeNSDictionary(defaults, name.ns);
	            superNode = _Ensure2.default.ensureTobeNSIdentity(superNode);
	            this.nodeDeclarations.set(name, new _NodeDeclaration2.default(name, _NSSet2.default.fromArray(requiredComponents), defaults, superNode));
	        }
	    }, {
	        key: "registerConverter",
	        value: function registerConverter(name, converter) {
	            name = _Ensure2.default.ensureTobeNSIdentity(name);
	            this.converters.set(name, { name: name, convert: converter });
	        }
	    }, {
	        key: "addRootNode",
	        value: function addRootNode(tag, rootNode) {
	            if (!rootNode) {
	                throw new Error("can not register null to rootNodes.");
	            }
	            this.rootNodes[rootNode.id] = rootNode;
	            rootNode.companion.set(this.ns(_Constants2.default.defaultNamespace)("scriptElement"), tag);
	            // check tree constraint.
	            var errorMessages = rootNode.callRecursively(function (n) {
	                return n.checkTreeConstraints();
	            }).reduce(function (list, current) {
	                return list.concat(current);
	            }).filter(function (error) {
	                return error;
	            });
	            if (errorMessages.length !== 0) {
	                var message = errorMessages.reduce(function (m, current) {
	                    return m + "\n" + current;
	                });
	                throw new Error("tree constraint is not satisfied.\n" + message);
	            }
	            // awake and mount tree.
	            rootNode.setMounted(true);
	            rootNode.broadcastMessage("treeInitialized", {
	                ownerScriptTag: tag,
	                id: rootNode.id
	            });
	            tag.setAttribute("x-rootNodeId", rootNode.id);
	            this._onTreeInitialized(tag);
	            return rootNode.id;
	        }
	    }, {
	        key: "getRootNode",
	        value: function getRootNode(scriptTag) {
	            var id = scriptTag.getAttribute("x-rootNodeId");
	            return this.rootNodes[id];
	        }
	    }, {
	        key: "noConflict",
	        value: function noConflict() {
	            window["gr"] = this.noConflictPreserve;
	        }
	    }, {
	        key: "queryRootNodes",
	        value: function queryRootNodes(query) {
	            var scriptTags = document.querySelectorAll(query);
	            var nodes = [];
	            for (var i = 0; i < scriptTags.length; i++) {
	                var node = this.getRootNode(scriptTags.item(i));
	                if (node) {
	                    nodes.push(node);
	                }
	            }
	            return nodes;
	        }
	        /**
	         * This method is not for users.
	         * Just for unit testing.
	         *
	         * Clear all configuration that GrimoireInterface contain.
	         */
	
	    }, {
	        key: "clear",
	        value: function clear() {
	            this.nodeDeclarations.clear();
	            this.componentDeclarations.clear();
	            this.converters.clear();
	            for (var key in this.rootNodes) {
	                delete this.rootNodes[key];
	            }
	            this.loadTasks.splice(0, this.loadTasks.length);
	            this.initialize();
	        }
	        /**
	         * Ensure the given object or constructor to be an constructor inherits Component;
	         * @param  {Object | (new ()=> Component} obj [The variable need to be ensured.]
	         * @return {[type]}      [The constructor inherits Component]
	         */
	
	    }, {
	        key: "_ensureTobeComponentConstructor",
	        value: function _ensureTobeComponentConstructor(obj, baseConstructor) {
	            if (typeof obj === "function") {
	                if (!(obj.prototype instanceof _Component2.default) && obj !== _Component2.default) {
	                    throw new Error("Component constructor must extends Component class.");
	                }
	                return obj;
	            } else if ((typeof obj === "undefined" ? "undefined" : _typeof(obj)) === "object") {
	                var _ret = function () {
	                    if (baseConstructor && !(baseConstructor.prototype instanceof _Component2.default)) {
	                        throw new Error("Base component comstructor must extends Compoent class.");
	                    }
	                    var ctor = baseConstructor || _Component2.default;
	                    var newCtor = function newCtor() {
	                        ctor.call(this);
	                    };
	                    var properties = {};
	                    for (var key in obj) {
	                        if (key === "attributes") {
	                            continue;
	                        }
	                        properties[key] = { value: obj[key] };
	                    }
	                    var attributes = {};
	                    for (var _key in ctor["attributes"]) {
	                        attributes[_key] = ctor["attributes"][_key];
	                    }
	                    for (var _key2 in obj["attributes"]) {
	                        attributes[_key2] = obj["attributes"][_key2];
	                    }
	                    newCtor.prototype = Object.create(ctor.prototype, properties);
	                    Object.defineProperty(newCtor, "attributes", {
	                        value: attributes
	                    });
	                    obj = newCtor;
	                    return {
	                        v: obj
	                    };
	                }();
	
	                if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
	            }
	            return _Component2.default;
	        }
	    }, {
	        key: "_ensureNameTobeConstructor",
	        value: function _ensureNameTobeConstructor(component) {
	            if (!component) {
	                return null;
	            }
	            if (typeof component === "function") {
	                return component;
	            } else if (typeof component === "string") {
	                return this._ensureNameTobeConstructor(_Ensure2.default.ensureTobeNSIdentity(component));
	            } else {
	                //here NSIdentity.
	                var c = this.componentDeclarations.get(component);
	                if (!c) {
	                    return null;
	                }
	                return c.ctor;
	            }
	        }
	    }, {
	        key: "_onTreeInitialized",
	        value: function _onTreeInitialized(tag) {
	            this.initializedEventHandler.forEach(function (h) {
	                h(tag.id, tag.className, tag);
	            });
	        }
	    }]);
	
	    return GrimoireInterfaceImpl;
	}();
	
	var context = new GrimoireInterfaceImpl();
	var obtainGomlInterface = function obtainGomlInterface(query) {
	    if (typeof query === "string") {
	        // return GomlInterfaceGenerator(context.queryRootNodes(query));
	        var gomlContext = new _GomlInterface2.default(context.queryRootNodes(query));
	        var queryFunc = gomlContext.queryFunc.bind(gomlContext);
	        Object.setPrototypeOf(queryFunc, gomlContext);
	        return queryFunc;
	    } else if (typeof query === "function") {
	        context.initializedEventHandler.push(query);
	    } else {
	        var _gomlContext = new _GomlInterface2.default(query);
	        var _queryFunc = _gomlContext.queryFunc.bind(_gomlContext);
	        Object.setPrototypeOf(_queryFunc, _gomlContext);
	        return _queryFunc;
	    }
	};
	// const bindedFunction = obtainGomlInterface.bind(context);
	Object.setPrototypeOf(obtainGomlInterface, context);
	exports.default = obtainGomlInterface;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _GrimoireInterface = __webpack_require__(3);
	
	var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Utility = function () {
	    function Utility() {
	        _classCallCheck(this, Utility);
	    }
	
	    _createClass(Utility, null, [{
	        key: "w",
	        value: function w(message) {
	            if (_GrimoireInterface2.default.debug) {
	                console.warn(message);
	            }
	        }
	    }, {
	        key: "isCamelCase",
	        value: function isCamelCase(str) {
	            return (/^[A-Z][a-zA-Z0-9]*$/.test(str)
	            );
	        }
	    }, {
	        key: "isSnakeCase",
	        value: function isSnakeCase(str) {
	            return (/^[a-z0-9\-]+$/.test(str)
	            );
	        }
	    }]);
	
	    return Utility;
	}();
	
	exports.default = Utility;

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Constants = __webpack_require__(6);
	
	var _Constants2 = _interopRequireDefault(_Constants);
	
	var _GrimoireInterface = __webpack_require__(3);
	
	var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);
	
	var _NodeInterface = __webpack_require__(7);
	
	var _NodeInterface2 = _interopRequireDefault(_NodeInterface);
	
	var _GomlNode = __webpack_require__(10);
	
	var _GomlNode2 = _interopRequireDefault(_GomlNode);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Provides interfaces to treat whole goml tree for each.
	 */
	var GomlInterface = function () {
	    function GomlInterface(rootNodes) {
	        _classCallCheck(this, GomlInterface);
	
	        this.rootNodes = rootNodes;
	    }
	
	    _createClass(GomlInterface, [{
	        key: "getNodeById",
	        value: function getNodeById(id) {
	            var _this = this;
	
	            return new Array(this.rootNodes.length).map(function (v, i) {
	                return _GomlNode2.default.fromElement(_this.rootNodes[i].element.ownerDocument.getElementById(id));
	            });
	        }
	    }, {
	        key: "queryFunc",
	        value: function queryFunc(query) {
	            return new _NodeInterface2.default(this.queryNodes(query));
	        }
	    }, {
	        key: "queryNodes",
	        value: function queryNodes(query) {
	            return this.rootNodes.map(function (root) {
	                var nodelist = root.element.ownerDocument.querySelectorAll(query);
	                var nodes = [];
	                for (var i = 0; i < nodelist.length; i++) {
	                    var node = _GrimoireInterface2.default.nodeDictionary[nodelist.item(i).getAttribute(_Constants2.default.x_gr_id)];
	                    if (node) {
	                        nodes.push(node);
	                    }
	                }
	                return nodes;
	            });
	        }
	    }]);
	
	    return GomlInterface;
	}();
	
	exports.default = GomlInterface;

/***/ },
/* 6 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var Constants = function () {
	    function Constants() {
	        _classCallCheck(this, Constants);
	    }
	
	    _createClass(Constants, null, [{
	        key: "defaultNamespace",
	        get: function get() {
	            return "HTTP://GRIMOIRE.GL/NS/DEFAULT";
	        }
	    }, {
	        key: "x_gr_id",
	        get: function get() {
	            return "x-gr-id";
	        }
	    }]);
	
	    return Constants;
	}();
	
	exports.default = Constants;

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Constants = __webpack_require__(6);
	
	var _Constants2 = _interopRequireDefault(_Constants);
	
	var _GrimoireInterface = __webpack_require__(3);
	
	var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);
	
	var _XMLReader = __webpack_require__(8);
	
	var _XMLReader2 = _interopRequireDefault(_XMLReader);
	
	var _GomlParser = __webpack_require__(9);
	
	var _GomlParser2 = _interopRequireDefault(_GomlParser);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * 複数のノードを対象とした操作を提供するインタフェース
	 */
	var NodeInterface = function () {
	    function NodeInterface(nodes) {
	        _classCallCheck(this, NodeInterface);
	
	        this.nodes = nodes;
	        if (!nodes) {
	            throw new Error("nodes is null");
	        }
	    }
	
	    _createClass(NodeInterface, [{
	        key: "_queryComponents",
	        value: function _queryComponents(query) {
	            return this.nodes.map(function (nodes) {
	                return nodes.map(function (node) {
	                    var componentElements = node.componentsElement.querySelectorAll(query);
	                    var components = [];
	                    for (var i = 0; i < componentElements.length; i++) {
	                        var elem = componentElements[i];
	                        var component = _GrimoireInterface2.default.componentDictionary[elem.getAttribute(_Constants2.default.x_gr_id)];
	                        if (component) {
	                            components.push(component);
	                        }
	                    }
	                    return components;
	                });
	            });
	        }
	    }, {
	        key: "isEmpty",
	        value: function isEmpty() {
	            return this.count() === 0;
	        }
	    }, {
	        key: "get",
	        value: function get(i1, i2) {
	            var _this = this;
	
	            if (i1 === void 0) {
	                var first = this.first();
	                if (!first) {
	                    throw new Error("this NodeInterface is empty.");
	                } else {
	                    return first;
	                }
	            } else if (i2 === void 0) {
	                if (this.count() <= i1) {
	                    throw new Error("index out of range.");
	                } else {
	                    var _ret = function () {
	                        var c = i1;
	                        var returnNode = null;
	                        _this.forEach(function (node) {
	                            if (c === 0) {
	                                returnNode = node;
	                            }
	                            c--;
	                        });
	                        return {
	                            v: returnNode
	                        };
	                    }();
	
	                    if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
	                }
	            } else {
	                if (this.nodes.length <= i1 || this.nodes[i1].length <= i2) {
	                    throw new Error("index out of range.");
	                } else {
	                    return this.nodes[i1][i2];
	                }
	            }
	        }
	    }, {
	        key: "getAttribute",
	        value: function getAttribute(attrName) {
	            var first = this.first();
	            if (!first) {
	                throw new Error("this NodeInterface is empty.");
	            }
	            return first.getAttribute(attrName);
	        }
	    }, {
	        key: "setAttribute",
	        value: function setAttribute(attrName, value) {
	            this.forEach(function (node) {
	                node.setAttribute(attrName, value);
	            });
	        }
	        /**
	         * 対象ノードにイベントリスナを追加します。
	         * @param {string}   eventName [description]
	         * @param {Function} listener  [description]
	         */
	
	    }, {
	        key: "on",
	        value: function on(eventName, listener) {
	            this.forEach(function (node) {
	                node.on(eventName, listener);
	            });
	            return this;
	        }
	        /**
	         * 対象ノードに指定したイベントリスナが登録されていれば削除します
	         * @param {string}   eventName [description]
	         * @param {Function} listener  [description]
	         */
	
	    }, {
	        key: "off",
	        value: function off(eventName, listener) {
	            this.forEach(function (node) {
	                node.removeListener(eventName, listener);
	            });
	            return this;
	        }
	        /**
	         * このノードインタフェースが対象とするノードそれぞれに、
	         * タグで指定したノードを子要素として追加します。
	         * @param {string} tag [description]
	         */
	
	    }, {
	        key: "append",
	        value: function append(tag) {
	            this.forEach(function (node) {
	                var elems = _XMLReader2.default.parseXML(tag);
	                elems.forEach(function (elem) {
	                    var child = _GomlParser2.default.parse(elem, null, null);
	                    node.addChild(child);
	                });
	            });
	            return this;
	        }
	        /**
	         * このノードインタフェースが対象とするノードの子に、
	         * 指定されたノードが存在すれば削除します。
	         * @param {GomlNode} child [description]
	         */
	
	    }, {
	        key: "remove",
	        value: function remove() {
	            this.forEach(function (node) {
	                node.delete();
	            });
	            return this;
	        }
	        /**
	         * このノードインタフェースが対象とするノードに対して反復処理を行います
	         * @param  {GomlNode} callback [description]
	         * @return {[type]}            [description]
	         */
	
	    }, {
	        key: "forEach",
	        value: function forEach(callback) {
	            this.nodes.forEach(function (array, gomlIndex) {
	                array.forEach(function (node, nodeIndex) {
	                    callback(node, gomlIndex, nodeIndex);
	                });
	            });
	            return this;
	        }
	    }, {
	        key: "find",
	        value: function find(predicate) {
	            var nodes = this.nodes;
	            for (var i = 0; i < nodes.length; i++) {
	                var array = nodes[i];
	                for (var j = 0; j < array.length; j++) {
	                    var node = array[j];
	                    if (predicate(node, i, j)) {
	                        return node;
	                    }
	                }
	            }
	            return null;
	        }
	    }, {
	        key: "watch",
	        value: function watch(attrName, watcher) {
	            var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	            this.forEach(function (node) {
	                node.watch(attrName, watcher, immediate);
	            });
	        }
	        /**
	         * このノードインタフェースが対象とするノードを有効、または無効にします。
	         * @param {boolean} enable [description]
	         */
	
	    }, {
	        key: "setEnable",
	        value: function setEnable(enable) {
	            this.forEach(function (node) {
	                node.enabled = !!enable;
	            });
	            return this;
	        }
	        /**
	         * このノードインタフェースが対象とするノードのそれぞれの子ノードを対象とする、
	         * 新しいノードインタフェースを取得します。
	         * @return {NodeInterface} [description]
	         */
	
	    }, {
	        key: "children",
	        value: function children() {
	            var children = this.nodes.map(function (nodes) {
	                return nodes.map(function (node) {
	                    return node.children;
	                }).reduce(function (pre, cur) {
	                    return pre.concat(cur);
	                });
	            });
	            return new NodeInterface(children);
	        }
	        /**
	         * 対象ノードにコンポーネントをアタッチします。
	         * @param {Component} component [description]
	         */
	
	    }, {
	        key: "addComponent",
	        value: function addComponent(componentId) {
	            var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	
	            this.forEach(function (node) {
	                node.addComponent(componentId, attributes);
	            });
	            return this;
	        }
	        /**
	         * 最初の対象ノードを取得する
	         * @return {GomlNode} [description]
	         */
	
	    }, {
	        key: "first",
	        value: function first() {
	            return this.find(function () {
	                return true;
	            });
	        }
	        /**
	         * 対象となる唯一のノードを取得する。
	         * 対象が存在しない、あるいは複数存在するときは例外を投げる。
	         * @return {GomlNode} [description]
	         */
	
	    }, {
	        key: "single",
	        value: function single() {
	            if (this.count() !== 1) {
	                throw new Error("this nodeInterface is not single.");
	            }
	            var first = this.first();
	            if (!first) {
	                throw new Error("this nodeInterface is not single,but is empty.");
	            }
	            return first;
	        }
	        /**
	         * 対象となるノードの個数を取得する
	         * @return {number} [description]
	         */
	
	    }, {
	        key: "count",
	        value: function count() {
	            if (this.nodes.length === 0) {
	                return 0;
	            }
	            var counts = this.nodes.map(function (nodes) {
	                return nodes.length;
	            });
	            return counts.reduce(function (total, current) {
	                return total + current;
	            }, 0);
	        }
	    }, {
	        key: "filter",
	        value: function filter(predicate) {
	            var newNodes = this.nodes.map(function (nodes, gomlIndex) {
	                return nodes.filter(function (node, nodeIndex) {
	                    return predicate(node, gomlIndex, nodeIndex);
	                });
	            });
	            return new NodeInterface(newNodes);
	        }
	    }, {
	        key: "toArray",
	        value: function toArray() {
	            return this.nodes.reduce(function (pre, current) {
	                return pre.concat(current);
	            }, []);
	        }
	    }]);
	
	    return NodeInterface;
	}();
	
	exports.default = NodeInterface;

/***/ },
/* 8 */
/***/ function(module, exports) {

	'use strict';
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Provides safe xml read feature.
	 */
	var XMLReader = function () {
	    function XMLReader() {
	        _classCallCheck(this, XMLReader);
	    }
	
	    _createClass(XMLReader, null, [{
	        key: 'parseXML',
	        value: function parseXML(doc, rootElementName) {
	            var isParseError = function isParseError(parsedDocument) {
	                var defaultError = console.error;
	                console.error = function () {}; //disable error message!
	                var errorneousParse = XMLReader._parser.parseFromString('<', 'text/xml');
	                delete console.error; //restore...
	                console.error = defaultError;
	                if (errorneousParse.documentURI === void 0) {
	                    return false;
	                }
	                var parsererrorNS = errorneousParse.getElementsByTagName("parsererror").item(0).namespaceURI;
	                if (parsererrorNS === 'http://www.w3.org/1999/xhtml') {
	                    return parsedDocument.getElementsByTagName("parsererror").length > 0;
	                }
	                return parsedDocument.getElementsByTagNameNS(parsererrorNS, 'parsererror').length > 0;
	            };
	            var parsed = XMLReader._parser.parseFromString(doc, "text/xml");
	            if (isParseError(parsed)) {
	                throw new Error('Error parsing XML');
	            }
	            if (rootElementName) {
	                if (parsed.documentElement.tagName.toUpperCase() !== rootElementName.toUpperCase()) {
	                    throw new Error("Specified document is invalid.");
	                } // TODO should throw more detail error
	            }
	            return [parsed.documentElement]; // TODO: implenent!
	        }
	    }, {
	        key: 'getElements',
	        value: function getElements(elem, name) {
	            var result = [];
	            var elems = elem.getElementsByTagName(name);
	            for (var i = 0; i < elems.length; i++) {
	                result.push(elems.item(i));
	            }
	            return result;
	        }
	    }, {
	        key: 'getSingleElement',
	        value: function getSingleElement(elem, name, mandatory) {
	            var result = XMLReader.getElements(elem, name);
	            if (result.length === 1) {
	                return result[0];
	            } else if (result.length === 0) {
	                if (mandatory) {
	                    throw new Error('The mandatory element ' + name + ' was required, but not found');
	                } else {
	                    return null;
	                }
	            } else {
	                throw new Error('The element ' + name + ' requires to exist in single. But there is ' + result.length + ' count of elements');
	            }
	        }
	    }, {
	        key: 'getAttribute',
	        value: function getAttribute(elem, name, mandatory) {
	            var result = elem.attributes.getNamedItem(name);
	            if (result) {
	                return result.value;
	            } else if (mandatory) {
	                throw new Error('The mandatory attribute ' + name + ' was required, but it was not found');
	            } else {
	                return null;
	            }
	        }
	    }, {
	        key: 'getAttributeFloat',
	        value: function getAttributeFloat(elem, name, mandatory) {
	            var resultStr = XMLReader.getAttribute(elem, name, mandatory);
	            return parseFloat(resultStr);
	        }
	    }, {
	        key: 'getAttributeInt',
	        value: function getAttributeInt(elem, name, mandatory) {
	            var resultStr = XMLReader.getAttribute(elem, name, mandatory);
	            return parseInt(resultStr, 10);
	        }
	    }, {
	        key: 'getChildElements',
	        value: function getChildElements(elem) {
	            var children = elem.childNodes;
	            var result = [];
	            for (var i = 0; i < children.length; i++) {
	                if (children.item(i) instanceof Element) {
	                    result.push(children.item(i));
	                }
	            }
	            return result;
	        }
	    }, {
	        key: 'getAttributes',
	        value: function getAttributes(elem, ns) {
	            var result = {};
	            var attrs = elem.attributes;
	            for (var i = 0; i < attrs.length; i++) {
	                var attr = attrs.item(i);
	                if (!ns || attr.namespaceURI === ns) {
	                    result[attr.localName] = attr.value;
	                }
	            }
	            return result;
	        }
	    }]);
	
	    return XMLReader;
	}();
	
	XMLReader._parser = new DOMParser();
	exports.default = XMLReader;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _GomlNode = __webpack_require__(10);
	
	var _GomlNode2 = _interopRequireDefault(_GomlNode);
	
	var _GrimoireInterface = __webpack_require__(3);
	
	var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Parser of Goml to Node utilities.
	 * This class do not store any nodes and goml properties.
	 */
	var GomlParser = function () {
	    function GomlParser() {
	        _classCallCheck(this, GomlParser);
	    }
	
	    _createClass(GomlParser, null, [{
	        key: "parse",
	
	        /**
	         * Domをパースする
	         * @param  {Element}           source    [description]
	         * @param  {GomlNode}          parent    あればこのノードにaddChildされる
	         * @return {GomlNode}                    ルートノード
	         */
	        value: function parse(source, parent, scriptTag) {
	            var newNode = GomlParser._createNode(source);
	            if (!newNode) {
	                // when specified node could not be found
	                console.warn("\"" + source.tagName + "\" was not parsed.");
	                return null;
	            }
	            // Parse children recursively
	            var children = source.childNodes;
	            var childNodeElements = []; // for parse after .Components has resolved.
	            if (children && children.length !== 0) {
	                var removeTarget = [];
	                for (var i = 0; i < children.length; i++) {
	                    var child = children.item(i);
	                    if (!GomlParser._isElement(child)) {
	                        removeTarget.push(child);
	                        continue;
	                    }
	                    if (this._isComponentsTag(child)) {
	                        // parse as components
	                        GomlParser._parseComponents(newNode, child);
	                        removeTarget.push(child);
	                    } else {
	                        // parse as child node.
	                        childNodeElements.push(child);
	                    }
	                }
	                // remove unused elements
	                for (var _i = 0; _i < removeTarget.length; _i++) {
	                    source.removeChild(removeTarget[_i]);
	                }
	            }
	            // generate tree
	            if (parent) {
	                parent.addChild(newNode, null, false);
	            }
	            childNodeElements.forEach(function (child) {
	                GomlParser.parse(child, newNode, null);
	            });
	            return newNode;
	        }
	        /**
	         * GomlNodeのインスタンス化。GrimoireInterfaceへの登録
	         * @param  {HTMLElement}      elem         [description]
	         * @param  {GomlConfigurator} configurator [description]
	         * @return {GomlTreeNodeBase}              [description]
	         */
	
	    }, {
	        key: "_createNode",
	        value: function _createNode(elem) {
	            var tagName = elem.localName;
	            var recipe = _GrimoireInterface2.default.nodeDeclarations.get(elem);
	            if (!recipe) {
	                throw new Error("Tag \"" + tagName + "\" is not found.");
	            }
	            return new _GomlNode2.default(recipe, elem);
	        }
	        /**
	         * .COMPONENTSのパース。
	         * @param {GomlNode} node          アタッチされるコンポーネント
	         * @param {Element}  componentsTag .COMPONENTSタグ
	         */
	
	    }, {
	        key: "_parseComponents",
	        value: function _parseComponents(node, componentsTag) {
	            var componentNodes = componentsTag.childNodes;
	            if (!componentNodes) {
	                return;
	            }
	            for (var i = 0; i < componentNodes.length; i++) {
	                var componentNode = componentNodes.item(i);
	                if (!GomlParser._isElement(componentNode)) {
	                    continue; // Skip if the node was not element
	                }
	                var componentDecl = _GrimoireInterface2.default.componentDeclarations.get(componentNode);
	                if (!componentDecl) {
	                    throw new Error("Component " + componentNode.tagName + " is not found.");
	                }
	                var component = componentDecl.generateInstance(componentNode);
	                node._addComponentDirectly(component, false);
	            }
	        }
	    }, {
	        key: "_isElement",
	        value: function _isElement(node) {
	            return node.nodeType === Node.ELEMENT_NODE;
	        }
	    }, {
	        key: "_isComponentsTag",
	        value: function _isComponentsTag(element) {
	            var regexToFindComponent = /\.COMPONENTS$/mi; // TODO might needs to fix
	            return regexToFindComponent.test(element.nodeName);
	        }
	    }]);
	
	    return GomlParser;
	}();
	
	exports.default = GomlParser;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _AttributeManager = __webpack_require__(1);
	
	var _AttributeManager2 = _interopRequireDefault(_AttributeManager);
	
	var _Utility = __webpack_require__(4);
	
	var _Utility2 = _interopRequireDefault(_Utility);
	
	var _Constants = __webpack_require__(6);
	
	var _Constants2 = _interopRequireDefault(_Constants);
	
	var _GomlParser = __webpack_require__(9);
	
	var _GomlParser2 = _interopRequireDefault(_GomlParser);
	
	var _XMLReader = __webpack_require__(8);
	
	var _XMLReader2 = _interopRequireDefault(_XMLReader);
	
	var _GrimoireInterface = __webpack_require__(3);
	
	var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);
	
	var _EEObject2 = __webpack_require__(11);
	
	var _EEObject3 = _interopRequireDefault(_EEObject2);
	
	var _NodeUtility = __webpack_require__(14);
	
	var _NodeUtility2 = _interopRequireDefault(_NodeUtility);
	
	var _NSDictionary = __webpack_require__(15);
	
	var _NSDictionary2 = _interopRequireDefault(_NSDictionary);
	
	var _NSIdentity = __webpack_require__(16);
	
	var _NSIdentity2 = _interopRequireDefault(_NSIdentity);
	
	var _Ensure = __webpack_require__(2);
	
	var _Ensure2 = _interopRequireDefault(_Ensure);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var GomlNode = function (_EEObject) {
	    _inherits(GomlNode, _EEObject);
	
	    /**
	     * create new instance.
	     * @param  {NodeDeclaration} recipe  作成するノードのDeclaration
	     * @param  {Element}         element 対応するDomElement
	     * @return {[type]}                  [description]
	     */
	    function GomlNode(recipe, element) {
	        _classCallCheck(this, GomlNode);
	
	        var _this = _possibleConstructorReturn(this, (GomlNode.__proto__ || Object.getPrototypeOf(GomlNode)).call(this));
	
	        _this.children = [];
	        _this._parent = null;
	        _this._root = null;
	        _this._mounted = false;
	        _this._enabled = true;
	        _this._messageBuffer = [];
	        _this._tree = null;
	        _this._companion = new _NSDictionary2.default();
	        _this._deleted = false;
	        _this._attrBuffer = {};
	        _this._defaultValueResolved = false;
	        if (!recipe) {
	            throw new Error("recipe must not be null");
	        }
	        _this.nodeDeclaration = recipe;
	        _this.element = element ? element : document.createElementNS(recipe.name.ns, recipe.name.name); // TODO Could be undefined or null?
	        _this.componentsElement = document.createElement("COMPONENTS");
	        _this._root = _this;
	        _this._tree = (0, _GrimoireInterface2.default)([_this]);
	        _this._components = [];
	        _this._attributeManager = new _AttributeManager2.default(recipe.name.name, new _NSDictionary2.default());
	        _this.element.setAttribute(_Constants2.default.x_gr_id, _this.id);
	        var defaultComponentNames = recipe.defaultComponentsActual;
	        // instanciate default components
	        defaultComponentNames.toArray().map(function (id) {
	            _this.addComponent(id, null, true);
	        });
	        // register to GrimoireInterface.
	        _GrimoireInterface2.default.nodeDictionary[_this.id] = _this;
	        return _this;
	    }
	    /**
	     * Get actual goml node from element of xml tree.
	     * @param  {Element}  elem [description]
	     * @return {GomlNode}      [description]
	     */
	
	
	    _createClass(GomlNode, [{
	        key: "getChildrenByClass",
	
	        /**
	         * search from children node by class property.
	         * return all nodes has same class as given.
	         * @param  {string}     className [description]
	         * @return {GomlNode[]}           [description]
	         */
	        value: function getChildrenByClass(className) {
	            var nodes = this.element.getElementsByClassName(className);
	            var array = new Array(nodes.length);
	            for (var i = 0; i < nodes.length; i++) {
	                array[i] = GomlNode.fromElement(nodes.item(i));
	            }
	            return array;
	        }
	        /**
	         * search from children node by name property.
	         * return all nodes has same name as given.
	         * @param  {string}     nodeName [description]
	         * @return {GomlNode[]}          [description]
	         */
	
	    }, {
	        key: "getChildrenByNodeName",
	        value: function getChildrenByNodeName(nodeName) {
	            var nodes = this.element.getElementsByTagName(nodeName);
	            var array = new Array(nodes.length);
	            for (var i = 0; i < nodes.length; i++) {
	                array[i] = GomlNode.fromElement(nodes.item(i));
	            }
	            return array;
	        }
	        /**
	         * detach and delete this node and children.
	         * call when this node will never use.
	         */
	
	    }, {
	        key: "delete",
	        value: function _delete() {
	            console.warn("delete is obsolate. please use remove() instead of");
	            this.remove();
	        }
	    }, {
	        key: "remove",
	        value: function remove() {
	            this.children.forEach(function (c) {
	                c.remove();
	            });
	            _GrimoireInterface2.default.nodeDictionary[this.id] = null;
	            if (this._parent) {
	                this._parent.detachChild(this);
	            } else {
	                this.setMounted(false);
	                if (this.element.parentNode) {
	                    this.element.parentNode.removeChild(this.element);
	                }
	            }
	            this._deleted = true;
	        }
	        /**
	         * send message to this node.
	         * invoke component method has same name as message if this node isActive.
	         * @param  {string}  message [description]
	         * @param  {any}     args    [description]
	         * @return {boolean}         is this node active.
	         */
	
	    }, {
	        key: "sendMessage",
	        value: function sendMessage(message, args) {
	            if (!this.isActive) {
	                return false;
	            }
	            this._sendMessage(message, args);
	            return true;
	        }
	    }, {
	        key: "broadcastMessage",
	        value: function broadcastMessage(arg1, arg2, arg3) {
	            if (!this.enabled || !this.mounted) {
	                return;
	            }
	            if (typeof arg1 === "number") {
	                var range = arg1;
	                var message = arg2;
	                var args = arg3;
	                this.sendMessage(message, args);
	                if (range > 0) {
	                    for (var i = 0; i < this.children.length; i++) {
	                        this.children[i].broadcastMessage(range - 1, message, args);
	                    }
	                }
	            } else {
	                var _message = arg1;
	                var _args = arg2;
	                this.sendMessage(_message, _args);
	                for (var _i = 0; _i < this.children.length; _i++) {
	                    this.children[_i].broadcastMessage(_message, _args);
	                }
	            }
	        }
	    }, {
	        key: "append",
	        value: function append(tag) {
	            var _this2 = this;
	
	            var elems = _XMLReader2.default.parseXML(tag);
	            var ret = [];
	            elems.forEach(function (elem) {
	                var child = _GomlParser2.default.parse(elem, null, null);
	                _this2.addChild(child);
	                ret.push(child);
	            });
	            return ret;
	        }
	        /**
	         * add new instance created by given name and attributes for this node as child.
	         * @param {string |   NSIdentity} nodeName      [description]
	         * @param {any    }} attributes   [description]
	         */
	
	    }, {
	        key: "addChildByName",
	        value: function addChildByName(nodeName, attributes) {
	            if (typeof nodeName === "string") {
	                return this.addChildByName(new _NSIdentity2.default(nodeName), attributes);
	            } else {
	                var nodeDec = _GrimoireInterface2.default.nodeDeclarations.get(nodeName);
	                var node = new GomlNode(nodeDec, null);
	                if (attributes) {
	                    for (var key in attributes) {
	                        var id = _Ensure2.default.ensureTobeNSIdentity(key);
	                        node.setAttribute(id, attributes[key]);
	                    }
	                }
	                this.addChild(node);
	                return node;
	            }
	        }
	        /**
	         * Add child for this node.
	         * @param {GomlNode} child            child node to add.
	         * @param {number}   index            index for insert.なければ末尾に追加
	         * @param {[type]}   elementSync=true trueのときはElementのツリーを同期させる。（Elementからパースするときはfalseにする）
	         */
	
	    }, {
	        key: "addChild",
	        value: function addChild(child, index) {
	            var elementSync = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
	
	            if (child._deleted) {
	                throw new Error("deleted node never use.");
	            }
	            if (index != null && typeof index !== "number") {
	                throw new Error("insert index should be number or null or undefined.");
	            }
	            child._parent = this;
	            var insertIndex = index == null ? this.children.length : index;
	            this.children.splice(insertIndex, 0, child);
	            // const checkChildConstraints = child.checkTreeConstraints();
	            // const checkAncestorConstraint = this._callRecursively(n => n.checkTreeConstraints(), n => n._parent ? [n._parent] : [])
	            //   .reduce((list, current) => list.concat(current));
	            // const errors = checkChildConstraints.concat(checkAncestorConstraint).filter(m => m);
	            // if (errors.length !== 0) {
	            //   const message = errors.reduce((m, current) => m + "\n" + current);
	            //   throw new Error("tree constraint is not satisfied.\n" + message);
	            // }
	            // handling html
	            if (elementSync) {
	                var referenceElement = this.element[_NodeUtility2.default.getNodeListIndexByElementIndex(this.element, insertIndex)];
	                this.element.insertBefore(child.element, referenceElement);
	            }
	            child._tree = this._tree;
	            child._companion = this._companion;
	            // mounting
	            if (this.mounted) {
	                child.setMounted(true);
	            }
	        }
	    }, {
	        key: "callRecursively",
	        value: function callRecursively(func) {
	            return this._callRecursively(func, function (n) {
	                return n.children;
	            });
	        }
	        /**
	         * delete child node.
	         * @param {GomlNode} child Target node to be inserted.
	         */
	
	    }, {
	        key: "removeChild",
	        value: function removeChild(child) {
	            var node = this.detachChild(child);
	            if (node) {
	                node.remove();
	            }
	        }
	        /**
	         * detach given node from this node if target is child of this node.
	         * return null if target is not child of this node.
	         * @param  {GomlNode} child [description]
	         * @return {GomlNode}       detached node.
	         */
	
	    }, {
	        key: "detachChild",
	        value: function detachChild(target) {
	            // search child.
	            var index = this.children.indexOf(target);
	            if (index === -1) {
	                return null;
	            }
	            target.setMounted(false);
	            target._parent = null;
	            this.children.splice(index, 1);
	            // html sync
	            this.element.removeChild(target.element);
	            // check ancestor constraint.
	            var errors = this._callRecursively(function (n) {
	                return n.checkTreeConstraints();
	            }, function (n) {
	                return n._parent ? [n._parent] : [];
	            }).reduce(function (list, current) {
	                return list.concat(current);
	            }).filter(function (m) {
	                return m;
	            });
	            if (errors.length !== 0) {
	                var message = errors.reduce(function (m, current) {
	                    return m + "\n" + current;
	                });
	                throw new Error("tree constraint is not satisfied.\n" + message);
	            }
	            return target;
	        }
	        /**
	         * detach this node from parent.
	         */
	
	    }, {
	        key: "detach",
	        value: function detach() {
	            if (this.parent) {
	                this.parent.detachChild(this);
	            } else {
	                throw new Error("root Node cannot be detached.");
	            }
	        }
	        /**
	         * [[[OBSOLETE!]]]get value of attribute.
	         * @param  {string | NSIdentity}  attrName [description]
	         * @return {any}         [description]
	         */
	
	    }, {
	        key: "getValue",
	        value: function getValue(attrName) {
	            console.warn("getValue is obsolate. please use getAttribute instead of");
	            return this.getAttribute(attrName);
	        }
	    }, {
	        key: "getAttribute",
	        value: function getAttribute(attrName) {
	            return this._attributeManager.getAttribute(attrName);
	        }
	    }, {
	        key: "getAttributeRaw",
	        value: function getAttributeRaw(attrName) {
	            return this._attributeManager.attributes.get(attrName);
	        }
	        /**
	         * set value to selected attribute.
	         * @param {string |     NSIdentity}  attrName [description]
	         * @param {any}       value [description]
	         */
	
	    }, {
	        key: "setValue",
	        value: function setValue(attrName, value) {
	            console.warn("setValue is obsolate. please use setAttribute instead of");
	            this.setAttribute(attrName, value);
	        }
	    }, {
	        key: "setAttribute",
	        value: function setAttribute(attrName, value) {
	            return this._attributeManager.setAttribute(attrName, value);
	        }
	        /**
	         *  Add new attribute. In most of case, users no need to call this method.
	         *  Use __addAttribute in Component should be used instead.
	         */
	
	    }, {
	        key: "addAttribute",
	        value: function addAttribute(attr) {
	            return this._attributeManager.addAttribute(attr);
	        }
	        /**
	         * Update mounted status and emit events
	         * @param {boolean} mounted Mounted status.
	         */
	
	    }, {
	        key: "setMounted",
	        value: function setMounted(mounted) {
	            if (this._mounted === mounted) {
	                return;
	            }
	            if (mounted) {
	                this._mounted = mounted;
	                this._clearMessageBuffer("unmount");
	                this._sendMessageForced("awake");
	                this._sendMessageBuffer("mount");
	                this.children.forEach(function (child) {
	                    child.setMounted(mounted);
	                });
	            } else {
	                this._clearMessageBuffer("mount");
	                this.children.forEach(function (child) {
	                    child.setMounted(mounted);
	                });
	                this._sendMessageBuffer("unmount");
	                this._sendMessageForced("dispose");
	                this._tree = null;
	                this._companion = null;
	                this._mounted = mounted;
	            }
	        }
	        /**
	         * Get index of this node from parent.
	         * @return {number} number of index.
	         */
	
	    }, {
	        key: "index",
	        value: function index() {
	            if (!this._parent) {
	                return -1;
	            }
	            return this._parent.children.indexOf(this);
	        }
	        /**
	         * remove attribute from this node.
	         * @param {Attribute} attr [description]
	         */
	
	    }, {
	        key: "removeAttribute",
	        value: function removeAttribute(attr) {
	            return this._attributeManager.removeAttribute(attr);
	        }
	        /**
	         * attach component to this node.
	         * @param {Component} component [description]
	         */
	
	    }, {
	        key: "addComponent",
	        value: function addComponent(component) {
	            var attributes = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;
	            var isDefaultComponent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	            var declaration = _GrimoireInterface2.default.componentDeclarations.get(component);
	            var instance = declaration.generateInstance();
	            attributes = attributes || {};
	            for (var key in attributes) {
	                instance.setAttribute(key, attributes[key]);
	            }
	            this._addComponentDirectly(instance, isDefaultComponent);
	            return instance;
	        }
	        /**
	         * Internal use!
	         * Should not operate by users or plugin developpers
	         * @param {Component} component          [description]
	         * @param {boolean}   isDefaultComponent [description]
	         */
	
	    }, {
	        key: "_addComponentDirectly",
	        value: function _addComponentDirectly(component, isDefaultComponent) {
	            var _this3 = this;
	
	            if (component.node) {
	                throw new Error("component never change attached node");
	            }
	            component.isDefaultComponent = !!isDefaultComponent;
	            component.node = this;
	            var referenceElement = this.componentsElement[_NodeUtility2.default.getNodeListIndexByElementIndex(this.componentsElement, this._components.length)];
	            this.componentsElement.insertBefore(component.element, referenceElement);
	            var propNames = [];
	            var o = component;
	            while (o) {
	                propNames = propNames.concat(Object.getOwnPropertyNames(o));
	                o = Object.getPrototypeOf(o);
	            }
	            propNames.filter(function (name) {
	                return name.startsWith("$") && typeof component[name] === "function";
	            }).forEach(function (method) {
	                component["$" + method] = component[method].bind(component);
	            });
	            this._components.push(component);
	            component.addEnabledObserver(function (c) {
	                if (c.enabled) {
	                    _this3._resolveBufferdMessageTo(c, "mount");
	                    _this3._resolveBufferdMessageTo(c, "unmount");
	                }
	            });
	            if (isDefaultComponent) {
	                // attributes should be exposed on node
	                component.attributes.forEach(function (p) {
	                    return _this3.addAttribute(p);
	                });
	                if (this._defaultValueResolved) {
	                    component.attributes.forEach(function (p) {
	                        return p.resolveDefaultValue(_NodeUtility2.default.getAttributes(_this3.element));
	                    });
	                }
	            }
	            if (this._mounted) {
	                component.resolveDefaultAttributes(null); // here must be optional component.should not use node element attributes.
	                this._sendMessageForcedTo(component, "awake");
	                this._sendMessageBufferTo(component, "mount");
	            }
	        }
	    }, {
	        key: "getComponents",
	        value: function getComponents(filter) {
	            var _this4 = this;
	
	            if (!filter) {
	                return this._components;
	            } else {
	                var _ret = function () {
	                    var ctor = _Ensure2.default.ensureTobeComponentConstructor(filter);
	                    return {
	                        v: _this4._components.filter(function (c) {
	                            return c instanceof ctor;
	                        })
	                    };
	                }();
	
	                if ((typeof _ret === "undefined" ? "undefined" : _typeof(_ret)) === "object") return _ret.v;
	            }
	        }
	    }, {
	        key: "getComponent",
	        value: function getComponent(name) {
	            // 事情により<T extends Component>とはできない。
	            // これはref/Node/Componentによって参照されるのが外部ライブラリにおけるコンポーネントであるが、
	            // src/Node/Componentがこのプロジェクトにおけるコンポーネントのため、別のコンポーネントとみなされ、型の制約をみたさなくなるからである。
	            if (!name) {
	                throw new Error("name must be not null or undefined");
	            } else if (typeof name === "function") {
	                return this._components.find(function (c) {
	                    return c instanceof name;
	                }) || null;
	            } else {
	                var ctor = _Ensure2.default.ensureTobeComponentConstructor(name);
	                if (!ctor) {
	                    throw new Error("component " + name + " is not exist");
	                }
	                return this.getComponent(ctor);
	            }
	        }
	    }, {
	        key: "getComponentsInChildren",
	        value: function getComponentsInChildren(name) {
	            if (typeof name === "function") {
	                return this.callRecursively(function (node) {
	                    return node.getComponent(name);
	                });
	            } else {
	                return this.callRecursively(function (node) {
	                    return node.getComponent(name);
	                });
	            }
	        }
	        /**
	         * resolve default attribute value for all component.
	         * すべてのコンポーネントの属性をエレメントかデフォルト値で初期化
	         */
	
	    }, {
	        key: "resolveAttributesValue",
	        value: function resolveAttributesValue() {
	            this._defaultValueResolved = true;
	            var attrs = _NodeUtility2.default.getAttributes(this.element);
	            for (var key in attrs) {
	                if (!this.attributes.get(key)) {
	                    _Utility2.default.w("attribute '" + key + "' is not exist in this node '" + this.name.fqn + "'");
	                }
	            }
	            this._components.forEach(function (component) {
	                component.resolveDefaultAttributes(attrs);
	            });
	        }
	        /**
	         * check tree constraint for this node.
	         * @return {string[]} [description]
	         */
	
	    }, {
	        key: "checkTreeConstraints",
	        value: function checkTreeConstraints() {
	            var _this5 = this;
	
	            var constraints = this.nodeDeclaration.treeConstraints;
	            if (!constraints) {
	                return [];
	            }
	            var errorMesasges = constraints.map(function (constraint) {
	                return constraint(_this5);
	            }).filter(function (message) {
	                return message !== null;
	            });
	            if (errorMesasges.length === 0) {
	                return null;
	            }
	            return errorMesasges;
	        }
	        /**
	         * バッファしていたmount,unmountが送信されるかもしれない.アクティブなら
	         */
	
	    }, {
	        key: "notifyActivenessUpdate",
	        value: function notifyActivenessUpdate() {
	            if (this.isActive) {
	                this._resolveBufferdMessage(this.mounted ? "mount" : "unmount");
	                this.children.forEach(function (child) {
	                    child.notifyActivenessUpdate();
	                });
	            }
	        }
	    }, {
	        key: "watch",
	        value: function watch(attrName, watcher) {
	            var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	
	            this._attributeManager.watch(attrName, watcher, immediate);
	        }
	        /**
	         * コンポーネントにメッセージを送る。送信したらバッファからは削除される.
	         * @param  {Component} targetComponent 対象コンポーネント
	         * @param  {string}    message         メッセージ
	         * @param  {boolean}   forced          trueでコンポーネントのenableを無視して送信
	         * @param  {boolean}   toBuffer        trueで送信失敗したらバッファに追加
	         * @param  {any}       args            [description]
	         * @return {boolean}                   送信したか
	         */
	
	    }, {
	        key: "_sendMessageToComponent",
	        value: function _sendMessageToComponent(targetComponent, message, args) {
	            message = _Ensure2.default.ensureTobeMessage(message);
	            if (!targetComponent.enabled || !this.isActive) {
	                return false;
	            }
	            var method = targetComponent[message];
	            if (typeof method === "function") {
	                method(args);
	            }
	            return true;
	        }
	        /**
	         * バッファにあればメッセージを送信。成功したらバッファから削除
	         * @param  {Component} target  [description]
	         * @param  {string}    message [description]
	         * @param  {boolean}   forced  [description]
	         * @param  {any}       args    [description]
	         * @return {boolean}           成功したか
	         */
	
	    }, {
	        key: "_resolveBufferdMessageTo",
	        value: function _resolveBufferdMessageTo(target, message) {
	            if (!target.enabled || !this.isActive) {
	                return false;
	            }
	            message = _Ensure2.default.ensureTobeMessage(message);
	            var bufferdIndex = this._messageBuffer.findIndex(function (obj) {
	                return obj.message === message && obj.target === target;
	            });
	            if (bufferdIndex >= 0) {
	                var method = target[message];
	                if (typeof method === "function") {
	                    method();
	                }
	                this._messageBuffer.splice(bufferdIndex, 1);
	                return true;
	            }
	            return false;
	        }
	    }, {
	        key: "_sendMessage",
	        value: function _sendMessage(message, args) {
	            var _this6 = this;
	
	            this._components.forEach(function (component) {
	                _this6._sendMessageToComponent(component, message, args);
	            });
	        }
	    }, {
	        key: "_sendMessageForced",
	        value: function _sendMessageForced(message) {
	            var _this7 = this;
	
	            this._components.forEach(function (c) {
	                _this7._sendMessageForcedTo(c, message);
	            });
	        }
	    }, {
	        key: "_sendMessageBuffer",
	        value: function _sendMessageBuffer(message) {
	            var _this8 = this;
	
	            this._components.forEach(function (c) {
	                _this8._sendMessageBufferTo(c, message);
	            });
	        }
	        /**
	         * for $mount
	         * @param  {Component} target  [description]
	         * @param  {string}    message [description]
	         * @return {boolean}           [description]
	         */
	
	    }, {
	        key: "_sendMessageBufferTo",
	        value: function _sendMessageBufferTo(target, message) {
	            message = _Ensure2.default.ensureTobeMessage(message);
	            var bufferdIndex = this._messageBuffer.findIndex(function (obj) {
	                return obj.message === message && obj.target === target;
	            });
	            if (!target.enabled || !this.isActive) {
	                if (bufferdIndex < 0) {
	                    this._messageBuffer.push({ message: message, target: target });
	                }
	                return false;
	            }
	            var method = target[message];
	            if (typeof method === "function") {
	                method();
	            }
	            if (bufferdIndex >= 0) {
	                this._messageBuffer.splice(bufferdIndex, 1);
	            }
	            return true;
	        }
	        /**
	         * for $awake
	         * @param {Component} target  [description]
	         * @param {string}    message [description]
	         */
	
	    }, {
	        key: "_sendMessageForcedTo",
	        value: function _sendMessageForcedTo(target, message) {
	            message = _Ensure2.default.ensureTobeMessage(message);
	            var method = target[message];
	            if (typeof method === "function") {
	                method();
	            }
	        }
	        /**
	         * バッファのメッセージを送信可能なら送信してバッファから削除
	         */
	
	    }, {
	        key: "_resolveBufferdMessage",
	        value: function _resolveBufferdMessage(message) {
	            var _this9 = this;
	
	            message = _Ensure2.default.ensureTobeMessage(message);
	            var copy = this._messageBuffer.filter(function (obj) {
	                return obj.message === message;
	            });
	            copy.forEach(function (obj) {
	                _this9._resolveBufferdMessageTo(obj.target, message);
	            });
	        }
	    }, {
	        key: "_clearMessageBuffer",
	        value: function _clearMessageBuffer(message) {
	            message = _Ensure2.default.ensureTobeMessage(message);
	            this._messageBuffer = this._messageBuffer.filter(function (obj) {
	                return obj.message !== message;
	            });
	        }
	    }, {
	        key: "_callRecursively",
	        value: function _callRecursively(func, nextGenerator) {
	            var val = func(this);
	            var nexts = nextGenerator(this);
	            var nextVals = nexts.map(function (c) {
	                return c.callRecursively(func);
	            });
	            var list = nextVals.reduce(function (clist, current) {
	                return clist.concat(current);
	            }, []);
	            list.unshift(val);
	            return list;
	        }
	    }, {
	        key: "name",
	
	        /**
	         * Tag name.
	         */
	        get: function get() {
	            return this.nodeDeclaration.name;
	        }
	    }, {
	        key: "attributes",
	        get: function get() {
	            return this._attributeManager.attributes;
	        }
	        /**
	         * GomlInterface that this node is bound to.
	         * throw exception if this node is not mounted.
	         * @return {IGomlInterface} [description]
	         */
	
	    }, {
	        key: "tree",
	        get: function get() {
	            if (!this.mounted) {
	                throw new Error("this node is not mounted");
	            }
	            return this._tree;
	        }
	        /**
	         * indicate this node is already deleted.
	         * if this node is deleted once, this node will not be mounted.
	         * @return {boolean} [description]
	         */
	
	    }, {
	        key: "deleted",
	        get: function get() {
	            return this._deleted;
	        }
	        /**
	         * indicate this node is enabled in tree.
	         * This value must be false when ancestor of this node is disabled.
	         * @return {boolean} [description]
	         */
	
	    }, {
	        key: "isActive",
	        get: function get() {
	            if (this._parent) {
	                return this._parent.isActive && this.enabled;
	            } else {
	                return this.enabled;
	            }
	        }
	        /**
	         * indicate this node is enabled.
	         * this node never recieve any message if this node is not enabled.
	         * @return {boolean} [description]
	         */
	
	    }, {
	        key: "enabled",
	        get: function get() {
	            return this._enabled;
	        },
	        set: function set(value) {
	            this.setAttribute("enabled", value);
	        }
	        /**
	         * the shared object by all nodes in tree.
	         * @return {NSDictionary<any>} [description]
	         */
	
	    }, {
	        key: "companion",
	        get: function get() {
	            return this._companion;
	        }
	        /**
	         * parent node of this node.
	         * if this node is root, return null.
	         * @return {GomlNode} [description]
	         */
	
	    }, {
	        key: "parent",
	        get: function get() {
	            return this._parent;
	        }
	        /**
	         * return true if this node has some child nodes.
	         * @return {boolean} [description]
	         */
	
	    }, {
	        key: "hasChildren",
	        get: function get() {
	            return this.children.length > 0;
	        }
	        /**
	         * indicate mounted status.
	         * this property to be true when treeroot registered to GrimoireInterface.
	         * to be false when this node detachd from the tree.
	         * @return {boolean} Whether this node is mounted or not.
	         */
	
	    }, {
	        key: "mounted",
	        get: function get() {
	            return this._mounted;
	        }
	    }], [{
	        key: "fromElement",
	        value: function fromElement(elem) {
	            return _GrimoireInterface2.default.nodeDictionary[elem.getAttribute(_Constants2.default.x_gr_id)];
	        }
	    }]);
	
	    return GomlNode;
	}(_EEObject3.default);
	
	exports.default = GomlNode;

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _events = __webpack_require__(12);
	
	var _IDObject2 = __webpack_require__(13);
	
	var _IDObject3 = _interopRequireDefault(_IDObject2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * EventEmitterをmixinしたIDObject
	 */
	var EEObject = function (_IDObject) {
	    _inherits(EEObject, _IDObject);
	
	    function EEObject() {
	        _classCallCheck(this, EEObject);
	
	        return _possibleConstructorReturn(this, (EEObject.__proto__ || Object.getPrototypeOf(EEObject)).call(this));
	    }
	
	    return EEObject;
	}(_IDObject3.default);
	
	function applyMixins(derivedCtor, baseCtors) {
	    baseCtors.forEach(function (baseCtor) {
	        Object.getOwnPropertyNames(baseCtor.prototype).forEach(function (name) {
	            derivedCtor.prototype[name] = baseCtor.prototype[name];
	        });
	    });
	}
	applyMixins(EEObject, [_events.EventEmitter]);
	exports.default = EEObject;

/***/ },
/* 12 */
/***/ function(module, exports) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      } else {
	        // At least give some kind of context to the user
	        var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
	        err.context = er;
	        throw err;
	      }
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler))
	    return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        args = Array.prototype.slice.call(arguments, 1);
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    args = Array.prototype.slice.call(arguments, 1);
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else if (listeners) {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.prototype.listenerCount = function(type) {
	  if (this._events) {
	    var evlistener = this._events[type];
	
	    if (isFunction(evlistener))
	      return 1;
	    else if (evlistener)
	      return evlistener.length;
	  }
	  return 0;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  return emitter.listenerCount(type);
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 13 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Most based object for any Grimoire.js related classes.
	 * @type {[type]}
	 */
	var IDObject = function () {
	    function IDObject() {
	        _classCallCheck(this, IDObject);
	
	        this.id = IDObject.getUniqueRandom(10);
	    }
	    /**
	     * Generate random string
	     * @param  {number} length length of random string
	     * @return {string}        generated string
	     */
	
	
	    _createClass(IDObject, [{
	        key: "toString",
	
	        /**
	         * Obtain stringfied object.
	         * If this method was not overridden, this method return class name.
	         * @return {string} stringfied object
	         */
	        value: function toString() {
	            return this.getTypeName();
	        }
	        /**
	         * Obtain class name
	         * @return {string} Class name of the instance.
	         */
	
	    }, {
	        key: "getTypeName",
	        value: function getTypeName() {
	            var funcNameRegex = /function (.{1,})\(/;
	            var result = funcNameRegex.exec(this.constructor.toString());
	            return result && result.length > 1 ? result[1] : "";
	        }
	    }], [{
	        key: "getUniqueRandom",
	        value: function getUniqueRandom(length) {
	            return Math.random().toString(36).slice(-length);
	        }
	    }]);
	
	    return IDObject;
	}();
	
	exports.default = IDObject;

/***/ },
/* 14 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NodeUtility = function () {
	    function NodeUtility() {
	        _classCallCheck(this, NodeUtility);
	    }
	
	    _createClass(NodeUtility, null, [{
	        key: "getNodeListIndexByElementIndex",
	
	        /**
	         * Get index of NodeList converted from index in Element
	         * @param  {HTMLElement} targetElement Parent element of search target elements
	         * @param  {number}      elementIndex  Index in element
	         * @return {number}                    Index in NodeList
	         */
	        value: function getNodeListIndexByElementIndex(targetElement, elementIndex) {
	            var nodeArray = Array.prototype.slice.call(targetElement.childNodes);
	            var elementArray = nodeArray.filter(function (v) {
	                return v.nodeType === 1;
	            });
	            elementIndex = elementIndex < 0 ? elementArray.length + elementIndex : elementIndex;
	            var index = nodeArray.indexOf(elementArray[elementIndex]);
	            return index === -1 ? null : index;
	        }
	    }, {
	        key: "getAttributes",
	        value: function getAttributes(element) {
	            var attributes = {};
	            var domAttr = element.attributes;
	            for (var i = 0; i < domAttr.length; i++) {
	                var attrNode = domAttr.item(i);
	                var name = attrNode.name;
	                attributes[name] = attrNode.value;
	            }
	            return attributes;
	        }
	    }]);
	
	    return NodeUtility;
	}();
	
	exports.default = NodeUtility;

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _NSIdentity = __webpack_require__(16);
	
	var _NSIdentity2 = _interopRequireDefault(_NSIdentity);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NSDictionary = function () {
	    function NSDictionary() {
	        _classCallCheck(this, NSDictionary);
	
	        this._nameObjectMap = {};
	        this._fqnObjectMap = {};
	    }
	
	    _createClass(NSDictionary, [{
	        key: "set",
	        value: function set(key, value) {
	            var namedChildMap = void 0;
	            if (this._nameObjectMap[key.name] !== void 0) {
	                namedChildMap = this._nameObjectMap[key.name];
	            } else {
	                namedChildMap = {};
	                this._nameObjectMap[key.name] = namedChildMap;
	            }
	            namedChildMap[key.fqn] = value;
	            this._fqnObjectMap[key.fqn] = value;
	        }
	    }, {
	        key: "delete",
	        value: function _delete(key) {
	            if (this._fqnObjectMap[key.fqn] !== void 0) {
	                var theMap = this._nameObjectMap[key.name];
	                delete theMap[key.fqn];
	                delete this._fqnObjectMap[key.fqn];
	                return true;
	            }
	            return false;
	        }
	    }, {
	        key: "get",
	        value: function get(arg1, name) {
	            if (!arg1) {
	                throw new Error("NSDictionary.get() can not recieve args null or undefined.");
	            }
	            if (typeof arg1 === "string") {
	                if (name) {
	                    return this.get(new _NSIdentity2.default(arg1, name));
	                } else {
	                    var namedMap = this._nameObjectMap[arg1];
	                    if (!namedMap) {
	                        return null;
	                    }
	                    var keys = Object.keys(namedMap);
	                    if (keys.length === 1) {
	                        return namedMap[keys[0]];
	                    } else {
	                        throw new Error("Specified tag name " + arg1 + " is ambigious to identify.");
	                    }
	                }
	            } else {
	                if (arg1 instanceof _NSIdentity2.default) {
	                    return this.fromFQN(arg1.fqn);
	                } else {
	                    if (arg1.prefix) {
	                        return this.get(new _NSIdentity2.default(arg1.namespaceURI, arg1.localName));
	                    } else {
	                        if (arg1.namespaceURI && this._fqnObjectMap[arg1.localName + "|" + arg1.namespaceURI] !== void 0) {
	                            return this.get(new _NSIdentity2.default(arg1.namespaceURI, arg1.localName));
	                        }
	                        if (arg1 && arg1.ownerElement && arg1.ownerElement.namespaceURI && this._fqnObjectMap[arg1.localName + "|" + arg1.ownerElement.namespaceURI] !== void 0) {
	                            return this.get(new _NSIdentity2.default(arg1.ownerElement.namespaceURI, arg1.localName));
	                        }
	                        return this.get(arg1.localName);
	                    }
	                }
	            }
	        }
	    }, {
	        key: "fromFQN",
	        value: function fromFQN(fqn) {
	            return this._fqnObjectMap[fqn];
	        }
	    }, {
	        key: "isAmbigious",
	        value: function isAmbigious(name) {
	            return Object.keys(this._nameObjectMap[name]).length > 1;
	        }
	    }, {
	        key: "has",
	        value: function has(name) {
	            return this._nameObjectMap[name] !== void 0;
	        }
	    }, {
	        key: "pushDictionary",
	        value: function pushDictionary(dict) {
	            var _this = this;
	
	            dict.forEach(function (value, keyFQN) {
	                var id = _NSIdentity2.default.fromFQN(keyFQN);
	                _this.set(id, value);
	            });
	            return this;
	        }
	    }, {
	        key: "toArray",
	        value: function toArray() {
	            var _this2 = this;
	
	            var ret = [];
	            Object.keys(this._fqnObjectMap).forEach(function (key) {
	                ret.push(_this2._fqnObjectMap[key]);
	            });
	            return ret;
	        }
	    }, {
	        key: "clone",
	        value: function clone() {
	            var dict = new NSDictionary();
	            return dict.pushDictionary(this);
	        }
	    }, {
	        key: "forEach",
	        value: function forEach(callback) {
	            var _this3 = this;
	
	            Object.keys(this._fqnObjectMap).forEach(function (key) {
	                callback(_this3._fqnObjectMap[key], key);
	            });
	            return this;
	        }
	    }, {
	        key: "map",
	        value: function map(callback) {
	            var ret = new NSDictionary();
	            this.forEach(function (val, fqn) {
	                var id = _NSIdentity2.default.fromFQN(fqn);
	                ret.set(id, callback(val, fqn));
	            });
	            return ret;
	        }
	    }, {
	        key: "clear",
	        value: function clear() {
	            this._nameObjectMap = {};
	            this._fqnObjectMap = {};
	        }
	    }]);
	
	    return NSDictionary;
	}();
	
	exports.default = NSDictionary;

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Constants = __webpack_require__(6);
	
	var _Constants2 = _interopRequireDefault(_Constants);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * The class to identity with XML namespace feature.
	 */
	var NSIdentity = function () {
	    function NSIdentity(ns, name) {
	        _classCallCheck(this, NSIdentity);
	
	        if (name) {
	            this.ns = ns.toUpperCase();
	            this.name = name;
	        } else {
	            this.ns = _Constants2.default.defaultNamespace;
	            this.name = ns;
	        }
	        // Ensure all of the characters are uppercase
	        this.name = NSIdentity._ensureValidIdentity(this.name, true);
	        this.ns = NSIdentity._ensureValidIdentity(this.ns);
	        this.fqn = this.name + "|" + this.ns;
	    }
	    /**
	     * Generate an instance from Full qualified name.
	     * @param  {string}             fqn [description]
	     * @return {NSIdentity}     [description]
	     */
	
	
	    _createClass(NSIdentity, null, [{
	        key: "fromFQN",
	        value: function fromFQN(fqn) {
	            var splitted = fqn.split("|");
	            if (splitted.length !== 2) {
	                throw new Error("Invalid fqn was given");
	            }
	            return new NSIdentity(splitted[1], splitted[0]);
	        }
	        /**
	         * Make sure given name is valid for using in identity.
	         * | is prohibited for using in name or namespace.
	         * . is prohibited for using in name.
	         * All lowercase alphabet will be transformed into uppercase.
	         * @param  {string} name        [A name to verify]
	         * @param  {[type]} noDot=false [Ensure not using dot or not]
	         * @return {string}             [Valid name]
	         */
	
	    }, {
	        key: "_ensureValidIdentity",
	        value: function _ensureValidIdentity(name) {
	            var noDot = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	            if (name.indexOf("|") > -1) {
	                throw new Error("Namespace and identity cannnot contain | ");
	            }
	            if (noDot && name.indexOf(".") > -1) {
	                throw new Error("identity cannnot contain .");
	            }
	            if (name == null) {
	                throw new Error("Specified name was null or undefined");
	            }
	            return name;
	        }
	    }]);
	
	    return NSIdentity;
	}();
	
	exports.default = NSIdentity;

/***/ },
/* 17 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	function BooleanConverter(val) {
	    if (typeof val === "boolean") {
	        return val;
	    } else if (typeof val === "string") {
	        switch (val) {
	            case "true":
	                return true;
	            case "false":
	                return false;
	            default:
	                return undefined;
	        }
	    }
	}
	exports.default = BooleanConverter;

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Component2 = __webpack_require__(19);
	
	var _Component3 = _interopRequireDefault(_Component2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	var GrimoireComponent = function (_Component) {
	    _inherits(GrimoireComponent, _Component);
	
	    function GrimoireComponent() {
	        _classCallCheck(this, GrimoireComponent);
	
	        return _possibleConstructorReturn(this, (GrimoireComponent.__proto__ || Object.getPrototypeOf(GrimoireComponent)).apply(this, arguments));
	    }
	
	    _createClass(GrimoireComponent, [{
	        key: "$awake",
	        value: function $awake() {
	            var _this2 = this;
	
	            this.node.resolveAttributesValue();
	            this.getAttributeRaw("id").watch(function (attr) {
	                _this2.node.element.id = attr ? attr : "";
	            }, true);
	            this.getAttributeRaw("class").watch(function (attr) {
	                _this2.node.element.className = Array.isArray(attr) ? attr.join(" ") : "";
	            }, true);
	            this.getAttributeRaw("enabled").watch(function (attr) {
	                _this2.node["_enabled"] = attr;
	                if (_this2.node.isActive) {
	                    _this2.node.notifyActivenessUpdate();
	                }
	            });
	            this.node["_enabled"] = this.getAttribute("enabled");
	        }
	    }]);
	
	    return GrimoireComponent;
	}(_Component3.default);
	
	GrimoireComponent.attributes = {
	    id: {
	        converter: "String",
	        default: null,
	        readonly: false
	    },
	    class: {
	        converter: "StringArray",
	        default: null,
	        readonly: false
	    },
	    enabled: {
	        converter: "Boolean",
	        default: true,
	        readonly: false
	    }
	};
	exports.default = GrimoireComponent;

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Utility = __webpack_require__(4);
	
	var _Utility2 = _interopRequireDefault(_Utility);
	
	var _Constants = __webpack_require__(6);
	
	var _Constants2 = _interopRequireDefault(_Constants);
	
	var _NodeUtility = __webpack_require__(14);
	
	var _NodeUtility2 = _interopRequireDefault(_NodeUtility);
	
	var _Attribute = __webpack_require__(20);
	
	var _Attribute2 = _interopRequireDefault(_Attribute);
	
	var _IDObject2 = __webpack_require__(13);
	
	var _IDObject3 = _interopRequireDefault(_IDObject2);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }
	
	function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }
	
	/**
	 * Base class for any components
	 */
	var Component = function (_IDObject) {
	    _inherits(Component, _IDObject);
	
	    function Component() {
	        _classCallCheck(this, Component);
	
	        /**
	         * Whether this component was created by nodeDeclaration
	         * @type {boolean}
	         */
	        var _this = _possibleConstructorReturn(this, (Component.__proto__ || Object.getPrototypeOf(Component)).apply(this, arguments));
	
	        _this.isDefaultComponent = false;
	        /**
	         * Flag that this component is activated or not.
	         * @type {boolean}
	         */
	        _this._enabled = true;
	        _this._handlers = [];
	        _this._additionalAttributesNames = [];
	        return _this;
	    }
	
	    _createClass(Component, [{
	        key: "getValue",
	
	        /**
	         * Obtain value of attribute. When the attribute is not existing, this method would return undefined.
	         * @param  {string} name [description]
	         * @return {any}         [description]
	         */
	        value: function getValue(name) {
	            console.warn("Component#getValue is obsolete. please use getAttribute instead of.");
	            return this.getAttribute(name);
	        }
	    }, {
	        key: "setValue",
	        value: function setValue(name, value) {
	            console.warn("Component#setValue is obsolete. please use setAttribute instead of.");
	            return this.setAttribute(name, value);
	        }
	        /**
	         * Set value of attribute
	         * @param {string} name  [description]
	         * @param {any}    value [description]
	         */
	
	    }, {
	        key: "setAttribute",
	        value: function setAttribute(name, value) {
	            var attr = this.attributes.get(name); // TODO:check readonly?
	            if (attr) {
	                attr.Value = value;
	            }
	        }
	    }, {
	        key: "getAttribute",
	        value: function getAttribute(name) {
	            var attr = this.getAttributeRaw(name);
	            if (attr) {
	                return attr.Value;
	            } else {
	                return undefined;
	            }
	        }
	    }, {
	        key: "getAttributeRaw",
	        value: function getAttributeRaw(name) {
	            return this.attributes.get(name);
	        }
	    }, {
	        key: "addEnabledObserver",
	        value: function addEnabledObserver(observer) {
	            this._handlers.push(observer);
	        }
	    }, {
	        key: "removeEnabledObserver",
	        value: function removeEnabledObserver(observer) {
	            var index = -1;
	            for (var i = 0; i < this._handlers.length; i++) {
	                if (observer === this._handlers[i]) {
	                    index = i;
	                    break;
	                }
	            }
	            if (index < 0) {
	                return;
	            }
	            this._handlers.splice(index, 1);
	        }
	    }, {
	        key: "resolveDefaultAttributes",
	        value: function resolveDefaultAttributes(nodeAttributes) {
	            var _this2 = this;
	
	            nodeAttributes = nodeAttributes || {};
	            if (this.isDefaultComponent) {
	                this.attributes.forEach(function (attr) {
	                    return attr.resolveDefaultValue(nodeAttributes);
	                });
	            } else {
	                (function () {
	                    var attrs = _NodeUtility2.default.getAttributes(_this2.element);
	                    for (var key in attrs) {
	                        if (key === _Constants2.default.x_gr_id) continue;
	                        if (!_this2.attributes.get(key)) {
	                            _Utility2.default.w("attribute '" + key + "' is not exist in this component '" + _this2.name.fqn + "'");
	                        }
	                    }
	                    _this2.attributes.forEach(function (attr) {
	                        return attr.resolveDefaultValue(attrs);
	                    });
	                })();
	            }
	        }
	        /**
	         * Add attribute
	         * @param {string}                name      [description]
	         * @param {IAttributeDeclaration} attribute [description]
	         */
	
	    }, {
	        key: "__addAtribute",
	        value: function __addAtribute(name, attribute) {
	            if (!attribute) {
	                throw new Error("can not add attribute null or undefined.");
	            }
	            var attr = _Attribute2.default.generateAttributeForComponent(name, attribute, this);
	            if (this.isDefaultComponent) {
	                this.node.addAttribute(attr);
	            }
	            if (this.isDefaultComponent) {
	                attr.resolveDefaultValue(_NodeUtility2.default.getAttributes(this.node.element));
	            } else {
	                var attrs = _NodeUtility2.default.getAttributes(this.element);
	                attr.resolveDefaultValue(attrs);
	            }
	            this._additionalAttributesNames.push(attr.name);
	        }
	    }, {
	        key: "__removeAttributes",
	        value: function __removeAttributes(name) {
	            var _this3 = this;
	
	            if (name) {
	                var index = this._additionalAttributesNames.findIndex(function (id) {
	                    return id.name === name;
	                });
	                if (index < 0) {
	                    throw new Error("can not remove attributes :" + name);
	                }
	                var attrId = this._additionalAttributesNames[index];
	                if (this.isDefaultComponent) {
	                    this.node.removeAttribute(this.attributes.get(attrId));
	                }
	                this.attributes.delete(attrId);
	                this._additionalAttributesNames.splice(index, 1);
	            } else {
	                this._additionalAttributesNames.forEach(function (id) {
	                    _this3.__removeAttributes(id.name);
	                });
	            }
	        }
	    }, {
	        key: "__bindAttributes",
	        value: function __bindAttributes() {
	            this.attributes.forEach(function (attr) {
	                var name = attr.name.name;
	                attr.boundTo("_" + name);
	            });
	        }
	    }, {
	        key: "enabled",
	        get: function get() {
	            return this._enabled;
	        },
	        set: function set(val) {
	            var _this4 = this;
	
	            if (this._enabled === val) {
	                return;
	            }
	            this._enabled = val;
	            this._handlers.forEach(function (handler) {
	                handler(_this4);
	            });
	        }
	        /**
	         * The dictionary which is shared in entire tree.
	         * @return {NSDictionary<any>} [description]
	         */
	
	    }, {
	        key: "companion",
	        get: function get() {
	            return this.node ? this.node.companion : null;
	        }
	        /**
	         * Tree interface for the tree this node is attached.
	         * @return {IGomlInterface} [description]
	         */
	
	    }, {
	        key: "tree",
	        get: function get() {
	            return this.node ? this.node.tree : null;
	        }
	    }]);
	
	    return Component;
	}(_IDObject3.default);
	
	exports.default = Component;

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Ensure = __webpack_require__(2);
	
	var _Ensure2 = _interopRequireDefault(_Ensure);
	
	var _NSIdentity = __webpack_require__(16);
	
	var _NSIdentity2 = _interopRequireDefault(_NSIdentity);
	
	var _GrimoireInterface = __webpack_require__(3);
	
	var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	/**
	 * Manage a attribute attached to components.
	 */
	var Attribute = function () {
	    function Attribute() {
	        _classCallCheck(this, Attribute);
	
	        /**
	         * List of functions that is listening changing values.
	         */
	        this._observers = [];
	    }
	
	    _createClass(Attribute, [{
	        key: "watch",
	
	        /**
	         * Add event handler to observe changing this attribute.
	         * @param  {(attr: Attribute) => void} handler handler the handler you want to add.
	         * @param {boolean = false} callFirst whether that handler should be called first time.
	         */
	        value: function watch(watcher) {
	            var immedateCalls = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
	
	            this._observers.push(watcher);
	            if (immedateCalls) {
	                watcher(this.Value, undefined, this);
	            }
	        }
	        /**
	         * Remove event handler you added.
	         * @param  {Attribute} handler [description]
	         * @return {[type]}            [description]
	         */
	
	    }, {
	        key: "removeObserver",
	        value: function removeObserver(target) {
	            var index = this._observers.findIndex(function (f) {
	                return f === target;
	            });
	            if (index < 0) {
	                return;
	            }
	            this._observers.splice(index, 1);
	        }
	        /**
	         * Bind converted value to specified field.
	         * When target object was not specified, field of owner component would be assigned.
	         * @param {string} variableName [description]
	         * @param {any} targetObject [description]
	         */
	
	    }, {
	        key: "boundTo",
	        value: function boundTo(variableName) {
	            var targetObject = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.component;
	
	            this.watch(function (v) {
	                targetObject[variableName] = v;
	            }, true);
	        }
	        /**
	         * Apply default value to attribute from DOM values.
	         * @param {string }} domValues [description]
	         */
	
	    }, {
	        key: "resolveDefaultValue",
	        value: function resolveDefaultValue(domValues) {
	            if (this._value !== void 0) {
	                return;
	            }
	            var tagAttrValue = domValues[this.name.name];
	            if (tagAttrValue !== void 0) {
	                this.Value = tagAttrValue; // Dom指定値で解決
	                return;
	            }
	            var nodeDefaultValue = this.component.node.nodeDeclaration.defaultAttributesActual.get(this.name);
	            if (nodeDefaultValue !== void 0) {
	                this.Value = nodeDefaultValue; // Node指定値で解決
	                return;
	            }
	            this.Value = this.declaration.default;
	        }
	    }, {
	        key: "_valuate",
	        value: function _valuate(raw) {
	            var v = this.converter.convert(raw);
	            if (v === void 0) {
	                throw new Error("attribute " + this.name.name + " value can not be convert from " + this._value);
	            }
	            this._lastValuete = v;
	            return v;
	        }
	    }, {
	        key: "_notifyChange",
	        value: function _notifyChange(newValue) {
	            var _this = this;
	
	            var lastvalue = this._lastValuete;
	            var c = this.converter;
	            this._observers.forEach(function (handler) {
	                handler(c.convert(newValue), lastvalue, _this);
	            });
	        }
	    }, {
	        key: "tree",
	
	        /**
	         * Goml tree interface which contains the component this attribute bound to.
	         * @return {IGomlInterface} [description]
	         */
	        get: function get() {
	            return this.component.tree;
	        }
	        /**
	         * Companion map which is bounding to the component this attribute bound to.
	         * @return {NSDictionary<any>} [description]
	         */
	
	    }, {
	        key: "companion",
	        get: function get() {
	            return this.component.companion;
	        }
	        /**
	         * Get a value with specified type.
	         * @return {any} value with specified type.
	         */
	
	    }, {
	        key: "Value",
	        get: function get() {
	            if (this._value === void 0) {
	                throw new Error("attribute " + this.name.name + " value is undefined in " + this.component.node.name.name);
	            }
	            return this._valuate(this._value);
	        }
	        /**
	         * Set a value with any type.
	         * @param {any} val Value with string or specified type.
	         */
	        ,
	        set: function set(val) {
	            if (this._value === val) {
	                return;
	            }
	            this._value = val;
	            this._notifyChange(val);
	        }
	        /**
	         * Construct a new attribute with name of key and any value with specified type. If constant flag is true, This attribute will be immutable.
	         * If converter is not served, string converter will be set as default.
	         * @param {string}        key       Key of this attribute.
	         * @param {any}           value     Value of this attribute.
	         * @param {ConverterBase} converter Converter of this attribute.
	         * @param {boolean}       constant  Whether this attribute is immutable or not. False as default.
	         */
	
	    }], [{
	        key: "convert",
	        value: function convert(converter, val) {
	            var cname = _Ensure2.default.ensureTobeNSIdentity(converter);
	            var conv = _GrimoireInterface2.default.converters.get(cname);
	            if (!conv) {
	                throw new Error("converter " + cname.name + " is not defined.");
	            }
	            return conv.convert(val);
	        }
	    }, {
	        key: "generateAttributeForComponent",
	        value: function generateAttributeForComponent(name, declaration, component) {
	            var attr = new Attribute();
	            attr.name = new _NSIdentity2.default(component.name.ns, name);
	            attr.component = component;
	            attr.declaration = declaration;
	            var converterName = _Ensure2.default.ensureTobeNSIdentity(declaration.converter);
	            attr.converter = _GrimoireInterface2.default.converters.get(converterName);
	            if (attr.converter === void 0) {
	                // When the specified converter was not found
	                throw new Error("Specified converter " + converterName.name + " was not found from registered converters.\n Component: " + attr.component.name.fqn + "\n Attribute: " + attr.name.name);
	            }
	            attr.converter = {
	                convert: attr.converter.convert.bind(attr),
	                name: attr.converter.name
	            };
	            attr.component.attributes.set(attr.name, attr);
	            return attr;
	        }
	    }]);
	
	    return Attribute;
	}();
	
	exports.default = Attribute;

/***/ },
/* 21 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	function StringArrayConverter(val) {
	    if (Array.isArray(val) || !val) {
	        return val;
	    }
	    if (typeof val === "string") {
	        return val.split(" ");
	    }
	}
	exports.default = StringArrayConverter;

/***/ },
/* 22 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	function StringConverter(val) {
	    if (typeof val === "string") {
	        return val;
	    } else if (!val) {
	        return val;
	    } else if (typeof val.toString === "function") {
	        return val.toString();
	    }
	}
	exports.default = StringConverter;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Constants = __webpack_require__(6);
	
	var _Constants2 = _interopRequireDefault(_Constants);
	
	var _GrimoireInterface = __webpack_require__(3);
	
	var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);
	
	var _Attribute = __webpack_require__(20);
	
	var _Attribute2 = _interopRequireDefault(_Attribute);
	
	var _NSDictionary = __webpack_require__(15);
	
	var _NSDictionary2 = _interopRequireDefault(_NSDictionary);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var ComponentDeclaration = function () {
	    function ComponentDeclaration(name, attributes, ctor) {
	        _classCallCheck(this, ComponentDeclaration);
	
	        this.name = name;
	        this.attributes = attributes;
	        this.ctor = ctor;
	        // if (this.attributes["enabled"]) {//TODO implements enabled
	        //   throw new Error("attribute 'enabled' is already defined by default.");
	        // }
	        // this.attributes["enabled"] = {
	        //   converter: "Boolean",
	        //   default true
	        // };
	    }
	
	    _createClass(ComponentDeclaration, [{
	        key: "generateInstance",
	        value: function generateInstance(componentElement) {
	            componentElement = componentElement ? componentElement : document.createElementNS(this.name.ns, this.name.name);
	            var component = new this.ctor();
	            componentElement.setAttribute(_Constants2.default.x_gr_id, component.id);
	            _GrimoireInterface2.default.componentDictionary[component.id] = component;
	            component.name = this.name;
	            component.element = componentElement;
	            component.attributes = new _NSDictionary2.default();
	            for (var key in this.attributes) {
	                _Attribute2.default.generateAttributeForComponent(key, this.attributes[key], component);
	            }
	            return component;
	        }
	    }]);
	
	    return ComponentDeclaration;
	}();
	
	exports.default = ComponentDeclaration;

/***/ },
/* 24 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NSSet = function () {
	    function NSSet() {
	        _classCallCheck(this, NSSet);
	
	        this._contentArray = [];
	    }
	
	    _createClass(NSSet, [{
	        key: "push",
	        value: function push(item) {
	            var index = this._contentArray.findIndex(function (id) {
	                return id.fqn === item.fqn;
	            });
	            if (index === -1) {
	                this._contentArray.push(item);
	            }
	            return this;
	        }
	    }, {
	        key: "pushArray",
	        value: function pushArray(item) {
	            var _this = this;
	
	            item.forEach(function (v) {
	                _this.push(v);
	            });
	            return this;
	        }
	    }, {
	        key: "values",
	        value: function values() {
	            return this._contentArray.values();
	        }
	    }, {
	        key: "toArray",
	        value: function toArray() {
	            var ret = [];
	            for (var key in this._contentArray) {
	                ret.push(this._contentArray[key]);
	            }
	            return ret;
	        }
	    }, {
	        key: "clone",
	        value: function clone() {
	            var newSet = new NSSet();
	            var _iteratorNormalCompletion = true;
	            var _didIteratorError = false;
	            var _iteratorError = undefined;
	
	            try {
	                for (var _iterator = this._contentArray[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
	                    var i = _step.value;
	
	                    newSet.push(i);
	                }
	            } catch (err) {
	                _didIteratorError = true;
	                _iteratorError = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion && _iterator.return) {
	                        _iterator.return();
	                    }
	                } finally {
	                    if (_didIteratorError) {
	                        throw _iteratorError;
	                    }
	                }
	            }
	
	            return newSet;
	        }
	    }, {
	        key: "merge",
	        value: function merge(other) {
	            var _iteratorNormalCompletion2 = true;
	            var _didIteratorError2 = false;
	            var _iteratorError2 = undefined;
	
	            try {
	                for (var _iterator2 = other._contentArray[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
	                    var elem = _step2.value;
	
	                    this.push(elem);
	                }
	            } catch (err) {
	                _didIteratorError2 = true;
	                _iteratorError2 = err;
	            } finally {
	                try {
	                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
	                        _iterator2.return();
	                    }
	                } finally {
	                    if (_didIteratorError2) {
	                        throw _iteratorError2;
	                    }
	                }
	            }
	
	            return this;
	        }
	    }], [{
	        key: "fromArray",
	        value: function fromArray(array) {
	            var nSet = new NSSet();
	            nSet.pushArray(array);
	            return nSet;
	        }
	    }]);
	
	    return NSSet;
	}();
	
	exports.default = NSSet;

/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _Ensure = __webpack_require__(2);
	
	var _Ensure2 = _interopRequireDefault(_Ensure);
	
	var _NSIdentity = __webpack_require__(16);
	
	var _NSIdentity2 = _interopRequireDefault(_NSIdentity);
	
	var _GrimoireInterface = __webpack_require__(3);
	
	var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var NodeDeclaration = function () {
	    function NodeDeclaration(name, defaultComponents, defaultAttributes, superNode, _treeConstraints) {
	        _classCallCheck(this, NodeDeclaration);
	
	        this.name = name;
	        this.defaultComponents = defaultComponents;
	        this.defaultAttributes = defaultAttributes;
	        this.superNode = superNode;
	        this._treeConstraints = _treeConstraints;
	        if (!this.superNode && this.name.name !== "grimoire-node-base") {
	            this.superNode = new _NSIdentity2.default("grimoire-node-base");
	        }
	    }
	
	    _createClass(NodeDeclaration, [{
	        key: "addDefaultComponent",
	        value: function addDefaultComponent(componentName) {
	            var componentId = _Ensure2.default.ensureTobeNSIdentity(componentName);
	            this.defaultComponents.push(componentId);
	            if (this._defaultComponentsActual) {
	                this._defaultComponentsActual.push(componentId);
	            }
	        }
	    }, {
	        key: "_resolveInherites",
	        value: function _resolveInherites() {
	            if (!this.superNode) {
	                this._defaultComponentsActual = this.defaultComponents;
	                this._defaultAttributesActual = this.defaultAttributes;
	                return;
	            }
	            var superNode = _GrimoireInterface2.default.nodeDeclarations.get(this.superNode);
	            var inheritedDefaultComponents = superNode.defaultComponentsActual;
	            var inheritedDefaultAttribute = superNode.defaultAttributesActual;
	            this._defaultComponentsActual = inheritedDefaultComponents.clone().merge(this.defaultComponents);
	            this._defaultAttributesActual = inheritedDefaultAttribute.clone().pushDictionary(this.defaultAttributes);
	        }
	    }, {
	        key: "defaultComponentsActual",
	        get: function get() {
	            if (!this._defaultComponentsActual) {
	                this._resolveInherites();
	            }
	            return this._defaultComponentsActual;
	        }
	    }, {
	        key: "defaultAttributesActual",
	        get: function get() {
	            if (!this._defaultAttributesActual) {
	                this._resolveInherites();
	            }
	            return this._defaultAttributesActual;
	        }
	    }, {
	        key: "treeConstraints",
	        get: function get() {
	            return this._treeConstraints;
	        }
	    }]);
	
	    return NodeDeclaration;
	}();
	
	exports.default = NodeDeclaration;

/***/ },
/* 26 */
/***/ function(module, exports) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var XMLHttpRequestAsync = function () {
	    function XMLHttpRequestAsync() {
	        _classCallCheck(this, XMLHttpRequestAsync);
	    }
	
	    _createClass(XMLHttpRequestAsync, null, [{
	        key: "send",
	        value: function send(xhr, data) {
	            return new Promise(function (resolve, reject) {
	                xhr.onload = function (e) {
	                    resolve(e);
	                };
	                xhr.onerror = function (e) {
	                    reject(e);
	                };
	                xhr.send(data);
	            });
	        }
	    }]);
	
	    return XMLHttpRequestAsync;
	}();
	
	exports.default = XMLHttpRequestAsync;

/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	var _GrimoireInterface = __webpack_require__(3);
	
	var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);
	
	var _GomlParser = __webpack_require__(9);
	
	var _GomlParser2 = _interopRequireDefault(_GomlParser);
	
	var _XMLReader = __webpack_require__(8);
	
	var _XMLReader2 = _interopRequireDefault(_XMLReader);
	
	var _XMLHttpRequestAsync = __webpack_require__(26);
	
	var _XMLHttpRequestAsync2 = _interopRequireDefault(_XMLHttpRequestAsync);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator.throw(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	
	/**
	 * Provides the features to fetch Goml source.
	 */
	var GomlLoader = function () {
	    function GomlLoader() {
	        _classCallCheck(this, GomlLoader);
	    }
	
	    _createClass(GomlLoader, null, [{
	        key: "loadFromScriptTag",
	
	        /**
	         * Obtain the Goml source from specified tag.
	         * @param  {HTMLScriptElement} scriptTag [the script tag to load]
	         * @return {Promise<void>}               [the promise to wait for loading]
	         */
	        value: function loadFromScriptTag(scriptTag) {
	            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	                var srcAttr, source, req, doc, rootNode;
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                srcAttr = scriptTag.getAttribute("src");
	                                source = void 0;
	
	                                if (!srcAttr) {
	                                    _context.next = 10;
	                                    break;
	                                }
	
	                                // ignore text element
	                                req = new XMLHttpRequest();
	
	                                req.open("GET", srcAttr);
	                                _context.next = 7;
	                                return _XMLHttpRequestAsync2.default.send(req);
	
	                            case 7:
	                                source = req.responseText;
	                                _context.next = 11;
	                                break;
	
	                            case 10:
	                                source = scriptTag.text;
	
	                            case 11:
	                                doc = _XMLReader2.default.parseXML(source, "GOML");
	                                rootNode = _GomlParser2.default.parse(doc[0], null, scriptTag);
	
	                                _GrimoireInterface2.default.addRootNode(scriptTag, rootNode);
	
	                            case 14:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, this);
	            }));
	        }
	        /**
	         * Load from the script tags which will be found with specified query.
	         * @param  {string}          query [the query to find script tag]
	         * @return {Promise<void[]>}       [the promise to wait for all goml loading]
	         */
	
	    }, {
	        key: "loadFromQuery",
	        value: function loadFromQuery(query) {
	            var tags = document.querySelectorAll(query);
	            var pArray = [];
	            for (var i = 0; i < tags.length; i++) {
	                pArray[i] = GomlLoader.loadFromScriptTag(tags.item(i));
	            }
	            if (pArray.length === 0 && _GrimoireInterface2.default.debug) {
	                console.warn("There was no goml file detected. Have you specified `type='text/goml'` to the script tag?");
	            }
	            return Promise.all(pArray);
	        }
	        /**
	         * Load all Goml sources contained in HTML.
	         * @return {Promise<void>} [the promise to wait for all goml loading]
	         */
	
	    }, {
	        key: "loadForPage",
	        value: function loadForPage() {
	            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee2() {
	                return regeneratorRuntime.wrap(function _callee2$(_context2) {
	                    while (1) {
	                        switch (_context2.prev = _context2.next) {
	                            case 0:
	                                _context2.next = 2;
	                                return GomlLoader.loadFromQuery('script[type="text/goml"]');
	
	                            case 2:
	                            case "end":
	                                return _context2.stop();
	                        }
	                    }
	                }, _callee2, this);
	            }));
	        }
	    }]);
	
	    return GomlLoader;
	}();
	
	exports.default = GomlLoader;

/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	
	Object.defineProperty(exports, "__esModule", {
	    value: true
	});
	
	var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();
	
	exports.default = function () {
	    GrimoireInitializer.initialize();
	    _GrimoireInterface2.default.noConflictPreserve = window["gr"];
	    return window["gr"] = window["GrimoireJS"] = _GrimoireInterface2.default; // TODO gr should implements noConflict
	};
	
	var _GrimoireInterface = __webpack_require__(3);
	
	var _GrimoireInterface2 = _interopRequireDefault(_GrimoireInterface);
	
	var _GomlLoader = __webpack_require__(27);
	
	var _GomlLoader2 = _interopRequireDefault(_GomlLoader);
	
	function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
	
	function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
	
	var __awaiter = undefined && undefined.__awaiter || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) {
	            try {
	                step(generator.next(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function rejected(value) {
	            try {
	                step(generator.throw(value));
	            } catch (e) {
	                reject(e);
	            }
	        }
	        function step(result) {
	            result.done ? resolve(result.value) : new P(function (resolve) {
	                resolve(result.value);
	            }).then(fulfilled, rejected);
	        }
	        step((generator = generator.apply(thisArg, _arguments)).next());
	    });
	};
	
	/**
	 * Provides procedures for initializing.
	 */
	var GrimoireInitializer = function () {
	    function GrimoireInitializer() {
	        _classCallCheck(this, GrimoireInitializer);
	    }
	
	    _createClass(GrimoireInitializer, null, [{
	        key: "initialize",
	
	        /**
	         * Start initializing
	         * @return {Promise<void>} The promise which will be resolved when all of the Goml script was loaded.
	         */
	        value: function initialize() {
	            return __awaiter(this, void 0, void 0, regeneratorRuntime.mark(function _callee() {
	                return regeneratorRuntime.wrap(function _callee$(_context) {
	                    while (1) {
	                        switch (_context.prev = _context.next) {
	                            case 0:
	                                _context.prev = 0;
	
	                                GrimoireInitializer._copyGLConstants();
	                                _GrimoireInterface2.default.initialize();
	                                _context.next = 5;
	                                return GrimoireInitializer._waitForDOMLoading();
	
	                            case 5:
	                                _context.next = 7;
	                                return _GrimoireInterface2.default.resolvePlugins();
	
	                            case 7:
	                                _context.next = 9;
	                                return _GomlLoader2.default.loadForPage();
	
	                            case 9:
	                                _context.next = 14;
	                                break;
	
	                            case 11:
	                                _context.prev = 11;
	                                _context.t0 = _context["catch"](0);
	
	                                console.error(_context.t0);
	
	                            case 14:
	                            case "end":
	                                return _context.stop();
	                        }
	                    }
	                }, _callee, this, [[0, 11]]);
	            }));
	        }
	        /**
	         * Ensure WebGLRenderingContext.[CONSTANTS] is exisiting.
	         * Some of the browsers contains them in prototype.
	         */
	
	    }, {
	        key: "_copyGLConstants",
	        value: function _copyGLConstants() {
	            if (WebGLRenderingContext.ONE) {
	                // Assume the CONSTANTS are already in WebGLRenderingContext
	                // Chrome,Firefox,IE,Edge...
	                return;
	            }
	            // Otherwise like ""Safari""
	            for (var propName in WebGLRenderingContext.prototype) {
	                if (/^[A-Z]/.test(propName)) {
	                    var property = WebGLRenderingContext.prototype[propName];
	                    WebGLRenderingContext[propName] = property;
	                }
	            }
	        }
	        /**
	         * Obtain the promise object which will be resolved when DOMContentLoaded event was rised.
	         * @return {Promise<void>} the promise
	         */
	
	    }, {
	        key: "_waitForDOMLoading",
	        value: function _waitForDOMLoading() {
	            return new Promise(function (resolve) {
	                window.addEventListener("DOMContentLoaded", function () {
	                    resolve();
	                });
	            });
	        }
	    }]);
	
	    return GrimoireInitializer;
	}();
	/**
	 * Just start the process.
	 */
	
	
	;

/***/ }
/******/ ])
});
;

},{}],12:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],13:[function(require,module,exports){
var toString = {}.toString;

module.exports = Array.isArray || function (arr) {
  return toString.call(arr) == '[object Array]';
};

},{}],14:[function(require,module,exports){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],15:[function(require,module,exports){
(function (process,global){
/**
 * Copyright (c) 2014, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * https://raw.github.com/facebook/regenerator/master/LICENSE file. An
 * additional grant of patent rights can be found in the PATENTS file in
 * the same directory.
 */

!(function(global) {
  "use strict";

  var Op = Object.prototype;
  var hasOwn = Op.hasOwnProperty;
  var undefined; // More compressible than void 0.
  var $Symbol = typeof Symbol === "function" ? Symbol : {};
  var iteratorSymbol = $Symbol.iterator || "@@iterator";
  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

  var inModule = typeof module === "object";
  var runtime = global.regeneratorRuntime;
  if (runtime) {
    if (inModule) {
      // If regeneratorRuntime is defined globally and we're in a module,
      // make the exports object identical to regeneratorRuntime.
      module.exports = runtime;
    }
    // Don't bother evaluating the rest of this file if the runtime was
    // already defined globally.
    return;
  }

  // Define the runtime globally (as expected by generated code) as either
  // module.exports (if we're in a module) or a new, empty object.
  runtime = global.regeneratorRuntime = inModule ? module.exports : {};

  function wrap(innerFn, outerFn, self, tryLocsList) {
    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
    var generator = Object.create(protoGenerator.prototype);
    var context = new Context(tryLocsList || []);

    // The ._invoke method unifies the implementations of the .next,
    // .throw, and .return methods.
    generator._invoke = makeInvokeMethod(innerFn, self, context);

    return generator;
  }
  runtime.wrap = wrap;

  // Try/catch helper to minimize deoptimizations. Returns a completion
  // record like context.tryEntries[i].completion. This interface could
  // have been (and was previously) designed to take a closure to be
  // invoked without arguments, but in all the cases we care about we
  // already have an existing method we want to call, so there's no need
  // to create a new function object. We can even get away with assuming
  // the method takes exactly one argument, since that happens to be true
  // in every case, so we don't have to touch the arguments object. The
  // only additional allocation required is the completion record, which
  // has a stable shape and so hopefully should be cheap to allocate.
  function tryCatch(fn, obj, arg) {
    try {
      return { type: "normal", arg: fn.call(obj, arg) };
    } catch (err) {
      return { type: "throw", arg: err };
    }
  }

  var GenStateSuspendedStart = "suspendedStart";
  var GenStateSuspendedYield = "suspendedYield";
  var GenStateExecuting = "executing";
  var GenStateCompleted = "completed";

  // Returning this object from the innerFn has the same effect as
  // breaking out of the dispatch switch statement.
  var ContinueSentinel = {};

  // Dummy constructor functions that we use as the .constructor and
  // .constructor.prototype properties for functions that return Generator
  // objects. For full spec compliance, you may wish to configure your
  // minifier not to mangle the names of these two functions.
  function Generator() {}
  function GeneratorFunction() {}
  function GeneratorFunctionPrototype() {}

  // This is a polyfill for %IteratorPrototype% for environments that
  // don't natively support it.
  var IteratorPrototype = {};
  IteratorPrototype[iteratorSymbol] = function () {
    return this;
  };

  var getProto = Object.getPrototypeOf;
  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
  if (NativeIteratorPrototype &&
      NativeIteratorPrototype !== Op &&
      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
    // This environment has a native %IteratorPrototype%; use it instead
    // of the polyfill.
    IteratorPrototype = NativeIteratorPrototype;
  }

  var Gp = GeneratorFunctionPrototype.prototype =
    Generator.prototype = Object.create(IteratorPrototype);
  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
  GeneratorFunctionPrototype.constructor = GeneratorFunction;
  GeneratorFunctionPrototype[toStringTagSymbol] =
    GeneratorFunction.displayName = "GeneratorFunction";

  // Helper for defining the .next, .throw, and .return methods of the
  // Iterator interface in terms of a single ._invoke method.
  function defineIteratorMethods(prototype) {
    ["next", "throw", "return"].forEach(function(method) {
      prototype[method] = function(arg) {
        return this._invoke(method, arg);
      };
    });
  }

  runtime.isGeneratorFunction = function(genFun) {
    var ctor = typeof genFun === "function" && genFun.constructor;
    return ctor
      ? ctor === GeneratorFunction ||
        // For the native GeneratorFunction constructor, the best we can
        // do is to check its .name property.
        (ctor.displayName || ctor.name) === "GeneratorFunction"
      : false;
  };

  runtime.mark = function(genFun) {
    if (Object.setPrototypeOf) {
      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
    } else {
      genFun.__proto__ = GeneratorFunctionPrototype;
      if (!(toStringTagSymbol in genFun)) {
        genFun[toStringTagSymbol] = "GeneratorFunction";
      }
    }
    genFun.prototype = Object.create(Gp);
    return genFun;
  };

  // Within the body of any async function, `await x` is transformed to
  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
  // `hasOwn.call(value, "__await")` to determine if the yielded value is
  // meant to be awaited.
  runtime.awrap = function(arg) {
    return { __await: arg };
  };

  function AsyncIterator(generator) {
    function invoke(method, arg, resolve, reject) {
      var record = tryCatch(generator[method], generator, arg);
      if (record.type === "throw") {
        reject(record.arg);
      } else {
        var result = record.arg;
        var value = result.value;
        if (value &&
            typeof value === "object" &&
            hasOwn.call(value, "__await")) {
          return Promise.resolve(value.__await).then(function(value) {
            invoke("next", value, resolve, reject);
          }, function(err) {
            invoke("throw", err, resolve, reject);
          });
        }

        return Promise.resolve(value).then(function(unwrapped) {
          // When a yielded Promise is resolved, its final value becomes
          // the .value of the Promise<{value,done}> result for the
          // current iteration. If the Promise is rejected, however, the
          // result for this iteration will be rejected with the same
          // reason. Note that rejections of yielded Promises are not
          // thrown back into the generator function, as is the case
          // when an awaited Promise is rejected. This difference in
          // behavior between yield and await is important, because it
          // allows the consumer to decide what to do with the yielded
          // rejection (swallow it and continue, manually .throw it back
          // into the generator, abandon iteration, whatever). With
          // await, by contrast, there is no opportunity to examine the
          // rejection reason outside the generator function, so the
          // only option is to throw it from the await expression, and
          // let the generator function handle the exception.
          result.value = unwrapped;
          resolve(result);
        }, reject);
      }
    }

    if (typeof process === "object" && process.domain) {
      invoke = process.domain.bind(invoke);
    }

    var previousPromise;

    function enqueue(method, arg) {
      function callInvokeWithMethodAndArg() {
        return new Promise(function(resolve, reject) {
          invoke(method, arg, resolve, reject);
        });
      }

      return previousPromise =
        // If enqueue has been called before, then we want to wait until
        // all previous Promises have been resolved before calling invoke,
        // so that results are always delivered in the correct order. If
        // enqueue has not been called before, then it is important to
        // call invoke immediately, without waiting on a callback to fire,
        // so that the async generator function has the opportunity to do
        // any necessary setup in a predictable way. This predictability
        // is why the Promise constructor synchronously invokes its
        // executor callback, and why async functions synchronously
        // execute code before the first await. Since we implement simple
        // async functions in terms of async generators, it is especially
        // important to get this right, even though it requires care.
        previousPromise ? previousPromise.then(
          callInvokeWithMethodAndArg,
          // Avoid propagating failures to Promises returned by later
          // invocations of the iterator.
          callInvokeWithMethodAndArg
        ) : callInvokeWithMethodAndArg();
    }

    // Define the unified helper method that is used to implement .next,
    // .throw, and .return (see defineIteratorMethods).
    this._invoke = enqueue;
  }

  defineIteratorMethods(AsyncIterator.prototype);
  runtime.AsyncIterator = AsyncIterator;

  // Note that simple async functions are implemented on top of
  // AsyncIterator objects; they just return a Promise for the value of
  // the final result produced by the iterator.
  runtime.async = function(innerFn, outerFn, self, tryLocsList) {
    var iter = new AsyncIterator(
      wrap(innerFn, outerFn, self, tryLocsList)
    );

    return runtime.isGeneratorFunction(outerFn)
      ? iter // If outerFn is a generator, return the full iterator.
      : iter.next().then(function(result) {
          return result.done ? result.value : iter.next();
        });
  };

  function makeInvokeMethod(innerFn, self, context) {
    var state = GenStateSuspendedStart;

    return function invoke(method, arg) {
      if (state === GenStateExecuting) {
        throw new Error("Generator is already running");
      }

      if (state === GenStateCompleted) {
        if (method === "throw") {
          throw arg;
        }

        // Be forgiving, per 25.3.3.3.3 of the spec:
        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
        return doneResult();
      }

      while (true) {
        var delegate = context.delegate;
        if (delegate) {
          if (method === "return" ||
              (method === "throw" && delegate.iterator[method] === undefined)) {
            // A return or throw (when the delegate iterator has no throw
            // method) always terminates the yield* loop.
            context.delegate = null;

            // If the delegate iterator has a return method, give it a
            // chance to clean up.
            var returnMethod = delegate.iterator["return"];
            if (returnMethod) {
              var record = tryCatch(returnMethod, delegate.iterator, arg);
              if (record.type === "throw") {
                // If the return method threw an exception, let that
                // exception prevail over the original return or throw.
                method = "throw";
                arg = record.arg;
                continue;
              }
            }

            if (method === "return") {
              // Continue with the outer return, now that the delegate
              // iterator has been terminated.
              continue;
            }
          }

          var record = tryCatch(
            delegate.iterator[method],
            delegate.iterator,
            arg
          );

          if (record.type === "throw") {
            context.delegate = null;

            // Like returning generator.throw(uncaught), but without the
            // overhead of an extra function call.
            method = "throw";
            arg = record.arg;
            continue;
          }

          // Delegate generator ran and handled its own exceptions so
          // regardless of what the method was, we continue as if it is
          // "next" with an undefined arg.
          method = "next";
          arg = undefined;

          var info = record.arg;
          if (info.done) {
            context[delegate.resultName] = info.value;
            context.next = delegate.nextLoc;
          } else {
            state = GenStateSuspendedYield;
            return info;
          }

          context.delegate = null;
        }

        if (method === "next") {
          // Setting context._sent for legacy support of Babel's
          // function.sent implementation.
          context.sent = context._sent = arg;

        } else if (method === "throw") {
          if (state === GenStateSuspendedStart) {
            state = GenStateCompleted;
            throw arg;
          }

          if (context.dispatchException(arg)) {
            // If the dispatched exception was caught by a catch block,
            // then let that catch block handle the exception normally.
            method = "next";
            arg = undefined;
          }

        } else if (method === "return") {
          context.abrupt("return", arg);
        }

        state = GenStateExecuting;

        var record = tryCatch(innerFn, self, context);
        if (record.type === "normal") {
          // If an exception is thrown from innerFn, we leave state ===
          // GenStateExecuting and loop back for another invocation.
          state = context.done
            ? GenStateCompleted
            : GenStateSuspendedYield;

          var info = {
            value: record.arg,
            done: context.done
          };

          if (record.arg === ContinueSentinel) {
            if (context.delegate && method === "next") {
              // Deliberately forget the last sent value so that we don't
              // accidentally pass it on to the delegate.
              arg = undefined;
            }
          } else {
            return info;
          }

        } else if (record.type === "throw") {
          state = GenStateCompleted;
          // Dispatch the exception by looping back around to the
          // context.dispatchException(arg) call above.
          method = "throw";
          arg = record.arg;
        }
      }
    };
  }

  // Define Generator.prototype.{next,throw,return} in terms of the
  // unified ._invoke helper method.
  defineIteratorMethods(Gp);

  Gp[toStringTagSymbol] = "Generator";

  Gp.toString = function() {
    return "[object Generator]";
  };

  function pushTryEntry(locs) {
    var entry = { tryLoc: locs[0] };

    if (1 in locs) {
      entry.catchLoc = locs[1];
    }

    if (2 in locs) {
      entry.finallyLoc = locs[2];
      entry.afterLoc = locs[3];
    }

    this.tryEntries.push(entry);
  }

  function resetTryEntry(entry) {
    var record = entry.completion || {};
    record.type = "normal";
    delete record.arg;
    entry.completion = record;
  }

  function Context(tryLocsList) {
    // The root entry object (effectively a try statement without a catch
    // or a finally block) gives us a place to store values thrown from
    // locations where there is no enclosing try statement.
    this.tryEntries = [{ tryLoc: "root" }];
    tryLocsList.forEach(pushTryEntry, this);
    this.reset(true);
  }

  runtime.keys = function(object) {
    var keys = [];
    for (var key in object) {
      keys.push(key);
    }
    keys.reverse();

    // Rather than returning an object with a next method, we keep
    // things simple and return the next function itself.
    return function next() {
      while (keys.length) {
        var key = keys.pop();
        if (key in object) {
          next.value = key;
          next.done = false;
          return next;
        }
      }

      // To avoid creating an additional object, we just hang the .value
      // and .done properties off the next function object itself. This
      // also ensures that the minifier will not anonymize the function.
      next.done = true;
      return next;
    };
  };

  function values(iterable) {
    if (iterable) {
      var iteratorMethod = iterable[iteratorSymbol];
      if (iteratorMethod) {
        return iteratorMethod.call(iterable);
      }

      if (typeof iterable.next === "function") {
        return iterable;
      }

      if (!isNaN(iterable.length)) {
        var i = -1, next = function next() {
          while (++i < iterable.length) {
            if (hasOwn.call(iterable, i)) {
              next.value = iterable[i];
              next.done = false;
              return next;
            }
          }

          next.value = undefined;
          next.done = true;

          return next;
        };

        return next.next = next;
      }
    }

    // Return an iterator with no values.
    return { next: doneResult };
  }
  runtime.values = values;

  function doneResult() {
    return { value: undefined, done: true };
  }

  Context.prototype = {
    constructor: Context,

    reset: function(skipTempReset) {
      this.prev = 0;
      this.next = 0;
      // Resetting context._sent for legacy support of Babel's
      // function.sent implementation.
      this.sent = this._sent = undefined;
      this.done = false;
      this.delegate = null;

      this.tryEntries.forEach(resetTryEntry);

      if (!skipTempReset) {
        for (var name in this) {
          // Not sure about the optimal order of these conditions:
          if (name.charAt(0) === "t" &&
              hasOwn.call(this, name) &&
              !isNaN(+name.slice(1))) {
            this[name] = undefined;
          }
        }
      }
    },

    stop: function() {
      this.done = true;

      var rootEntry = this.tryEntries[0];
      var rootRecord = rootEntry.completion;
      if (rootRecord.type === "throw") {
        throw rootRecord.arg;
      }

      return this.rval;
    },

    dispatchException: function(exception) {
      if (this.done) {
        throw exception;
      }

      var context = this;
      function handle(loc, caught) {
        record.type = "throw";
        record.arg = exception;
        context.next = loc;
        return !!caught;
      }

      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        var record = entry.completion;

        if (entry.tryLoc === "root") {
          // Exception thrown outside of any try block that could handle
          // it, so set the completion value of the entire function to
          // throw the exception.
          return handle("end");
        }

        if (entry.tryLoc <= this.prev) {
          var hasCatch = hasOwn.call(entry, "catchLoc");
          var hasFinally = hasOwn.call(entry, "finallyLoc");

          if (hasCatch && hasFinally) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            } else if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else if (hasCatch) {
            if (this.prev < entry.catchLoc) {
              return handle(entry.catchLoc, true);
            }

          } else if (hasFinally) {
            if (this.prev < entry.finallyLoc) {
              return handle(entry.finallyLoc);
            }

          } else {
            throw new Error("try statement without catch or finally");
          }
        }
      }
    },

    abrupt: function(type, arg) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc <= this.prev &&
            hasOwn.call(entry, "finallyLoc") &&
            this.prev < entry.finallyLoc) {
          var finallyEntry = entry;
          break;
        }
      }

      if (finallyEntry &&
          (type === "break" ||
           type === "continue") &&
          finallyEntry.tryLoc <= arg &&
          arg <= finallyEntry.finallyLoc) {
        // Ignore the finally entry if control is not jumping to a
        // location outside the try/catch block.
        finallyEntry = null;
      }

      var record = finallyEntry ? finallyEntry.completion : {};
      record.type = type;
      record.arg = arg;

      if (finallyEntry) {
        this.next = finallyEntry.finallyLoc;
      } else {
        this.complete(record);
      }

      return ContinueSentinel;
    },

    complete: function(record, afterLoc) {
      if (record.type === "throw") {
        throw record.arg;
      }

      if (record.type === "break" ||
          record.type === "continue") {
        this.next = record.arg;
      } else if (record.type === "return") {
        this.rval = record.arg;
        this.next = "end";
      } else if (record.type === "normal" && afterLoc) {
        this.next = afterLoc;
      }
    },

    finish: function(finallyLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.finallyLoc === finallyLoc) {
          this.complete(entry.completion, entry.afterLoc);
          resetTryEntry(entry);
          return ContinueSentinel;
        }
      }
    },

    "catch": function(tryLoc) {
      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
        var entry = this.tryEntries[i];
        if (entry.tryLoc === tryLoc) {
          var record = entry.completion;
          if (record.type === "throw") {
            var thrown = record.arg;
            resetTryEntry(entry);
          }
          return thrown;
        }
      }

      // The context.catch method must only be called with a location
      // argument that corresponds to a known catch block.
      throw new Error("illegal catch attempt");
    },

    delegateYield: function(iterable, resultName, nextLoc) {
      this.delegate = {
        iterator: values(iterable),
        resultName: resultName,
        nextLoc: nextLoc
      };

      return ContinueSentinel;
    }
  };
})(
  // Among the various tricks for obtaining a reference to the global
  // object, this seems to be the most reliable technique that does not
  // use indirect eval (which violates Content Security Policy).
  typeof global === "object" ? global :
  typeof window === "object" ? window :
  typeof self === "object" ? self : this
);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"_process":14}],16:[function(require,module,exports){
/* shifty - v1.5.3 - 2016-11-29 - http://jeremyckahn.github.io/shifty */
;(function () {
  var root = this || Function('return this')();

/**
 * Shifty Core
 * By Jeremy Kahn - jeremyckahn@gmail.com
 */

var Tweenable = (function () {

  'use strict';

  // Aliases that get defined later in this function
  var formula;

  // CONSTANTS
  var DEFAULT_SCHEDULE_FUNCTION;
  var DEFAULT_EASING = 'linear';
  var DEFAULT_DURATION = 500;
  var UPDATE_TIME = 1000 / 60;

  var _now = Date.now
       ? Date.now
       : function () {return +new Date();};

  var now = typeof SHIFTY_DEBUG_NOW !== 'undefined' ? SHIFTY_DEBUG_NOW : _now;

  if (typeof window !== 'undefined') {
    // requestAnimationFrame() shim by Paul Irish (modified for Shifty)
    // http://paulirish.com/2011/requestanimationframe-for-smart-animating/
    DEFAULT_SCHEDULE_FUNCTION = window.requestAnimationFrame
       || window.webkitRequestAnimationFrame
       || window.oRequestAnimationFrame
       || window.msRequestAnimationFrame
       || (window.mozCancelRequestAnimationFrame
       && window.mozRequestAnimationFrame)
       || setTimeout;
  } else {
    DEFAULT_SCHEDULE_FUNCTION = setTimeout;
  }

  function noop () {
    // NOOP!
  }

  /**
   * Handy shortcut for doing a for-in loop. This is not a "normal" each
   * function, it is optimized for Shifty.  The iterator function only receives
   * the property name, not the value.
   * @param {Object} obj
   * @param {Function(string)} fn
   * @private
   */
  function each (obj, fn) {
    var key;
    for (key in obj) {
      if (Object.hasOwnProperty.call(obj, key)) {
        fn(key);
      }
    }
  }

  /**
   * Perform a shallow copy of Object properties.
   * @param {Object} targetObject The object to copy into
   * @param {Object} srcObject The object to copy from
   * @return {Object} A reference to the augmented `targetObj` Object
   * @private
   */
  function shallowCopy (targetObj, srcObj) {
    each(srcObj, function (prop) {
      targetObj[prop] = srcObj[prop];
    });

    return targetObj;
  }

  /**
   * Copies each property from src onto target, but only if the property to
   * copy to target is undefined.
   * @param {Object} target Missing properties in this Object are filled in
   * @param {Object} src
   * @private
   */
  function defaults (target, src) {
    each(src, function (prop) {
      if (typeof target[prop] === 'undefined') {
        target[prop] = src[prop];
      }
    });
  }

  /**
   * Calculates the interpolated tween values of an Object for a given
   * timestamp.
   * @param {Number} forPosition The position to compute the state for.
   * @param {Object} currentState Current state properties.
   * @param {Object} originalState: The original state properties the Object is
   * tweening from.
   * @param {Object} targetState: The destination state properties the Object
   * is tweening to.
   * @param {number} duration: The length of the tween in milliseconds.
   * @param {number} timestamp: The UNIX epoch time at which the tween began.
   * @param {Object} easing: This Object's keys must correspond to the keys in
   * targetState.
   * @private
   */
  function tweenProps (forPosition, currentState, originalState, targetState,
    duration, timestamp, easing) {
    var normalizedPosition =
        forPosition < timestamp ? 0 : (forPosition - timestamp) / duration;


    var prop;
    var easingObjectProp;
    var easingFn;
    for (prop in currentState) {
      if (currentState.hasOwnProperty(prop)) {
        easingObjectProp = easing[prop];
        easingFn = typeof easingObjectProp === 'function'
          ? easingObjectProp
          : formula[easingObjectProp];

        currentState[prop] = tweenProp(
          originalState[prop],
          targetState[prop],
          easingFn,
          normalizedPosition
        );
      }
    }

    return currentState;
  }

  /**
   * Tweens a single property.
   * @param {number} start The value that the tween started from.
   * @param {number} end The value that the tween should end at.
   * @param {Function} easingFunc The easing curve to apply to the tween.
   * @param {number} position The normalized position (between 0.0 and 1.0) to
   * calculate the midpoint of 'start' and 'end' against.
   * @return {number} The tweened value.
   * @private
   */
  function tweenProp (start, end, easingFunc, position) {
    return start + (end - start) * easingFunc(position);
  }

  /**
   * Applies a filter to Tweenable instance.
   * @param {Tweenable} tweenable The `Tweenable` instance to call the filter
   * upon.
   * @param {String} filterName The name of the filter to apply.
   * @private
   */
  function applyFilter (tweenable, filterName) {
    var filters = Tweenable.prototype.filter;
    var args = tweenable._filterArgs;

    each(filters, function (name) {
      if (typeof filters[name][filterName] !== 'undefined') {
        filters[name][filterName].apply(tweenable, args);
      }
    });
  }

  var timeoutHandler_endTime;
  var timeoutHandler_currentTime;
  var timeoutHandler_isEnded;
  var timeoutHandler_offset;
  /**
   * Handles the update logic for one step of a tween.
   * @param {Tweenable} tweenable
   * @param {number} timestamp
   * @param {number} delay
   * @param {number} duration
   * @param {Object} currentState
   * @param {Object} originalState
   * @param {Object} targetState
   * @param {Object} easing
   * @param {Function(Object, *, number)} step
   * @param {Function(Function,number)}} schedule
   * @param {number=} opt_currentTimeOverride Needed for accurate timestamp in
   * Tweenable#seek.
   * @private
   */
  function timeoutHandler (tweenable, timestamp, delay, duration, currentState,
    originalState, targetState, easing, step, schedule,
    opt_currentTimeOverride) {

    timeoutHandler_endTime = timestamp + delay + duration;

    timeoutHandler_currentTime =
    Math.min(opt_currentTimeOverride || now(), timeoutHandler_endTime);

    timeoutHandler_isEnded =
      timeoutHandler_currentTime >= timeoutHandler_endTime;

    timeoutHandler_offset = duration - (
      timeoutHandler_endTime - timeoutHandler_currentTime);

    if (tweenable.isPlaying()) {
      if (timeoutHandler_isEnded) {
        step(targetState, tweenable._attachment, timeoutHandler_offset);
        tweenable.stop(true);
      } else {
        tweenable._scheduleId =
          schedule(tweenable._timeoutHandler, UPDATE_TIME);

        applyFilter(tweenable, 'beforeTween');

        // If the animation has not yet reached the start point (e.g., there was
        // delay that has not yet completed), just interpolate the starting
        // position of the tween.
        if (timeoutHandler_currentTime < (timestamp + delay)) {
          tweenProps(1, currentState, originalState, targetState, 1, 1, easing);
        } else {
          tweenProps(timeoutHandler_currentTime, currentState, originalState,
            targetState, duration, timestamp + delay, easing);
        }

        applyFilter(tweenable, 'afterTween');

        step(currentState, tweenable._attachment, timeoutHandler_offset);
      }
    }
  }


  /**
   * Creates a usable easing Object from a string, a function or another easing
   * Object.  If `easing` is an Object, then this function clones it and fills
   * in the missing properties with `"linear"`.
   * @param {Object.<string|Function>} fromTweenParams
   * @param {Object|string|Function} easing
   * @return {Object.<string|Function>}
   * @private
   */
  function composeEasingObject (fromTweenParams, easing) {
    var composedEasing = {};
    var typeofEasing = typeof easing;

    if (typeofEasing === 'string' || typeofEasing === 'function') {
      each(fromTweenParams, function (prop) {
        composedEasing[prop] = easing;
      });
    } else {
      each(fromTweenParams, function (prop) {
        if (!composedEasing[prop]) {
          composedEasing[prop] = easing[prop] || DEFAULT_EASING;
        }
      });
    }

    return composedEasing;
  }

  /**
   * Tweenable constructor.
   * @class Tweenable
   * @param {Object=} opt_initialState The values that the initial tween should
   * start at if a `from` object is not provided to `{{#crossLink
   * "Tweenable/tween:method"}}{{/crossLink}}` or `{{#crossLink
   * "Tweenable/setConfig:method"}}{{/crossLink}}`.
   * @param {Object=} opt_config Configuration object to be passed to
   * `{{#crossLink "Tweenable/setConfig:method"}}{{/crossLink}}`.
   * @module Tweenable
   * @constructor
   */
  function Tweenable (opt_initialState, opt_config) {
    this._currentState = opt_initialState || {};
    this._configured = false;
    this._scheduleFunction = DEFAULT_SCHEDULE_FUNCTION;

    // To prevent unnecessary calls to setConfig do not set default
    // configuration here.  Only set default configuration immediately before
    // tweening if none has been set.
    if (typeof opt_config !== 'undefined') {
      this.setConfig(opt_config);
    }
  }

  /**
   * Configure and start a tween.
   * @method tween
   * @param {Object=} opt_config Configuration object to be passed to
   * `{{#crossLink "Tweenable/setConfig:method"}}{{/crossLink}}`.
   * @chainable
   */
  Tweenable.prototype.tween = function (opt_config) {
    if (this._isTweening) {
      return this;
    }

    // Only set default config if no configuration has been set previously and
    // none is provided now.
    if (opt_config !== undefined || !this._configured) {
      this.setConfig(opt_config);
    }

    this._timestamp = now();
    this._start(this.get(), this._attachment);
    return this.resume();
  };

  /**
   * Configure a tween that will start at some point in the future.
   *
   * @method setConfig
   * @param {Object} config The following values are valid:
   * - __from__ (_Object=_): Starting position.  If omitted, `{{#crossLink
   *   "Tweenable/get:method"}}get(){{/crossLink}}` is used.
   * - __to__ (_Object=_): Ending position.
   * - __duration__ (_number=_): How many milliseconds to animate for.
   * - __delay__ (_delay=_): How many milliseconds to wait before starting the
   *   tween.
   * - __start__ (_Function(Object, *)_): Function to execute when the tween
   *   begins.  Receives the state of the tween as the first parameter and
   *   `attachment` as the second parameter.
   * - __step__ (_Function(Object, *, number)_): Function to execute on every
   *   tick.  Receives `{{#crossLink
   *   "Tweenable/get:method"}}get(){{/crossLink}}` as the first parameter,
   *   `attachment` as the second parameter, and the time elapsed since the
   *   start of the tween as the third. This function is not called on the
   *   final step of the animation, but `finish` is.
   * - __finish__ (_Function(Object, *)_): Function to execute upon tween
   *   completion.  Receives the state of the tween as the first parameter and
   *   `attachment` as the second parameter.
   * - __easing__ (_Object.<string|Function>|string|Function=_): Easing curve
   *   name(s) or function(s) to use for the tween.
   * - __attachment__ (_*_): Cached value that is passed to the
   *   `step`/`start`/`finish` methods.
   * @chainable
   */
  Tweenable.prototype.setConfig = function (config) {
    config = config || {};
    this._configured = true;

    // Attach something to this Tweenable instance (e.g.: a DOM element, an
    // object, a string, etc.);
    this._attachment = config.attachment;

    // Init the internal state
    this._pausedAtTime = null;
    this._scheduleId = null;
    this._delay = config.delay || 0;
    this._start = config.start || noop;
    this._step = config.step || noop;
    this._finish = config.finish || noop;
    this._duration = config.duration || DEFAULT_DURATION;
    this._currentState = shallowCopy({}, config.from || this.get());
    this._originalState = this.get();
    this._targetState = shallowCopy({}, config.to || this.get());

    var self = this;
    this._timeoutHandler = function () {
      timeoutHandler(self,
        self._timestamp,
        self._delay,
        self._duration,
        self._currentState,
        self._originalState,
        self._targetState,
        self._easing,
        self._step,
        self._scheduleFunction
      );
    };

    // Aliases used below
    var currentState = this._currentState;
    var targetState = this._targetState;

    // Ensure that there is always something to tween to.
    defaults(targetState, currentState);

    this._easing = composeEasingObject(
      currentState, config.easing || DEFAULT_EASING);

    this._filterArgs =
      [currentState, this._originalState, targetState, this._easing];

    applyFilter(this, 'tweenCreated');
    return this;
  };

  /**
   * @method get
   * @return {Object} The current state.
   */
  Tweenable.prototype.get = function () {
    return shallowCopy({}, this._currentState);
  };

  /**
   * @method set
   * @param {Object} state The current state.
   */
  Tweenable.prototype.set = function (state) {
    this._currentState = state;
  };

  /**
   * Pause a tween.  Paused tweens can be resumed from the point at which they
   * were paused.  This is different from `{{#crossLink
   * "Tweenable/stop:method"}}{{/crossLink}}`, as that method
   * causes a tween to start over when it is resumed.
   * @method pause
   * @chainable
   */
  Tweenable.prototype.pause = function () {
    this._pausedAtTime = now();
    this._isPaused = true;
    return this;
  };

  /**
   * Resume a paused tween.
   * @method resume
   * @chainable
   */
  Tweenable.prototype.resume = function () {
    if (this._isPaused) {
      this._timestamp += now() - this._pausedAtTime;
    }

    this._isPaused = false;
    this._isTweening = true;

    this._timeoutHandler();

    return this;
  };

  /**
   * Move the state of the animation to a specific point in the tween's
   * timeline.  If the animation is not running, this will cause the `step`
   * handlers to be called.
   * @method seek
   * @param {millisecond} millisecond The millisecond of the animation to seek
   * to.  This must not be less than `0`.
   * @chainable
   */
  Tweenable.prototype.seek = function (millisecond) {
    millisecond = Math.max(millisecond, 0);
    var currentTime = now();

    if ((this._timestamp + millisecond) === 0) {
      return this;
    }

    this._timestamp = currentTime - millisecond;

    if (!this.isPlaying()) {
      this._isTweening = true;
      this._isPaused = false;

      // If the animation is not running, call timeoutHandler to make sure that
      // any step handlers are run.
      timeoutHandler(this,
        this._timestamp,
        this._delay,
        this._duration,
        this._currentState,
        this._originalState,
        this._targetState,
        this._easing,
        this._step,
        this._scheduleFunction,
        currentTime
      );

      this.pause();
    }

    return this;
  };

  /**
   * Stops and cancels a tween.
   * @param {boolean=} gotoEnd If `false` or omitted, the tween just stops at
   * its current state, and the `finish` handler is not invoked.  If `true`,
   * the tweened object's values are instantly set to the target values, and
   * `finish` is invoked.
   * @method stop
   * @chainable
   */
  Tweenable.prototype.stop = function (gotoEnd) {
    this._isTweening = false;
    this._isPaused = false;
    this._timeoutHandler = noop;

    (root.cancelAnimationFrame            ||
    root.webkitCancelAnimationFrame     ||
    root.oCancelAnimationFrame          ||
    root.msCancelAnimationFrame         ||
    root.mozCancelRequestAnimationFrame ||
    root.clearTimeout)(this._scheduleId);

    if (gotoEnd) {
      applyFilter(this, 'beforeTween');
      tweenProps(
        1,
        this._currentState,
        this._originalState,
        this._targetState,
        1,
        0,
        this._easing
      );
      applyFilter(this, 'afterTween');
      applyFilter(this, 'afterTweenEnd');
      this._finish.call(this, this._currentState, this._attachment);
    }

    return this;
  };

  /**
   * @method isPlaying
   * @return {boolean} Whether or not a tween is running.
   */
  Tweenable.prototype.isPlaying = function () {
    return this._isTweening && !this._isPaused;
  };

  /**
   * Set a custom schedule function.
   *
   * If a custom function is not set,
   * [`requestAnimationFrame`](https://developer.mozilla.org/en-US/docs/Web/API/window.requestAnimationFrame)
   * is used if available, otherwise
   * [`setTimeout`](https://developer.mozilla.org/en-US/docs/Web/API/Window.setTimeout)
   * is used.
   * @method setScheduleFunction
   * @param {Function(Function,number)} scheduleFunction The function to be
   * used to schedule the next frame to be rendered.
   */
  Tweenable.prototype.setScheduleFunction = function (scheduleFunction) {
    this._scheduleFunction = scheduleFunction;
  };

  /**
   * `delete` all "own" properties.  Call this when the `Tweenable` instance
   * is no longer needed to free memory.
   * @method dispose
   */
  Tweenable.prototype.dispose = function () {
    var prop;
    for (prop in this) {
      if (this.hasOwnProperty(prop)) {
        delete this[prop];
      }
    }
  };

  /**
   * Filters are used for transforming the properties of a tween at various
   * points in a Tweenable's life cycle.  See the README for more info on this.
   * @private
   */
  Tweenable.prototype.filter = {};

  /**
   * This object contains all of the tweens available to Shifty.  It is
   * extensible - simply attach properties to the `Tweenable.prototype.formula`
   * Object following the same format as `linear`.
   *
   * `pos` should be a normalized `number` (between 0 and 1).
   * @property formula
   * @type {Object(function)}
   */
  Tweenable.prototype.formula = {
    linear: function (pos) {
      return pos;
    }
  };

  formula = Tweenable.prototype.formula;

  shallowCopy(Tweenable, {
    'now': now
    ,'each': each
    ,'tweenProps': tweenProps
    ,'tweenProp': tweenProp
    ,'applyFilter': applyFilter
    ,'shallowCopy': shallowCopy
    ,'defaults': defaults
    ,'composeEasingObject': composeEasingObject
  });

  // `root` is provided in the intro/outro files.

  // A hook used for unit testing.
  if (typeof SHIFTY_DEBUG_NOW === 'function') {
    root.timeoutHandler = timeoutHandler;
  }

  // Bootstrap Tweenable appropriately for the environment.
  if (typeof exports === 'object') {
    // CommonJS
    module.exports = Tweenable;
  } else if (typeof define === 'function' && define.amd) {
    // AMD
    define(function () {return Tweenable;});
  } else if (typeof root.Tweenable === 'undefined') {
    // Browser: Make `Tweenable` globally accessible.
    root.Tweenable = Tweenable;
  }

  return Tweenable;

} ());

/*!
 * All equations are adapted from Thomas Fuchs'
 * [Scripty2](https://github.com/madrobby/scripty2/blob/master/src/effects/transitions/penner.js).
 *
 * Based on Easing Equations (c) 2003 [Robert
 * Penner](http://www.robertpenner.com/), all rights reserved. This work is
 * [subject to terms](http://www.robertpenner.com/easing_terms_of_use.html).
 */

/*!
 *  TERMS OF USE - EASING EQUATIONS
 *  Open source under the BSD License.
 *  Easing Equations (c) 2003 Robert Penner, all rights reserved.
 */

;(function () {

  Tweenable.shallowCopy(Tweenable.prototype.formula, {
    easeInQuad: function (pos) {
      return Math.pow(pos, 2);
    },

    easeOutQuad: function (pos) {
      return -(Math.pow((pos - 1), 2) - 1);
    },

    easeInOutQuad: function (pos) {
      if ((pos /= 0.5) < 1) {return 0.5 * Math.pow(pos,2);}
      return -0.5 * ((pos -= 2) * pos - 2);
    },

    easeInCubic: function (pos) {
      return Math.pow(pos, 3);
    },

    easeOutCubic: function (pos) {
      return (Math.pow((pos - 1), 3) + 1);
    },

    easeInOutCubic: function (pos) {
      if ((pos /= 0.5) < 1) {return 0.5 * Math.pow(pos,3);}
      return 0.5 * (Math.pow((pos - 2),3) + 2);
    },

    easeInQuart: function (pos) {
      return Math.pow(pos, 4);
    },

    easeOutQuart: function (pos) {
      return -(Math.pow((pos - 1), 4) - 1);
    },

    easeInOutQuart: function (pos) {
      if ((pos /= 0.5) < 1) {return 0.5 * Math.pow(pos,4);}
      return -0.5 * ((pos -= 2) * Math.pow(pos,3) - 2);
    },

    easeInQuint: function (pos) {
      return Math.pow(pos, 5);
    },

    easeOutQuint: function (pos) {
      return (Math.pow((pos - 1), 5) + 1);
    },

    easeInOutQuint: function (pos) {
      if ((pos /= 0.5) < 1) {return 0.5 * Math.pow(pos,5);}
      return 0.5 * (Math.pow((pos - 2),5) + 2);
    },

    easeInSine: function (pos) {
      return -Math.cos(pos * (Math.PI / 2)) + 1;
    },

    easeOutSine: function (pos) {
      return Math.sin(pos * (Math.PI / 2));
    },

    easeInOutSine: function (pos) {
      return (-0.5 * (Math.cos(Math.PI * pos) - 1));
    },

    easeInExpo: function (pos) {
      return (pos === 0) ? 0 : Math.pow(2, 10 * (pos - 1));
    },

    easeOutExpo: function (pos) {
      return (pos === 1) ? 1 : -Math.pow(2, -10 * pos) + 1;
    },

    easeInOutExpo: function (pos) {
      if (pos === 0) {return 0;}
      if (pos === 1) {return 1;}
      if ((pos /= 0.5) < 1) {return 0.5 * Math.pow(2,10 * (pos - 1));}
      return 0.5 * (-Math.pow(2, -10 * --pos) + 2);
    },

    easeInCirc: function (pos) {
      return -(Math.sqrt(1 - (pos * pos)) - 1);
    },

    easeOutCirc: function (pos) {
      return Math.sqrt(1 - Math.pow((pos - 1), 2));
    },

    easeInOutCirc: function (pos) {
      if ((pos /= 0.5) < 1) {return -0.5 * (Math.sqrt(1 - pos * pos) - 1);}
      return 0.5 * (Math.sqrt(1 - (pos -= 2) * pos) + 1);
    },

    easeOutBounce: function (pos) {
      if ((pos) < (1 / 2.75)) {
        return (7.5625 * pos * pos);
      } else if (pos < (2 / 2.75)) {
        return (7.5625 * (pos -= (1.5 / 2.75)) * pos + 0.75);
      } else if (pos < (2.5 / 2.75)) {
        return (7.5625 * (pos -= (2.25 / 2.75)) * pos + 0.9375);
      } else {
        return (7.5625 * (pos -= (2.625 / 2.75)) * pos + 0.984375);
      }
    },

    easeInBack: function (pos) {
      var s = 1.70158;
      return (pos) * pos * ((s + 1) * pos - s);
    },

    easeOutBack: function (pos) {
      var s = 1.70158;
      return (pos = pos - 1) * pos * ((s + 1) * pos + s) + 1;
    },

    easeInOutBack: function (pos) {
      var s = 1.70158;
      if ((pos /= 0.5) < 1) {
        return 0.5 * (pos * pos * (((s *= (1.525)) + 1) * pos - s));
      }
      return 0.5 * ((pos -= 2) * pos * (((s *= (1.525)) + 1) * pos + s) + 2);
    },

    elastic: function (pos) {
      // jshint maxlen:90
      return -1 * Math.pow(4,-8 * pos) * Math.sin((pos * 6 - 1) * (2 * Math.PI) / 2) + 1;
    },

    swingFromTo: function (pos) {
      var s = 1.70158;
      return ((pos /= 0.5) < 1) ?
          0.5 * (pos * pos * (((s *= (1.525)) + 1) * pos - s)) :
          0.5 * ((pos -= 2) * pos * (((s *= (1.525)) + 1) * pos + s) + 2);
    },

    swingFrom: function (pos) {
      var s = 1.70158;
      return pos * pos * ((s + 1) * pos - s);
    },

    swingTo: function (pos) {
      var s = 1.70158;
      return (pos -= 1) * pos * ((s + 1) * pos + s) + 1;
    },

    bounce: function (pos) {
      if (pos < (1 / 2.75)) {
        return (7.5625 * pos * pos);
      } else if (pos < (2 / 2.75)) {
        return (7.5625 * (pos -= (1.5 / 2.75)) * pos + 0.75);
      } else if (pos < (2.5 / 2.75)) {
        return (7.5625 * (pos -= (2.25 / 2.75)) * pos + 0.9375);
      } else {
        return (7.5625 * (pos -= (2.625 / 2.75)) * pos + 0.984375);
      }
    },

    bouncePast: function (pos) {
      if (pos < (1 / 2.75)) {
        return (7.5625 * pos * pos);
      } else if (pos < (2 / 2.75)) {
        return 2 - (7.5625 * (pos -= (1.5 / 2.75)) * pos + 0.75);
      } else if (pos < (2.5 / 2.75)) {
        return 2 - (7.5625 * (pos -= (2.25 / 2.75)) * pos + 0.9375);
      } else {
        return 2 - (7.5625 * (pos -= (2.625 / 2.75)) * pos + 0.984375);
      }
    },

    easeFromTo: function (pos) {
      if ((pos /= 0.5) < 1) {return 0.5 * Math.pow(pos,4);}
      return -0.5 * ((pos -= 2) * Math.pow(pos,3) - 2);
    },

    easeFrom: function (pos) {
      return Math.pow(pos,4);
    },

    easeTo: function (pos) {
      return Math.pow(pos,0.25);
    }
  });

}());

// jshint maxlen:100
/**
 * The Bezier magic in this file is adapted/copied almost wholesale from
 * [Scripty2](https://github.com/madrobby/scripty2/blob/master/src/effects/transitions/cubic-bezier.js),
 * which was adapted from Apple code (which probably came from
 * [here](http://opensource.apple.com/source/WebCore/WebCore-955.66/platform/graphics/UnitBezier.h)).
 * Special thanks to Apple and Thomas Fuchs for much of this code.
 */

/**
 *  Copyright (c) 2006 Apple Computer, Inc. All rights reserved.
 *
 *  Redistribution and use in source and binary forms, with or without
 *  modification, are permitted provided that the following conditions are met:
 *
 *  1. Redistributions of source code must retain the above copyright notice,
 *  this list of conditions and the following disclaimer.
 *
 *  2. Redistributions in binary form must reproduce the above copyright notice,
 *  this list of conditions and the following disclaimer in the documentation
 *  and/or other materials provided with the distribution.
 *
 *  3. Neither the name of the copyright holder(s) nor the names of any
 *  contributors may be used to endorse or promote products derived from
 *  this software without specific prior written permission.
 *
 *  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 *  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 *  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 *  ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 *  LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 *  CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 *  SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 *  INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 *  CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 *  ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 *  POSSIBILITY OF SUCH DAMAGE.
 */
;(function () {
  // port of webkit cubic bezier handling by http://www.netzgesta.de/dev/
  function cubicBezierAtTime(t,p1x,p1y,p2x,p2y,duration) {
    var ax = 0,bx = 0,cx = 0,ay = 0,by = 0,cy = 0;
    function sampleCurveX(t) {
      return ((ax * t + bx) * t + cx) * t;
    }
    function sampleCurveY(t) {
      return ((ay * t + by) * t + cy) * t;
    }
    function sampleCurveDerivativeX(t) {
      return (3.0 * ax * t + 2.0 * bx) * t + cx;
    }
    function solveEpsilon(duration) {
      return 1.0 / (200.0 * duration);
    }
    function solve(x,epsilon) {
      return sampleCurveY(solveCurveX(x, epsilon));
    }
    function fabs(n) {
      if (n >= 0) {
        return n;
      } else {
        return 0 - n;
      }
    }
    function solveCurveX(x, epsilon) {
      var t0,t1,t2,x2,d2,i;
      for (t2 = x, i = 0; i < 8; i++) {
        x2 = sampleCurveX(t2) - x;
        if (fabs(x2) < epsilon) {
          return t2;
        }
        d2 = sampleCurveDerivativeX(t2);
        if (fabs(d2) < 1e-6) {
          break;
        }
        t2 = t2 - x2 / d2;
      }
      t0 = 0.0;
      t1 = 1.0;
      t2 = x;
      if (t2 < t0) {
        return t0;
      }
      if (t2 > t1) {
        return t1;
      }
      while (t0 < t1) {
        x2 = sampleCurveX(t2);
        if (fabs(x2 - x) < epsilon) {
          return t2;
        }
        if (x > x2) {
          t0 = t2;
        }else {
          t1 = t2;
        }
        t2 = (t1 - t0) * 0.5 + t0;
      }
      return t2; // Failure.
    }
    cx = 3.0 * p1x;
    bx = 3.0 * (p2x - p1x) - cx;
    ax = 1.0 - cx - bx;
    cy = 3.0 * p1y;
    by = 3.0 * (p2y - p1y) - cy;
    ay = 1.0 - cy - by;
    return solve(t, solveEpsilon(duration));
  }
  /**
   *  getCubicBezierTransition(x1, y1, x2, y2) -> Function
   *
   *  Generates a transition easing function that is compatible
   *  with WebKit's CSS transitions `-webkit-transition-timing-function`
   *  CSS property.
   *
   *  The W3C has more information about CSS3 transition timing functions:
   *  http://www.w3.org/TR/css3-transitions/#transition-timing-function_tag
   *
   *  @param {number} x1
   *  @param {number} y1
   *  @param {number} x2
   *  @param {number} y2
   *  @return {function}
   *  @private
   */
  function getCubicBezierTransition (x1, y1, x2, y2) {
    return function (pos) {
      return cubicBezierAtTime(pos,x1,y1,x2,y2,1);
    };
  }
  // End ported code

  /**
   * Create a Bezier easing function and attach it to `{{#crossLink
   * "Tweenable/formula:property"}}Tweenable#formula{{/crossLink}}`.  This
   * function gives you total control over the easing curve.  Matthew Lein's
   * [Ceaser](http://matthewlein.com/ceaser/) is a useful tool for visualizing
   * the curves you can make with this function.
   * @method setBezierFunction
   * @param {string} name The name of the easing curve.  Overwrites the old
   * easing function on `{{#crossLink
   * "Tweenable/formula:property"}}Tweenable#formula{{/crossLink}}` if it
   * exists.
   * @param {number} x1
   * @param {number} y1
   * @param {number} x2
   * @param {number} y2
   * @return {function} The easing function that was attached to
   * Tweenable.prototype.formula.
   */
  Tweenable.setBezierFunction = function (name, x1, y1, x2, y2) {
    var cubicBezierTransition = getCubicBezierTransition(x1, y1, x2, y2);
    cubicBezierTransition.displayName = name;
    cubicBezierTransition.x1 = x1;
    cubicBezierTransition.y1 = y1;
    cubicBezierTransition.x2 = x2;
    cubicBezierTransition.y2 = y2;

    return Tweenable.prototype.formula[name] = cubicBezierTransition;
  };


  /**
   * `delete` an easing function from `{{#crossLink
   * "Tweenable/formula:property"}}Tweenable#formula{{/crossLink}}`.  Be
   * careful with this method, as it `delete`s whatever easing formula matches
   * `name` (which means you can delete standard Shifty easing functions).
   * @method unsetBezierFunction
   * @param {string} name The name of the easing function to delete.
   * @return {function}
   */
  Tweenable.unsetBezierFunction = function (name) {
    delete Tweenable.prototype.formula[name];
  };

})();

;(function () {

  function getInterpolatedValues (
    from, current, targetState, position, easing, delay) {
    return Tweenable.tweenProps(
      position, current, from, targetState, 1, delay, easing);
  }

  // Fake a Tweenable and patch some internals.  This approach allows us to
  // skip uneccessary processing and object recreation, cutting down on garbage
  // collection pauses.
  var mockTweenable = new Tweenable();
  mockTweenable._filterArgs = [];

  /**
   * Compute the midpoint of two Objects.  This method effectively calculates a
   * specific frame of animation that `{{#crossLink
   * "Tweenable/tween:method"}}{{/crossLink}}` does many times over the course
   * of a full tween.
   *
   *     var interpolatedValues = Tweenable.interpolate({
   *       width: '100px',
   *       opacity: 0,
   *       color: '#fff'
   *     }, {
   *       width: '200px',
   *       opacity: 1,
   *       color: '#000'
   *     }, 0.5);
   *
   *     console.log(interpolatedValues);
   *     // {opacity: 0.5, width: "150px", color: "rgb(127,127,127)"}
   *
   * @static
   * @method interpolate
   * @param {Object} from The starting values to tween from.
   * @param {Object} targetState The ending values to tween to.
   * @param {number} position The normalized position value (between `0.0` and
   * `1.0`) to interpolate the values between `from` and `to` for.  `from`
   * represents `0` and `to` represents `1`.
   * @param {Object.<string|Function>|string|Function} easing The easing
   * curve(s) to calculate the midpoint against.  You can reference any easing
   * function attached to `Tweenable.prototype.formula`, or provide the easing
   * function(s) directly.  If omitted, this defaults to "linear".
   * @param {number=} opt_delay Optional delay to pad the beginning of the
   * interpolated tween with.  This increases the range of `position` from (`0`
   * through `1`) to (`0` through `1 + opt_delay`).  So, a delay of `0.5` would
   * increase all valid values of `position` to numbers between `0` and `1.5`.
   * @return {Object}
   */
  Tweenable.interpolate = function (
    from, targetState, position, easing, opt_delay) {

    var current = Tweenable.shallowCopy({}, from);
    var delay = opt_delay || 0;
    var easingObject = Tweenable.composeEasingObject(
      from, easing || 'linear');

    mockTweenable.set({});

    // Alias and reuse the _filterArgs array instead of recreating it.
    var filterArgs = mockTweenable._filterArgs;
    filterArgs.length = 0;
    filterArgs[0] = current;
    filterArgs[1] = from;
    filterArgs[2] = targetState;
    filterArgs[3] = easingObject;

    // Any defined value transformation must be applied
    Tweenable.applyFilter(mockTweenable, 'tweenCreated');
    Tweenable.applyFilter(mockTweenable, 'beforeTween');

    var interpolatedValues = getInterpolatedValues(
      from, current, targetState, position, easingObject, delay);

    // Transform values back into their original format
    Tweenable.applyFilter(mockTweenable, 'afterTween');

    return interpolatedValues;
  };

}());

/**
 * This module adds string interpolation support to Shifty.
 *
 * The Token extension allows Shifty to tween numbers inside of strings.  Among
 * other things, this allows you to animate CSS properties.  For example, you
 * can do this:
 *
 *     var tweenable = new Tweenable();
 *     tweenable.tween({
 *       from: { transform: 'translateX(45px)' },
 *       to: { transform: 'translateX(90xp)' }
 *     });
 *
 * `translateX(45)` will be tweened to `translateX(90)`.  To demonstrate:
 *
 *     var tweenable = new Tweenable();
 *     tweenable.tween({
 *       from: { transform: 'translateX(45px)' },
 *       to: { transform: 'translateX(90px)' },
 *       step: function (state) {
 *         console.log(state.transform);
 *       }
 *     });
 *
 * The above snippet will log something like this in the console:
 *
 *     translateX(60.3px)
 *     ...
 *     translateX(76.05px)
 *     ...
 *     translateX(90px)
 *
 * Another use for this is animating colors:
 *
 *     var tweenable = new Tweenable();
 *     tweenable.tween({
 *       from: { color: 'rgb(0,255,0)' },
 *       to: { color: 'rgb(255,0,255)' },
 *       step: function (state) {
 *         console.log(state.color);
 *       }
 *     });
 *
 * The above snippet will log something like this:
 *
 *     rgb(84,170,84)
 *     ...
 *     rgb(170,84,170)
 *     ...
 *     rgb(255,0,255)
 *
 * This extension also supports hexadecimal colors, in both long (`#ff00ff`)
 * and short (`#f0f`) forms.  Be aware that hexadecimal input values will be
 * converted into the equivalent RGB output values.  This is done to optimize
 * for performance.
 *
 *     var tweenable = new Tweenable();
 *     tweenable.tween({
 *       from: { color: '#0f0' },
 *       to: { color: '#f0f' },
 *       step: function (state) {
 *         console.log(state.color);
 *       }
 *     });
 *
 * This snippet will generate the same output as the one before it because
 * equivalent values were supplied (just in hexadecimal form rather than RGB):
 *
 *     rgb(84,170,84)
 *     ...
 *     rgb(170,84,170)
 *     ...
 *     rgb(255,0,255)
 *
 * ## Easing support
 *
 * Easing works somewhat differently in the Token extension.  This is because
 * some CSS properties have multiple values in them, and you might need to
 * tween each value along its own easing curve.  A basic example:
 *
 *     var tweenable = new Tweenable();
 *     tweenable.tween({
 *       from: { transform: 'translateX(0px) translateY(0px)' },
 *       to: { transform:   'translateX(100px) translateY(100px)' },
 *       easing: { transform: 'easeInQuad' },
 *       step: function (state) {
 *         console.log(state.transform);
 *       }
 *     });
 *
 * The above snippet will create values like this:
 *
 *     translateX(11.56px) translateY(11.56px)
 *     ...
 *     translateX(46.24px) translateY(46.24px)
 *     ...
 *     translateX(100px) translateY(100px)
 *
 * In this case, the values for `translateX` and `translateY` are always the
 * same for each step of the tween, because they have the same start and end
 * points and both use the same easing curve.  We can also tween `translateX`
 * and `translateY` along independent curves:
 *
 *     var tweenable = new Tweenable();
 *     tweenable.tween({
 *       from: { transform: 'translateX(0px) translateY(0px)' },
 *       to: { transform:   'translateX(100px) translateY(100px)' },
 *       easing: { transform: 'easeInQuad bounce' },
 *       step: function (state) {
 *         console.log(state.transform);
 *       }
 *     });
 *
 * The above snippet will create values like this:
 *
 *     translateX(10.89px) translateY(82.35px)
 *     ...
 *     translateX(44.89px) translateY(86.73px)
 *     ...
 *     translateX(100px) translateY(100px)
 *
 * `translateX` and `translateY` are not in sync anymore, because `easeInQuad`
 * was specified for `translateX` and `bounce` for `translateY`.  Mixing and
 * matching easing curves can make for some interesting motion in your
 * animations.
 *
 * The order of the space-separated easing curves correspond the token values
 * they apply to.  If there are more token values than easing curves listed,
 * the last easing curve listed is used.
 * @submodule Tweenable.token
 */

// token function is defined above only so that dox-foundation sees it as
// documentation and renders it.  It is never used, and is optimized away at
// build time.

;(function (Tweenable) {

  /**
   * @typedef {{
   *   formatString: string
   *   chunkNames: Array.<string>
   * }}
   * @private
   */
  var formatManifest;

  // CONSTANTS

  var R_NUMBER_COMPONENT = /(\d|\-|\.)/;
  var R_FORMAT_CHUNKS = /([^\-0-9\.]+)/g;
  var R_UNFORMATTED_VALUES = /[0-9.\-]+/g;
  var R_RGB = new RegExp(
    'rgb\\(' + R_UNFORMATTED_VALUES.source +
    (/,\s*/.source) + R_UNFORMATTED_VALUES.source +
    (/,\s*/.source) + R_UNFORMATTED_VALUES.source + '\\)', 'g');
  var R_RGB_PREFIX = /^.*\(/;
  var R_HEX = /#([0-9]|[a-f]){3,6}/gi;
  var VALUE_PLACEHOLDER = 'VAL';

  // HELPERS

  /**
   * @param {Array.number} rawValues
   * @param {string} prefix
   *
   * @return {Array.<string>}
   * @private
   */
  function getFormatChunksFrom (rawValues, prefix) {
    var accumulator = [];

    var rawValuesLength = rawValues.length;
    var i;

    for (i = 0; i < rawValuesLength; i++) {
      accumulator.push('_' + prefix + '_' + i);
    }

    return accumulator;
  }

  /**
   * @param {string} formattedString
   *
   * @return {string}
   * @private
   */
  function getFormatStringFrom (formattedString) {
    var chunks = formattedString.match(R_FORMAT_CHUNKS);

    if (!chunks) {
      // chunks will be null if there were no tokens to parse in
      // formattedString (for example, if formattedString is '2').  Coerce
      // chunks to be useful here.
      chunks = ['', ''];

      // If there is only one chunk, assume that the string is a number
      // followed by a token...
      // NOTE: This may be an unwise assumption.
    } else if (chunks.length === 1 ||
      // ...or if the string starts with a number component (".", "-", or a
      // digit)...
    formattedString.charAt(0).match(R_NUMBER_COMPONENT)) {
      // ...prepend an empty string here to make sure that the formatted number
      // is properly replaced by VALUE_PLACEHOLDER
      chunks.unshift('');
    }

    return chunks.join(VALUE_PLACEHOLDER);
  }

  /**
   * Convert all hex color values within a string to an rgb string.
   *
   * @param {Object} stateObject
   *
   * @return {Object} The modified obj
   * @private
   */
  function sanitizeObjectForHexProps (stateObject) {
    Tweenable.each(stateObject, function (prop) {
      var currentProp = stateObject[prop];

      if (typeof currentProp === 'string' && currentProp.match(R_HEX)) {
        stateObject[prop] = sanitizeHexChunksToRGB(currentProp);
      }
    });
  }

  /**
   * @param {string} str
   *
   * @return {string}
   * @private
   */
  function  sanitizeHexChunksToRGB (str) {
    return filterStringChunks(R_HEX, str, convertHexToRGB);
  }

  /**
   * @param {string} hexString
   *
   * @return {string}
   * @private
   */
  function convertHexToRGB (hexString) {
    var rgbArr = hexToRGBArray(hexString);
    return 'rgb(' + rgbArr[0] + ',' + rgbArr[1] + ',' + rgbArr[2] + ')';
  }

  var hexToRGBArray_returnArray = [];
  /**
   * Convert a hexadecimal string to an array with three items, one each for
   * the red, blue, and green decimal values.
   *
   * @param {string} hex A hexadecimal string.
   *
   * @returns {Array.<number>} The converted Array of RGB values if `hex` is a
   * valid string, or an Array of three 0's.
   * @private
   */
  function hexToRGBArray (hex) {

    hex = hex.replace(/#/, '');

    // If the string is a shorthand three digit hex notation, normalize it to
    // the standard six digit notation
    if (hex.length === 3) {
      hex = hex.split('');
      hex = hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2];
    }

    hexToRGBArray_returnArray[0] = hexToDec(hex.substr(0, 2));
    hexToRGBArray_returnArray[1] = hexToDec(hex.substr(2, 2));
    hexToRGBArray_returnArray[2] = hexToDec(hex.substr(4, 2));

    return hexToRGBArray_returnArray;
  }

  /**
   * Convert a base-16 number to base-10.
   *
   * @param {Number|String} hex The value to convert
   *
   * @returns {Number} The base-10 equivalent of `hex`.
   * @private
   */
  function hexToDec (hex) {
    return parseInt(hex, 16);
  }

  /**
   * Runs a filter operation on all chunks of a string that match a RegExp
   *
   * @param {RegExp} pattern
   * @param {string} unfilteredString
   * @param {function(string)} filter
   *
   * @return {string}
   * @private
   */
  function filterStringChunks (pattern, unfilteredString, filter) {
    var pattenMatches = unfilteredString.match(pattern);
    var filteredString = unfilteredString.replace(pattern, VALUE_PLACEHOLDER);

    if (pattenMatches) {
      var pattenMatchesLength = pattenMatches.length;
      var currentChunk;

      for (var i = 0; i < pattenMatchesLength; i++) {
        currentChunk = pattenMatches.shift();
        filteredString = filteredString.replace(
          VALUE_PLACEHOLDER, filter(currentChunk));
      }
    }

    return filteredString;
  }

  /**
   * Check for floating point values within rgb strings and rounds them.
   *
   * @param {string} formattedString
   *
   * @return {string}
   * @private
   */
  function sanitizeRGBChunks (formattedString) {
    return filterStringChunks(R_RGB, formattedString, sanitizeRGBChunk);
  }

  /**
   * @param {string} rgbChunk
   *
   * @return {string}
   * @private
   */
  function sanitizeRGBChunk (rgbChunk) {
    var numbers = rgbChunk.match(R_UNFORMATTED_VALUES);
    var numbersLength = numbers.length;
    var sanitizedString = rgbChunk.match(R_RGB_PREFIX)[0];

    for (var i = 0; i < numbersLength; i++) {
      sanitizedString += parseInt(numbers[i], 10) + ',';
    }

    sanitizedString = sanitizedString.slice(0, -1) + ')';

    return sanitizedString;
  }

  /**
   * @param {Object} stateObject
   *
   * @return {Object} An Object of formatManifests that correspond to
   * the string properties of stateObject
   * @private
   */
  function getFormatManifests (stateObject) {
    var manifestAccumulator = {};

    Tweenable.each(stateObject, function (prop) {
      var currentProp = stateObject[prop];

      if (typeof currentProp === 'string') {
        var rawValues = getValuesFrom(currentProp);

        manifestAccumulator[prop] = {
          'formatString': getFormatStringFrom(currentProp)
          ,'chunkNames': getFormatChunksFrom(rawValues, prop)
        };
      }
    });

    return manifestAccumulator;
  }

  /**
   * @param {Object} stateObject
   * @param {Object} formatManifests
   * @private
   */
  function expandFormattedProperties (stateObject, formatManifests) {
    Tweenable.each(formatManifests, function (prop) {
      var currentProp = stateObject[prop];
      var rawValues = getValuesFrom(currentProp);
      var rawValuesLength = rawValues.length;

      for (var i = 0; i < rawValuesLength; i++) {
        stateObject[formatManifests[prop].chunkNames[i]] = +rawValues[i];
      }

      delete stateObject[prop];
    });
  }

  /**
   * @param {Object} stateObject
   * @param {Object} formatManifests
   * @private
   */
  function collapseFormattedProperties (stateObject, formatManifests) {
    Tweenable.each(formatManifests, function (prop) {
      var currentProp = stateObject[prop];
      var formatChunks = extractPropertyChunks(
        stateObject, formatManifests[prop].chunkNames);
      var valuesList = getValuesList(
        formatChunks, formatManifests[prop].chunkNames);
      currentProp = getFormattedValues(
        formatManifests[prop].formatString, valuesList);
      stateObject[prop] = sanitizeRGBChunks(currentProp);
    });
  }

  /**
   * @param {Object} stateObject
   * @param {Array.<string>} chunkNames
   *
   * @return {Object} The extracted value chunks.
   * @private
   */
  function extractPropertyChunks (stateObject, chunkNames) {
    var extractedValues = {};
    var currentChunkName, chunkNamesLength = chunkNames.length;

    for (var i = 0; i < chunkNamesLength; i++) {
      currentChunkName = chunkNames[i];
      extractedValues[currentChunkName] = stateObject[currentChunkName];
      delete stateObject[currentChunkName];
    }

    return extractedValues;
  }

  var getValuesList_accumulator = [];
  /**
   * @param {Object} stateObject
   * @param {Array.<string>} chunkNames
   *
   * @return {Array.<number>}
   * @private
   */
  function getValuesList (stateObject, chunkNames) {
    getValuesList_accumulator.length = 0;
    var chunkNamesLength = chunkNames.length;

    for (var i = 0; i < chunkNamesLength; i++) {
      getValuesList_accumulator.push(stateObject[chunkNames[i]]);
    }

    return getValuesList_accumulator;
  }

  /**
   * @param {string} formatString
   * @param {Array.<number>} rawValues
   *
   * @return {string}
   * @private
   */
  function getFormattedValues (formatString, rawValues) {
    var formattedValueString = formatString;
    var rawValuesLength = rawValues.length;

    for (var i = 0; i < rawValuesLength; i++) {
      formattedValueString = formattedValueString.replace(
        VALUE_PLACEHOLDER, +rawValues[i].toFixed(4));
    }

    return formattedValueString;
  }

  /**
   * Note: It's the duty of the caller to convert the Array elements of the
   * return value into numbers.  This is a performance optimization.
   *
   * @param {string} formattedString
   *
   * @return {Array.<string>|null}
   * @private
   */
  function getValuesFrom (formattedString) {
    return formattedString.match(R_UNFORMATTED_VALUES);
  }

  /**
   * @param {Object} easingObject
   * @param {Object} tokenData
   * @private
   */
  function expandEasingObject (easingObject, tokenData) {
    Tweenable.each(tokenData, function (prop) {
      var currentProp = tokenData[prop];
      var chunkNames = currentProp.chunkNames;
      var chunkLength = chunkNames.length;

      var easing = easingObject[prop];
      var i;

      if (typeof easing === 'string') {
        var easingChunks = easing.split(' ');
        var lastEasingChunk = easingChunks[easingChunks.length - 1];

        for (i = 0; i < chunkLength; i++) {
          easingObject[chunkNames[i]] = easingChunks[i] || lastEasingChunk;
        }

      } else {
        for (i = 0; i < chunkLength; i++) {
          easingObject[chunkNames[i]] = easing;
        }
      }

      delete easingObject[prop];
    });
  }

  /**
   * @param {Object} easingObject
   * @param {Object} tokenData
   * @private
   */
  function collapseEasingObject (easingObject, tokenData) {
    Tweenable.each(tokenData, function (prop) {
      var currentProp = tokenData[prop];
      var chunkNames = currentProp.chunkNames;
      var chunkLength = chunkNames.length;

      var firstEasing = easingObject[chunkNames[0]];
      var typeofEasings = typeof firstEasing;

      if (typeofEasings === 'string') {
        var composedEasingString = '';

        for (var i = 0; i < chunkLength; i++) {
          composedEasingString += ' ' + easingObject[chunkNames[i]];
          delete easingObject[chunkNames[i]];
        }

        easingObject[prop] = composedEasingString.substr(1);
      } else {
        easingObject[prop] = firstEasing;
      }
    });
  }

  Tweenable.prototype.filter.token = {
    'tweenCreated': function (currentState, fromState, toState, easingObject) {
      sanitizeObjectForHexProps(currentState);
      sanitizeObjectForHexProps(fromState);
      sanitizeObjectForHexProps(toState);
      this._tokenData = getFormatManifests(currentState);
    },

    'beforeTween': function (currentState, fromState, toState, easingObject) {
      expandEasingObject(easingObject, this._tokenData);
      expandFormattedProperties(currentState, this._tokenData);
      expandFormattedProperties(fromState, this._tokenData);
      expandFormattedProperties(toState, this._tokenData);
    },

    'afterTween': function (currentState, fromState, toState, easingObject) {
      collapseFormattedProperties(currentState, this._tokenData);
      collapseFormattedProperties(fromState, this._tokenData);
      collapseFormattedProperties(toState, this._tokenData);
      collapseEasingObject(easingObject, this._tokenData);
    }
  };

} (Tweenable));

}).call(null);

},{}],17:[function(require,module,exports){
const gr = require('grimoirejs').default;

gr(() => {
  const stats = new Stats();
  stats.showPanel(0);
  document.body.appendChild(stats.dom);
  gr('#canvas')('goml').first().getComponent('LoopManager').register((i) => {
    stats.begin();
  }, -100000000);
  gr('#canvas')('goml').first().getComponent('LoopManager').register((i) => {
    stats.end();
  }, 100000000);
  const gui = new dat.GUI();
  const vignetting = new Vignetting();
  const f1 = gui.addFolder('Vignetting');
  f1.add(vignetting, 'pass');
  f1.add(vignetting, 'spread', 0.01, 1.5);
  f1.add(vignetting, 'size', 0, 2);
  f1.add(vignetting, 'amp', 0, 3);
  f1.add(vignetting, 'speed', 0, 3);
  f1.open();
  const aberration = new Aberration();
  const f2 = gui.addFolder('Aberration');
  f2.add(aberration, 'pass');
  f2.add(aberration, 'power', 0, 5);
  f2.add(aberration, 'coef', 0, 20);
  f2.add(aberration, 'amp', 0, 3);
  f2.add(aberration, 'speed', 0, 3);
  f2.open();
  const fxaa = new Fxaa();
  const f3 = gui.addFolder('Fxaa');
  f3.add(fxaa, 'pass');
  f3.open();
  const hud = new Hud();
  const f4 = gui.addFolder('Hud');
  f4.add(hud, 'pass');
  f4.add(hud, 'size', 0, 2);
  f4.open();
});

class Vignetting {
  constructor() {
    this._spread = 0.9;
    this._size = 0.7;
    this._amp = 1.0;
    this._speed = 1.0;
    this._pass = false;
  }

  set pass(v) {
    gr('#canvas')('#vignetting').setAttribute('pass', v);
    this._pass = v;
  }

  get pass() {
    return this._pass;
  }

  set spread(v) {
    gr('#canvas')('#vignetting').setAttribute('spread', v);
    this._spread = v;
  }

  get spread() {
    return this._spread;
  }

  set size(v) {
    gr('#canvas')('#vignetting').setAttribute('size', v);
    this._size = v;
  }

  get size() {
    return this._size;
  }

  set amp(v) {
    gr('#canvas')('#vignetting').setAttribute('amp', v);
    this._amp = v;
  }

  get amp() {
    return this._amp;
  }

  set speed(v) {
    gr('#canvas')('#vignetting').setAttribute('speed', v);
    this._speed = v;
  }

  get speed() {
    return this._speed;
  }
}

class Aberration {
  constructor() {
    this._power = 2.0;
    this._coef = 3.4;
    this._amp = 1.0;
    this._speed = 1.0;
    this._pass = false;
  }

  set pass(v) {
    gr('#canvas')('#aberration').setAttribute('pass', v);
    this._pass = v;
  }

  get pass() {
    return this._pass;
  }

  set power(v) {
    gr('#canvas')('#aberration').setAttribute('power', v);
    this._power = v;
  }

  get power() {
    return this._power;
  }

  set coef(v) {
    gr('#canvas')('#aberration').setAttribute('coef', v);
    this._coef = v;
  }

  get coef() {
    return this._coef;
  }

  set amp(v) {
    gr('#canvas')('#aberration').setAttribute('amp', v);
    this._amp = v;
  }

  get amp() {
    return this._amp;
  }

  set speed(v) {
    gr('#canvas')('#aberration').setAttribute('speed', v);
    this._speed = v;
  }

  get speed() {
    return this._speed;
  }
}

class Hud {
  constructor() {
    this._pass = false;
    this._size = 1.0;
  }

  set pass(v) {
    gr('#canvas')('#hud').setAttribute('pass', v);
    this._pass = v;
  }

  get pass() {
    return this._pass;
  }

  set size(v) {
    gr('#canvas')('#hud').setAttribute('size', v);
    this._size = v;
  }

  get size() {
    return this._size;
  }
}

class Fxaa {
  constructor() {
    this._pass = false;
  }

  set pass(v) {
    gr('#canvas')('#fxaa').setAttribute('pass', v);
    this._pass = v;
  }

  get pass() {
    return this._pass;
  }
}

},{"grimoirejs":10}],18:[function(require,module,exports){
(function (Buffer){

const {MaterialFactory} = require('grimoirejs-fundamental').default.Material;

const fxaa = Buffer("QFBhc3MKQE5vQmxlbmQoKQpATm9EZXB0aCgpCkZTX1BSRUMobWVkaXVtcCxmbG9hdCkKCnZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7CgojaWZkZWYgVlMKICBhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjsKICBhdHRyaWJ1dGUgdmVjMiB0ZXhDb29yZDsKICB2b2lkIG1haW4oKXsKICAgIGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMS4pOwogICAgdlRleENvb3JkID0gdGV4Q29vcmQ7CiAgfQojZW5kaWYKCiNpZmRlZiBGUwogIC8qKgogIEJhc2ljIEZYQUEgaW1wbGVtZW50YXRpb24gYmFzZWQgb24gdGhlIGNvZGUgb24gZ2Vla3MzZC5jb20gd2l0aCB0aGUKICBtb2RpZmljYXRpb24gdGhhdCB0aGUgdGV4dHVyZTJETG9kIHN0dWZmIHdhcyByZW1vdmVkIHNpbmNlIGl0J3MKICB1bnN1cHBvcnRlZCBieSBXZWJHTC4KCiAgLS0KCiAgRnJvbToKICBodHRwczovL2dpdGh1Yi5jb20vbWl0c3VoaWtvL3dlYmdsLW1laW5jcmFmdAoKICBDb3B5cmlnaHQgKGMpIDIwMTEgYnkgQXJtaW4gUm9uYWNoZXIuCgogIFNvbWUgcmlnaHRzIHJlc2VydmVkLgoKICBSZWRpc3RyaWJ1dGlvbiBhbmQgdXNlIGluIHNvdXJjZSBhbmQgYmluYXJ5IGZvcm1zLCB3aXRoIG9yIHdpdGhvdXQKICBtb2RpZmljYXRpb24sIGFyZSBwZXJtaXR0ZWQgcHJvdmlkZWQgdGhhdCB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnMgYXJlCiAgbWV0OgoKICAgICAgKiBSZWRpc3RyaWJ1dGlvbnMgb2Ygc291cmNlIGNvZGUgbXVzdCByZXRhaW4gdGhlIGFib3ZlIGNvcHlyaWdodAogICAgICAgIG5vdGljZSwgdGhpcyBsaXN0IG9mIGNvbmRpdGlvbnMgYW5kIHRoZSBmb2xsb3dpbmcgZGlzY2xhaW1lci4KCiAgICAgICogUmVkaXN0cmlidXRpb25zIGluIGJpbmFyeSBmb3JtIG11c3QgcmVwcm9kdWNlIHRoZSBhYm92ZQogICAgICAgIGNvcHlyaWdodCBub3RpY2UsIHRoaXMgbGlzdCBvZiBjb25kaXRpb25zIGFuZCB0aGUgZm9sbG93aW5nCiAgICAgICAgZGlzY2xhaW1lciBpbiB0aGUgZG9jdW1lbnRhdGlvbiBhbmQvb3Igb3RoZXIgbWF0ZXJpYWxzIHByb3ZpZGVkCiAgICAgICAgd2l0aCB0aGUgZGlzdHJpYnV0aW9uLgoKICAgICAgKiBUaGUgbmFtZXMgb2YgdGhlIGNvbnRyaWJ1dG9ycyBtYXkgbm90IGJlIHVzZWQgdG8gZW5kb3JzZSBvcgogICAgICAgIHByb21vdGUgcHJvZHVjdHMgZGVyaXZlZCBmcm9tIHRoaXMgc29mdHdhcmUgd2l0aG91dCBzcGVjaWZpYwogICAgICAgIHByaW9yIHdyaXR0ZW4gcGVybWlzc2lvbi4KCiAgVEhJUyBTT0ZUV0FSRSBJUyBQUk9WSURFRCBCWSBUSEUgQ09QWVJJR0hUIEhPTERFUlMgQU5EIENPTlRSSUJVVE9SUwogICJBUyBJUyIgQU5EIEFOWSBFWFBSRVNTIE9SIElNUExJRUQgV0FSUkFOVElFUywgSU5DTFVESU5HLCBCVVQgTk9UCiAgTElNSVRFRCBUTywgVEhFIElNUExJRUQgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFkgQU5EIEZJVE5FU1MgRk9SCiAgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQVJFIERJU0NMQUlNRUQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRSBDT1BZUklHSFQKICBPV05FUiBPUiBDT05UUklCVVRPUlMgQkUgTElBQkxFIEZPUiBBTlkgRElSRUNULCBJTkRJUkVDVCwgSU5DSURFTlRBTCwKICBTUEVDSUFMLCBFWEVNUExBUlksIE9SIENPTlNFUVVFTlRJQUwgREFNQUdFUyAoSU5DTFVESU5HLCBCVVQgTk9UCiAgTElNSVRFRCBUTywgUFJPQ1VSRU1FTlQgT0YgU1VCU1RJVFVURSBHT09EUyBPUiBTRVJWSUNFUzsgTE9TUyBPRiBVU0UsCiAgREFUQSwgT1IgUFJPRklUUzsgT1IgQlVTSU5FU1MgSU5URVJSVVBUSU9OKSBIT1dFVkVSIENBVVNFRCBBTkQgT04gQU5ZCiAgVEhFT1JZIE9GIExJQUJJTElUWSwgV0hFVEhFUiBJTiBDT05UUkFDVCwgU1RSSUNUIExJQUJJTElUWSwgT1IgVE9SVAogIChJTkNMVURJTkcgTkVHTElHRU5DRSBPUiBPVEhFUldJU0UpIEFSSVNJTkcgSU4gQU5ZIFdBWSBPVVQgT0YgVEhFIFVTRQogIE9GIFRISVMgU09GVFdBUkUsIEVWRU4gSUYgQURWSVNFRCBPRiBUSEUgUE9TU0lCSUxJVFkgT0YgU1VDSCBEQU1BR0UuCiAgKi8KCiAgI2lmbmRlZiBGWEFBX1JFRFVDRV9NSU4KICAgICAgI2RlZmluZSBGWEFBX1JFRFVDRV9NSU4gICAoMS4wLyAxMjguMCkKICAjZW5kaWYKICAjaWZuZGVmIEZYQUFfUkVEVUNFX01VTAogICAgICAjZGVmaW5lIEZYQUFfUkVEVUNFX01VTCAgICgxLjAgLyA4LjApCiAgI2VuZGlmCiAgI2lmbmRlZiBGWEFBX1NQQU5fTUFYCiAgICAgICNkZWZpbmUgRlhBQV9TUEFOX01BWCAgICAgOC4wCiAgI2VuZGlmCgogIC8vb3B0aW1pemVkIHZlcnNpb24gZm9yIG1vYmlsZSwgd2hlcmUgZGVwZW5kZW50CiAgLy90ZXh0dXJlIHJlYWRzIGNhbiBiZSBhIGJvdHRsZW5lY2sKICB2ZWM0IGZ4YWEoc2FtcGxlcjJEIHRleCwgdmVjMiBmcmFnQ29vcmQsIHZlYzIgcmVzb2x1dGlvbiwKICAgICAgICAgICAgICB2ZWMyIHZfcmdiTlcsIHZlYzIgdl9yZ2JORSwKICAgICAgICAgICAgICB2ZWMyIHZfcmdiU1csIHZlYzIgdl9yZ2JTRSwKICAgICAgICAgICAgICB2ZWMyIHZfcmdiTSkgewogICAgICB2ZWM0IGNvbG9yOwogICAgICBtZWRpdW1wIHZlYzIgaW52ZXJzZVZQID0gdmVjMigxLjAgLyByZXNvbHV0aW9uLngsIDEuMCAvIHJlc29sdXRpb24ueSk7CiAgICAgIHZlYzQgcmdiTlcgPSB0ZXh0dXJlMkQodGV4LCB2X3JnYk5XKTsKICAgICAgdmVjNCByZ2JORSA9IHRleHR1cmUyRCh0ZXgsIHZfcmdiTkUpOwogICAgICB2ZWM0IHJnYlNXID0gdGV4dHVyZTJEKHRleCwgdl9yZ2JTVyk7CiAgICAgIHZlYzQgcmdiU0UgPSB0ZXh0dXJlMkQodGV4LCB2X3JnYlNFKTsKICAgICAgdmVjNCB0ZXhDb2xvciA9IHRleHR1cmUyRCh0ZXgsIHZfcmdiTSk7CiAgICAgIHZlYzQgcmdiTSAgPSB0ZXhDb2xvcjsKICAgICAgdmVjNCBsdW1hID0gdmVjNCgwLjI5OSwgMC41ODcsIDAuMTE0LCAxLjApOwogICAgICBmbG9hdCBsdW1hTlcgPSBkb3QocmdiTlcsIGx1bWEpOwogICAgICBmbG9hdCBsdW1hTkUgPSBkb3QocmdiTkUsIGx1bWEpOwogICAgICBmbG9hdCBsdW1hU1cgPSBkb3QocmdiU1csIGx1bWEpOwogICAgICBmbG9hdCBsdW1hU0UgPSBkb3QocmdiU0UsIGx1bWEpOwogICAgICBmbG9hdCBsdW1hTSAgPSBkb3QocmdiTSwgIGx1bWEpOwogICAgICBmbG9hdCBsdW1hTWluID0gbWluKGx1bWFNLCBtaW4obWluKGx1bWFOVywgbHVtYU5FKSwgbWluKGx1bWFTVywgbHVtYVNFKSkpOwogICAgICBmbG9hdCBsdW1hTWF4ID0gbWF4KGx1bWFNLCBtYXgobWF4KGx1bWFOVywgbHVtYU5FKSwgbWF4KGx1bWFTVywgbHVtYVNFKSkpOwoKICAgICAgbWVkaXVtcCB2ZWMyIGRpcjsKICAgICAgZGlyLnggPSAtKChsdW1hTlcgKyBsdW1hTkUpIC0gKGx1bWFTVyArIGx1bWFTRSkpOwogICAgICBkaXIueSA9ICAoKGx1bWFOVyArIGx1bWFTVykgLSAobHVtYU5FICsgbHVtYVNFKSk7CgogICAgICBmbG9hdCBkaXJSZWR1Y2UgPSBtYXgoKGx1bWFOVyArIGx1bWFORSArIGx1bWFTVyArIGx1bWFTRSkgKgogICAgICAgICAgICAgICAgICAgICAgICAgICAgKDAuMjUgKiBGWEFBX1JFRFVDRV9NVUwpLCBGWEFBX1JFRFVDRV9NSU4pOwoKICAgICAgZmxvYXQgcmNwRGlyTWluID0gMS4wIC8gKG1pbihhYnMoZGlyLngpLCBhYnMoZGlyLnkpKSArIGRpclJlZHVjZSk7CiAgICAgIGRpciA9IG1pbih2ZWMyKEZYQUFfU1BBTl9NQVgsIEZYQUFfU1BBTl9NQVgpLAogICAgICAgICAgICAgICAgbWF4KHZlYzIoLUZYQUFfU1BBTl9NQVgsIC1GWEFBX1NQQU5fTUFYKSwKICAgICAgICAgICAgICAgIGRpciAqIHJjcERpck1pbikpICogaW52ZXJzZVZQOwoKICAgICAgdmVjNCByZ2JBID0gMC41ICogKAogICAgICAgICAgdGV4dHVyZTJEKHRleCwgZnJhZ0Nvb3JkICogaW52ZXJzZVZQICsgZGlyICogKDEuMCAvIDMuMCAtIDAuNSkpICsKICAgICAgICAgIHRleHR1cmUyRCh0ZXgsIGZyYWdDb29yZCAqIGludmVyc2VWUCArIGRpciAqICgyLjAgLyAzLjAgLSAwLjUpKSk7CiAgICAgIHZlYzQgcmdiQiA9IHJnYkEgKiAwLjUgKyAwLjI1ICogKAogICAgICAgICAgdGV4dHVyZTJEKHRleCwgZnJhZ0Nvb3JkICogaW52ZXJzZVZQICsgZGlyICogLTAuNSkgKwogICAgICAgICAgdGV4dHVyZTJEKHRleCwgZnJhZ0Nvb3JkICogaW52ZXJzZVZQICsgZGlyICogMC41KSk7CgogICAgICBmbG9hdCBsdW1hQiA9IGRvdChyZ2JCLCBsdW1hKTsKICAgICAgaWYgKChsdW1hQiA8IGx1bWFNaW4pIHx8IChsdW1hQiA+IGx1bWFNYXgpKQogICAgICAgICAgY29sb3IgPSByZ2JBOwogICAgICBlbHNlCiAgICAgICAgICBjb2xvciA9IHJnYkI7CiAgICAgIHJldHVybiBjb2xvcjsKICB9CgogIC8vVG8gc2F2ZSA5IGRlcGVuZGVudCB0ZXh0dXJlIHJlYWRzLCB5b3UgY2FuIGNvbXB1dGUKICAvL3RoZXNlIGluIHRoZSB2ZXJ0ZXggc2hhZGVyIGFuZCB1c2UgdGhlIG9wdGltaXplZAogIC8vZnJhZy5nbHNsIGZ1bmN0aW9uIGluIHlvdXIgZnJhZyBzaGFkZXIuCgogIC8vVGhpcyBpcyBiZXN0IHN1aXRlZCBmb3IgbW9iaWxlIGRldmljZXMsIGxpa2UgaU9TLgoKICB2b2lkIHRleGNvb3Jkcyh2ZWMyIGZyYWdDb29yZCwgdmVjMiByZXNvbHV0aW9uLAogICAgICAgIG91dCB2ZWMyIHZfcmdiTlcsIG91dCB2ZWMyIHZfcmdiTkUsCiAgICAgICAgb3V0IHZlYzIgdl9yZ2JTVywgb3V0IHZlYzIgdl9yZ2JTRSwKICAgICAgICBvdXQgdmVjMiB2X3JnYk0pIHsKICAgIHZlYzIgaW52ZXJzZVZQID0gMS4wIC8gcmVzb2x1dGlvbi54eTsKICAgIHZfcmdiTlcgPSAoZnJhZ0Nvb3JkICsgdmVjMigtMS4wLCAtMS4wKSkgKiBpbnZlcnNlVlA7CiAgICB2X3JnYk5FID0gKGZyYWdDb29yZCArIHZlYzIoMS4wLCAtMS4wKSkgKiBpbnZlcnNlVlA7CiAgICB2X3JnYlNXID0gKGZyYWdDb29yZCArIHZlYzIoLTEuMCwgMS4wKSkgKiBpbnZlcnNlVlA7CiAgICB2X3JnYlNFID0gKGZyYWdDb29yZCArIHZlYzIoMS4wLCAxLjApKSAqIGludmVyc2VWUDsKICAgIHZfcmdiTSA9IHZlYzIoZnJhZ0Nvb3JkICogaW52ZXJzZVZQKTsKICB9CgogIHZlYzQgYXBwbHkoc2FtcGxlcjJEIHRleCwgdmVjMiBmcmFnQ29vcmQsIHZlYzIgcmVzb2x1dGlvbikgewogICAgbWVkaXVtcCB2ZWMyIHZfcmdiTlc7CiAgICBtZWRpdW1wIHZlYzIgdl9yZ2JORTsKICAgIG1lZGl1bXAgdmVjMiB2X3JnYlNXOwogICAgbWVkaXVtcCB2ZWMyIHZfcmdiU0U7CiAgICBtZWRpdW1wIHZlYzIgdl9yZ2JNOwoKICAgIC8vY29tcHV0ZSB0aGUgdGV4dHVyZSBjb29yZHMKICAgIHRleGNvb3JkcyhmcmFnQ29vcmQsIHJlc29sdXRpb24sIHZfcmdiTlcsIHZfcmdiTkUsIHZfcmdiU1csIHZfcmdiU0UsIHZfcmdiTSk7CgogICAgLy9jb21wdXRlIEZYQUEKICAgIHJldHVybiBmeGFhKHRleCwgZnJhZ0Nvb3JkLCByZXNvbHV0aW9uLCB2X3JnYk5XLCB2X3JnYk5FLCB2X3JnYlNXLCB2X3JnYlNFLCB2X3JnYk0pOwogIH0KICAvLyAjZXh0ZW5zaW9uIEdMX09FU19zdGFuZGFyZF9kZXJpdmF0aXZlcyA6IGVuYWJsZQoKICB1bmlmb3JtIHNhbXBsZXIyRCBzb3VyY2U7CiAgdW5pZm9ybSB2ZWMyIF92aWV3cG9ydFNpemU7CiAgQHtkZWZhdWx0OiJmYWxzZSJ9CiAgdW5pZm9ybSBib29sIHBhc3M7CgogIHZvaWQgbWFpbigpewogICAgdmVjMiBpVGV4Q29vcmQgPSB2ZWMyKDEuLCAtMS4pICogdlRleENvb3JkOwogICAgdmVjMiBmcmFnQ29vcmQgPSBpVGV4Q29vcmQgKiBfdmlld3BvcnRTaXplOwogICAgaWYgKCFwYXNzKSB7CiAgICAgIGdsX0ZyYWdDb2xvciA9IGFwcGx5KHNvdXJjZSwgZnJhZ0Nvb3JkLCBfdmlld3BvcnRTaXplKTsKICAgIH0gZWxzZSB7CiAgICAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRChzb3VyY2UsIGlUZXhDb29yZCk7CiAgICB9CiAgfQojZW5kaWYK","base64").toString();
MaterialFactory.addSORTMaterial("fxaa", fxaa);
gr.registerNode("render-fxaa", [], {
  material: "new(fxaa)"
}, "render-quad");

const vignetting = Buffer("QFBhc3MKQE5vQmxlbmQoKQpATm9EZXB0aCgpCkZTX1BSRUMobWVkaXVtcCxmbG9hdCkKCnZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7CgojaWZkZWYgVlMKICBhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjsKICBhdHRyaWJ1dGUgdmVjMiB0ZXhDb29yZDsKICB2b2lkIG1haW4oKXsKICAgIGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMS4pOwogICAgdlRleENvb3JkID0gdGV4Q29vcmQ7CiAgfQojZW5kaWYKCiNpZmRlZiBGUwogIHVuaWZvcm0gc2FtcGxlcjJEIHNvdXJjZTsKICB1bmlmb3JtIHZlYzIgX3ZpZXdwb3J0U2l6ZTsKICB1bmlmb3JtIGZsb2F0IF90aW1lOwogIEB7ZGVmYXVsdDoiZmFsc2UifQogIHVuaWZvcm0gYm9vbCBwYXNzOwogIEB7ZGVmYXVsdDoiMC45In0KICB1bmlmb3JtIGZsb2F0IHNwcmVhZDsKICBAe2RlZmF1bHQ6IjAuNyJ9CiAgdW5pZm9ybSBmbG9hdCBzaXplOwogIEB7ZGVmYXVsdDoiMS4wIn0KICB1bmlmb3JtIGZsb2F0IGFtcDsKICBAe2RlZmF1bHQ6IjEuMCJ9CiAgdW5pZm9ybSBmbG9hdCBzcGVlZDsKCiAgdmVjNCBhbHBoYUJsZW5kKHZlYzQgYmFzZSwgdmVjNCBibGVuZCkgewogICAgcmV0dXJuIHZlYzQoYmFzZS5yZ2IgKiBiYXNlLmEgKiAoMS4wIC0gYmxlbmQuYSkgKyBibGVuZC5yZ2IgKiBibGVuZC5hLCBibGVuZC5hICsgYmFzZS5hICogKDEuMCAtIGJsZW5kLmEpKTsKICB9CgogIHZvaWQgbWFpbigpIHsKICAgIHZlYzIgaVRleENvb3JkID0gdmVjMigxLiwgLTEuKSAqIHZUZXhDb29yZDsKICAgIGlmICghcGFzcykgewogICAgICBmbG9hdCB0ID0gX3RpbWUgKiBzcGVlZDsKICAgICAgZmxvYXQgdmliID0gKHNpbih0ICogMC4wMiArIDAuMSkgKyBzaW4odCAqIDAuMDE2KSArIHNpbih0ICogMC4wMSkpICogYW1wICogMC4wMDM7CiAgICAgIGZsb2F0IHAgPSBhdGFuKGxlbmd0aCgoaVRleENvb3JkICsgdmVjMigtMC41LCAwLjUpKSAqIDIuICogX3ZpZXdwb3J0U2l6ZSAqIHNpemUgLyBsZW5ndGgoX3ZpZXdwb3J0U2l6ZSkpICogMC43MDcxIC8gc3ByZWFkKTsKICAgICAgZmxvYXQgY29zMSA9IGNvcyhwKTsKICAgICAgZ2xfRnJhZ0NvbG9yID0gYWxwaGFCbGVuZCh0ZXh0dXJlMkQoc291cmNlLCBpVGV4Q29vcmQpLCB2ZWM0KDAuLCAwLiwgMC4sIGNsYW1wKDEuIC0gKGNvczEgKiBjb3MxICogY29zMSAqIGNvczEgLyAoc3ByZWFkICogc3ByZWFkKSkgKyB2aWIsIDAuMCwgMS4wKSkpOwogICAgfSBlbHNlIHsKICAgICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHNvdXJjZSwgaVRleENvb3JkKTsKICAgIH0KICB9CiNlbmRpZgo=","base64").toString();
MaterialFactory.addSORTMaterial("vignetting", vignetting);
gr.registerNode("render-vignetting", [], {
  material: "new(vignetting)"
}, "render-quad");

const aberration = Buffer("QFBhc3MKQE5vQmxlbmQoKQpATm9EZXB0aCgpCkZTX1BSRUMobWVkaXVtcCxmbG9hdCkKCnZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7CgojaWZkZWYgVlMKICBhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjsKICBhdHRyaWJ1dGUgdmVjMiB0ZXhDb29yZDsKICB2b2lkIG1haW4oKXsKICAgIGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMS4pOwogICAgdlRleENvb3JkID0gdGV4Q29vcmQ7CiAgfQojZW5kaWYKCiNpZmRlZiBGUwogIC8qCiAgRnJvbToKICBodHRwczovL2dpdGh1Yi5jb20vSmFtMy9nbHNsLWZhc3QtZ2F1c3NpYW4tYmx1cgoKICBUaGUgTUlUIExpY2Vuc2UgKE1JVCkgQ29weXJpZ2h0IChjKSAyMDE1IEphbTMKCiAgUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weSBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSAiU29mdHdhcmUiKSwgdG8gZGVhbCBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGwgY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6CgogIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLgoKICBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgIkFTIElTIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSwgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVIgTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSwgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEUgU09GVFdBUkUuCiAgICovCiAgdmVjNCBibHVyMTMoc2FtcGxlcjJEIGltYWdlLCB2ZWMyIHV2LCB2ZWMyIHJlc29sdXRpb24sIHZlYzIgZGlyZWN0aW9uKSB7CiAgICB2ZWM0IGNvbG9yID0gdmVjNCgwLjApOwogICAgdmVjMiBvZmYxID0gdmVjMigxLjQxMTc2NDcwNTg4MjM1MykgKiBkaXJlY3Rpb247CiAgICB2ZWMyIG9mZjIgPSB2ZWMyKDMuMjk0MTE3NjQ3MDU4ODIzNCkgKiBkaXJlY3Rpb247CiAgICB2ZWMyIG9mZjMgPSB2ZWMyKDUuMTc2NDcwNTg4MjM1Mjk0KSAqIGRpcmVjdGlvbjsKICAgIGNvbG9yICs9IHRleHR1cmUyRChpbWFnZSwgdXYpICogMC4xOTY0ODI1NTAxNTExNDA0OwogICAgY29sb3IgKz0gdGV4dHVyZTJEKGltYWdlLCB1diArIChvZmYxIC8gcmVzb2x1dGlvbikpICogMC4yOTY5MDY5NjQ2NzI4MzQ0OwogICAgY29sb3IgKz0gdGV4dHVyZTJEKGltYWdlLCB1diAtIChvZmYxIC8gcmVzb2x1dGlvbikpICogMC4yOTY5MDY5NjQ2NzI4MzQ0OwogICAgY29sb3IgKz0gdGV4dHVyZTJEKGltYWdlLCB1diArIChvZmYyIC8gcmVzb2x1dGlvbikpICogMC4wOTQ0NzAzOTc4NTA0NDczMjsKICAgIGNvbG9yICs9IHRleHR1cmUyRChpbWFnZSwgdXYgLSAob2ZmMiAvIHJlc29sdXRpb24pKSAqIDAuMDk0NDcwMzk3ODUwNDQ3MzI7CiAgICBjb2xvciArPSB0ZXh0dXJlMkQoaW1hZ2UsIHV2ICsgKG9mZjMgLyByZXNvbHV0aW9uKSkgKiAwLjAxMDM4MTM2MjQwMTE0ODA1NzsKICAgIGNvbG9yICs9IHRleHR1cmUyRChpbWFnZSwgdXYgLSAob2ZmMyAvIHJlc29sdXRpb24pKSAqIDAuMDEwMzgxMzYyNDAxMTQ4MDU3OwogICAgcmV0dXJuIGNvbG9yOwogIH0KCiAgdW5pZm9ybSBzYW1wbGVyMkQgc291cmNlOwogIHVuaWZvcm0gdmVjMiBfdmlld3BvcnRTaXplOwogIHVuaWZvcm0gZmxvYXQgX3RpbWU7CiAgQHtkZWZhdWx0OiJmYWxzZSJ9CiAgdW5pZm9ybSBib29sIHBhc3M7CiAgQHtkZWZhdWx0OiIyLjAifQogIHVuaWZvcm0gZmxvYXQgcG93ZXI7CiAgQHtkZWZhdWx0OiIzLjQifQogIHVuaWZvcm0gZmxvYXQgY29lZjsKICBAe2RlZmF1bHQ6IjEuMCJ9CiAgdW5pZm9ybSBmbG9hdCBhbXA7CiAgQHtkZWZhdWx0OiIxLjAifQogIHVuaWZvcm0gZmxvYXQgc3BlZWQ7CgogIHZvaWQgbWFpbigpIHsKICAgIHZlYzIgaVRleENvb3JkID0gdmVjMigxLiwgLTEuKSAqIHZUZXhDb29yZDsKICAgIGlmICghcGFzcykgewogICAgICBmbG9hdCB0ID0gX3RpbWUgKiBzcGVlZDsKICAgICAgdmVjMiBjZW50ZXIgPSB2ZWMyKHNpbih0ICogMC4wMDEgKyAwLjEpICsgc2luKHQgKiAwLjAwMDkpICsgc2luKHQgKiAwLjAwMTMpLCBzaW4odCAqIDAuMDAxKSArIHNpbih0ICogMC4wMDA5ICsgMC4xKSArIHNpbih0ICogMC4wMDEzKSkgKiBhbXAgKiAwLjE7CiAgICAgIHZlYzIgZGlyID0gKGlUZXhDb29yZCArIHZlYzIoLTAuNSwgMC41KSArIGNlbnRlcikgKiAyLiAqIF92aWV3cG9ydFNpemUgLyBsZW5ndGgoX3ZpZXdwb3J0U2l6ZSk7CiAgICAgIGdsX0ZyYWdDb2xvciA9IGJsdXIxMyhzb3VyY2UsIGlUZXhDb29yZCwgX3ZpZXdwb3J0U2l6ZSwgY29lZiAqIHZlYzIoc2lnbihkaXIueCkgKiBwb3coZGlyLngsIHBvd2VyKSwgc2lnbihkaXIueSkgKiBwb3coZGlyLnksIHBvd2VyKSkpOwogICAgfSBlbHNlIHsKICAgICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHNvdXJjZSwgaVRleENvb3JkKTsKICAgIH0KICB9CiNlbmRpZgo=","base64").toString();
MaterialFactory.addSORTMaterial("aberration", aberration);
gr.registerNode("render-aberration", [], {
  material: "new(aberration)"
}, "render-quad");

const hud = Buffer("QFBhc3MKQE5vQmxlbmQoKQpATm9EZXB0aCgpCkZTX1BSRUMobWVkaXVtcCxmbG9hdCkKCnZhcnlpbmcgdmVjMiB2VGV4Q29vcmQ7CgojaWZkZWYgVlMKICBhdHRyaWJ1dGUgdmVjMyBwb3NpdGlvbjsKICBhdHRyaWJ1dGUgdmVjMiB0ZXhDb29yZDsKICB2b2lkIG1haW4oKXsKICAgIGdsX1Bvc2l0aW9uID0gdmVjNChwb3NpdGlvbiwgMS4pOwogICAgdlRleENvb3JkID0gdGV4Q29vcmQ7CiAgfQojZW5kaWYKCiNpZmRlZiBGUwogIHVuaWZvcm0gc2FtcGxlcjJEIHNvdXJjZTsKICB1bmlmb3JtIHNhbXBsZXIyRCB0ZXh0dXJlOwogIHVuaWZvcm0gdmVjMiBfdmlld3BvcnRTaXplOwogIEB7ZGVmYXVsdDoiZmFsc2UifQogIHVuaWZvcm0gYm9vbCBwYXNzOwogIEB7ZGVmYXVsdDoiMS4wIn0KICB1bmlmb3JtIGZsb2F0IHNpemU7CgogIHZlYzQgYWxwaGFCbGVuZCh2ZWM0IGJhc2UsIHZlYzQgYmxlbmQpIHsKICAgIHJldHVybiB2ZWM0KGJhc2UucmdiICogYmFzZS5hICogKDEuMCAtIGJsZW5kLmEpICsgYmxlbmQucmdiICogYmxlbmQuYSwgYmxlbmQuYSArIGJhc2UuYSAqICgxLjAgLSBibGVuZC5hKSk7CiAgfQoKICB2b2lkIG1haW4oKSB7CiAgICB2ZWMyIGlUZXhDb29yZCA9IHZlYzIoMS4sIC0xLikgKiB2VGV4Q29vcmQ7CiAgICBpZiAoIXBhc3MpIHsKICAgICAgdmVjMiBzaXplZENvb3JkID0gdlRleENvb3JkICogc2l6ZSArIChzaXplIC0gMS4pICogdmVjMigtMC41KTsKICAgICAgaWYgKGFueShncmVhdGVyVGhhbihzaXplZENvb3JkLCB2ZWMyKDEuKSkpIHx8IGFueShsZXNzVGhhbihzaXplZENvb3JkLCB2ZWMyKDAuKSkpKSB7CiAgICAgICAgZ2xfRnJhZ0NvbG9yID0gdGV4dHVyZTJEKHNvdXJjZSwgaVRleENvb3JkKTsKICAgICAgfSBlbHNlIHsKICAgICAgICBnbF9GcmFnQ29sb3IgPSBhbHBoYUJsZW5kKHRleHR1cmUyRChzb3VyY2UsIGlUZXhDb29yZCksIHRleHR1cmUyRCh0ZXh0dXJlLCBzaXplZENvb3JkKSk7CiAgICAgIH0KICAgIH0gZWxzZSB7CiAgICAgIGdsX0ZyYWdDb2xvciA9IHRleHR1cmUyRChzb3VyY2UsIGlUZXhDb29yZCk7CiAgICB9CiAgfQojZW5kaWYK","base64").toString();
MaterialFactory.addSORTMaterial("hud", hud);
gr.registerNode("render-hud", [], {
  material: "new(hud)"
}, "render-quad");

const {
  GeometryUtility,
  GeometryBuilder,
  GeometryFactory,
} = require('grimoirejs-fundamental').default.Geometry;
const {Vector3, AABB} = require('grimoirejs-math').default;

class DivCube {
  constructor(div) {
    this.div = div;
    this.offset = 0;
    this.topology = 3;
    this.position = [];
    this.index = [];
    this.normal = [];
    this.count = 0;
    this.debug = false;
  }

  debugInit() {
    this.index_ = [];
    this.position_ = [];
    this.div_ = [];
  }

  generate(debug) {
    if (debug) {
      this.debug = true;
      this.debugInit();
    }
    this.cube();
    this.count = this.position.length / this.topology;
    if (this.debug) {
      this.validate();
      console.log(this.index_);
      console.log(this.position_);
    }
  }

  cube() {
    const center = Vector3.Zero;
    const up = Vector3.YUnit;
    const right = Vector3.XUnit;
    const forward = Vector3.ZUnit.negateThis();
    this.offset = 0;
    this.rect(center.subtractWith(forward), up, right, forward.negateThis()); // 手前
    this.rect(center.addWith(forward), up, right.negateThis(), forward); // 奥
    this.rect(center.addWith(up), forward, right, up); // 上
    this.rect(center.addWith(right), forward, up.negateThis(), right); // 右
    this.rect(center.subtractWith(up), forward, right.negateThis(), up.negateThis()); // 下
    this.rect(center.subtractWith(right), forward, up, right.negateThis()); // 左
  }

  rect(center, up, right, forward) {
    const xdiv = Math.abs(this.div.dotWith(right));
    const ydiv = Math.abs(this.div.dotWith(up));
    if (this.debug) { this.div_.push([xdiv,ydiv].toString()); }
    for (let x = 0; x <= xdiv; x++) {
      for (let y = 0; y <= ydiv; y++) {
        const p = center.addWith(right.multiplyWith(2 * x / xdiv - 1).addWith(up.multiplyWith(2 * y / ydiv - 1)));
        this.position = this.position.concat(Array.prototype.slice.call(p.rawElements));
        if (this.debug) { this.position_.push(Array.prototype.slice.call(p.rawElements).toString() + center.toString() + up.toString() + right.toString()); }
        this.normal = this.normal.concat(Array.prototype.slice.call(forward.rawElements));
        // console.log(x, y, this.position.length, this.normal.length);
        if (x !== 0 && y !== 0) {
          let poly = [];
          [[-1, -1], [0, -1], [-1, 0], [0, 0], [-1, 0], [0, -1]].forEach((dxdy, i) => {
            this.index.push(this.coordToIndex(this.offset, x + dxdy[0], y + dxdy[1], up));
            if (this.debug) {
              poly.push(this.coordToIndex(this.offset, x + dxdy[0], y + dxdy[1], up));
              if (poly.length === 3) {
                this.index_.push(poly.toString());
                poly = [];
              }
            }
          });
        }
      }
    }
    this.offset += (xdiv + 1) * (ydiv + 1);
  }

  coordToIndex(offset, x, y, up) {
    return offset + x * (Math.abs(this.div.dotWith(up)) + 1) + y;
  }

  validate() {
    if (this.position.length % 3 !== 0) {
      console.error(`position length(${this.position.length}) is not a multiple of 3.`);
    }
    if (this.normal.length % 3 !== 0) {
      console.error(`normal length(${this.normal.length}) is not a multiple of 3.`);
    }
    if (this.index.length % this.topology !== 0) {
      console.error(`index length(${this.index.length}) is not a multiple of topology(${this.topology}).`);
    }
    this.index.forEach((v, idx) => {
      if (isNaN(parseInt(v)) || parseInt(v) !== v) {
        console.error(`index(${v}) is not a integer. in: index[${idx}] (${Math.ceil(idx / this.topology)})`);
      }
      if (v > this.position.length / 3) {
        console.error(`index(${v}) is out of range. in: index[${idx}] (${Math.ceil(idx / this.topology)})`);
      }
    });
    this.position.forEach((v, idx) => {
      if (isNaN(parseFloat(v))) {
        console.error(`position(${v}) is not a number. in: position[${idx}] (${Math.ceil(idx / 3)})`);
      }
      if (v > 1.0 || v < -1.0) {
        console.warn(`position(${v}) is out of unit space(-1 < q < 1). in: position[${idx}] (${Math.ceil(idx / 3)})`);
      }
    });
    Array.from({length: this.normal.length / 3}, (v, i) => {
      return this.normal.slice(i * 3, i * 3 + 3);
    }).forEach((v, idx) => {
      const n = new Vector3(v);
      if (Math.abs(n.magnitude - 1) > 0.001) {
        console.warn(`normal(${v.toString()}) is not normalized(${n.magnitude}). in: normal[${idx * 3}..${idx * 3 + 3}] (${idx})`);
      }
    });
    if (this.position.length !== this.normal.length) {
      console.error(`normal length is not match to position length. normal: ${this.normal.length}, position: ${this.position.length}`);
    }
  }
}

// const d = new DivCube();
// const dv = new Vector3(1, 2, 1);
// d.generate(dv);
// console.log(2 * (3 * 2 * dv.X * dv.Y) + 2 * (3 * 2 * dv.Y * dv.Z) + 2 * (3 * 2 * dv.Z * dv.X));
// console.log((dv.X + 1) * (dv.Y + 1) * 2 * 3 + (dv.Y + 1) * (dv.Z + 1) * 2 * 3 + (dv.Z + 1) * (dv.X + 1) * 2 * 3);
// console.log((dv.X + 1) * (dv.Y + 1) * 2 * 3 + (dv.Y + 1) * (dv.Z + 1) * 2 * 3 + (dv.Z + 1) * (dv.X + 1) * 2 * 3);
// d.validate();

// const divCube = new DivCube();

const unitBox = new AABB([new Vector3(-1, -1, -1), new Vector3(1, 1, 1)]);

GeometryFactory.addType("div-cube", {
  div: {
    converter: 'Vector3',
    defaultValue: '2,2,2',
  },
}, (gl, attrs) => {
  const dc = new DivCube(attrs.div);
  dc.generate();
  return GeometryBuilder.build(gl, {
    indices: {
      default: {
        generator: function* () {
          yield* dc.index;
        },
        topology: WebGLRenderingContext.TRIANGLES
      },
      wireframe: {
        generator: function* () {
          yield* GeometryUtility.linesFromTriangles(dc.index);
        },
        topology: WebGLRenderingContext.LINES
      }
    },
    vertices: {
      main: {
        size: {
          position: 3,
          normal: 3,
          texCoord: 2
        },
        count: dc.count,
        getGenerators: () => {
          return {
            position: function* () {
              yield* dc.position;
            },
            normal: function* () {
              yield* dc.normal;
            },
            texCoord: function* () {
              while (true) {
                yield 1;
              }
            }
          };
        }
      }
    },
    aabb: unitBox
  });
});

const Tweenable = require('shifty');

function tw(opt) {
  return function() {
    return new Promise(function(resolve, reject) {
      try {
        opt.finish = resolve;
        (new Tweenable()).tween(opt);
      } catch (e) {
        reject(e);
      }
    });
  };
}

const EPS = Math.pow(10, -5);

gr(() => {
  const $ = gr('#canvas');
  const _cScale = $('#come').getAttribute('scale');
  const _cPosition = $('#come').getAttribute('position');
  const _nPosition = $('#neta').getAttribute('position');

  function move() {
    $('#come').setAttribute('scale', _cScale);
    $('#come').setAttribute('position', _cPosition);
    $('#neta').setAttribute('position', _nPosition);
    cScaleY = {
      from: 1.0,
      to: 0.4,
    };
    Promise.resolve().then(tw({
      from: {
        phi: 0,
        cScaleY: cScaleY.from,
      },
      to: {
        phi: 1/5,
        cScaleY: cScaleY.to,
      },
      duration: 500,
      easing: 'easeOutExpo',
      step(state) {
        let r = 1 / Math.sin(state.phi * Math.PI);
        if (r > 1 / EPS) { r = 1 / EPS } else if (r < -1 / EPS) { r = -1 / EPS }
        $('#neta-material').setAttribute('radius', r);
        $('#come').setAttribute('scale', new Vector3(_cScale.X, state.cScaleY, _cScale.Z));
        $('#neta').setAttribute('position', new Vector3(_nPosition.X, _nPosition.Y - (cScaleY.from - state.cScaleY), _nPosition.Z));
      },
    })).then(() => {
      const cPosition = $('#come').getAttribute('position');
      const nPosition = $('#neta').getAttribute('position');
      let scaled = false;
      return Promise.all([tw({
        from: {
          y: 0,
        },
        to: {
          y: 3,
        },
        duration: 1000,
        easing: 'easeOutExpo',
        step(state) {
          if (state.y < (cScaleY.from - cScaleY.to)) {
            $('#come').setAttribute('scale', new Vector3(_cScale.X, cScaleY.to + state.y, _cScale.Z));
          } else if (!scaled) {
            $('#come').setAttribute('scale', new Vector3(_cScale.X, cScaleY.from, _cScale.Z));
            scaled = true;
          }
          if (scaled) {
            $('#come').setAttribute('position', new Vector3(cPosition.X, cPosition.Y + state.y - (cScaleY.from - cScaleY.to), cPosition.Z));
          }
          $('#neta').setAttribute('position', new Vector3(nPosition.X, nPosition.Y + state.y, nPosition.Z));
        },
      }), tw({
        from: {
          phi: 1/4,
        },
        to: {
          phi: -1/2,
        },
        duration: 500,
        easing: 'easeOutExpo',
        step(state) {
          let r = 1 / Math.sin(state.phi * Math.PI);
          if (r > 1 / EPS) { r = 1 / EPS } else if (r < -1 / EPS) { r = -1 / EPS }
          $('#neta-material').setAttribute('radius', r);
        },
      })].map(v => v()));
    }).then(() => {
      move();
    }).catch((e) => {
      console.error(e);
    });
  }

  move();
});

}).call(this,require("buffer").Buffer)

},{"buffer":3,"grimoirejs-fundamental":4,"grimoirejs-math":6,"shifty":16}]},{},[1])
//# sourceMappingURL=index.js.map
